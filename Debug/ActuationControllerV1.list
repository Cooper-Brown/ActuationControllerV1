
ActuationControllerV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad54  0800ad54  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad5c  0800ad5c  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad5c  0800ad5c  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad60  0800ad60  0001ad60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800ad64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020178  2**0
                  CONTENTS
 10 .bss          00001fb8  20000178  20000178  00020178  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20002130  20002130  00020178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b46b  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ae5  00000000  00000000  0003b656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001680  00000000  00000000  00040140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010fc  00000000  00000000  000417c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002617d  00000000  00000000  000428bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f275  00000000  00000000  00068a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0b12  00000000  00000000  00087cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006308  00000000  00000000  001587c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  0015eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab88 	.word	0x0800ab88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	0800ab88 	.word	0x0800ab88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b970 	b.w	8000e24 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	460f      	mov	r7, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d965      	bls.n	8000c3e <__udivmoddi4+0xe2>
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	b143      	cbz	r3, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b7c:	f1c3 0220 	rsb	r2, r3, #32
 8000b80:	409f      	lsls	r7, r3
 8000b82:	fa20 f202 	lsr.w	r2, r0, r2
 8000b86:	4317      	orrs	r7, r2
 8000b88:	409c      	lsls	r4, r3
 8000b8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b8e:	fa1f f58c 	uxth.w	r5, ip
 8000b92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b96:	0c22      	lsrs	r2, r4, #16
 8000b98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ba0:	fb01 f005 	mul.w	r0, r1, r5
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000ba8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bb0:	f080 811c 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	f240 8119 	bls.w	8000dec <__udivmoddi4+0x290>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a12      	subs	r2, r2, r0
 8000bc0:	b2a4      	uxth	r4, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bce:	fb00 f505 	mul.w	r5, r0, r5
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x90>
 8000bd6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bda:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bde:	f080 8107 	bcs.w	8000df0 <__udivmoddi4+0x294>
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	f240 8104 	bls.w	8000df0 <__udivmoddi4+0x294>
 8000be8:	4464      	add	r4, ip
 8000bea:	3802      	subs	r0, #2
 8000bec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bf0:	1b64      	subs	r4, r4, r5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11e      	cbz	r6, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40dc      	lsrs	r4, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0xbc>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80ed 	beq.w	8000de6 <__udivmoddi4+0x28a>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d149      	bne.n	8000cb4 <__udivmoddi4+0x158>
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d302      	bcc.n	8000c2a <__udivmoddi4+0xce>
 8000c24:	4282      	cmp	r2, r0
 8000c26:	f200 80f8 	bhi.w	8000e1a <__udivmoddi4+0x2be>
 8000c2a:	1a84      	subs	r4, r0, r2
 8000c2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c30:	2001      	movs	r0, #1
 8000c32:	4617      	mov	r7, r2
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d0e2      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	e9c6 4700 	strd	r4, r7, [r6]
 8000c3c:	e7df      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c3e:	b902      	cbnz	r2, 8000c42 <__udivmoddi4+0xe6>
 8000c40:	deff      	udf	#255	; 0xff
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8090 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4c:	1a8a      	subs	r2, r1, r2
 8000c4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c52:	fa1f fe8c 	uxth.w	lr, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c60:	0c22      	lsrs	r2, r4, #16
 8000c62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c66:	fb0e f005 	mul.w	r0, lr, r5
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f200 80cb 	bhi.w	8000e14 <__udivmoddi4+0x2b8>
 8000c7e:	4645      	mov	r5, r8
 8000c80:	1a12      	subs	r2, r2, r0
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c88:	fb07 2210 	mls	r2, r7, r0, r2
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	fb0e fe00 	mul.w	lr, lr, r0
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x14e>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x14c>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	f200 80bb 	bhi.w	8000e1e <__udivmoddi4+0x2c2>
 8000ca8:	4610      	mov	r0, r2
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cb2:	e79f      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000cb4:	f1c1 0720 	rsb	r7, r1, #32
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cca:	40fd      	lsrs	r5, r7
 8000ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd0:	4323      	orrs	r3, r4
 8000cd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	fb09 5518 	mls	r5, r9, r8, r5
 8000cde:	0c1c      	lsrs	r4, r3, #16
 8000ce0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ce4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce8:	42a5      	cmp	r5, r4
 8000cea:	fa02 f201 	lsl.w	r2, r2, r1
 8000cee:	fa00 f001 	lsl.w	r0, r0, r1
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cfc:	f080 8088 	bcs.w	8000e10 <__udivmoddi4+0x2b4>
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	f240 8085 	bls.w	8000e10 <__udivmoddi4+0x2b4>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	4464      	add	r4, ip
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	b29d      	uxth	r5, r3
 8000d10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d14:	fb09 4413 	mls	r4, r9, r3, r4
 8000d18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d2c:	d26c      	bcs.n	8000e08 <__udivmoddi4+0x2ac>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	d96a      	bls.n	8000e08 <__udivmoddi4+0x2ac>
 8000d32:	3b02      	subs	r3, #2
 8000d34:	4464      	add	r4, ip
 8000d36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	42ac      	cmp	r4, r5
 8000d44:	46c8      	mov	r8, r9
 8000d46:	46ae      	mov	lr, r5
 8000d48:	d356      	bcc.n	8000df8 <__udivmoddi4+0x29c>
 8000d4a:	d053      	beq.n	8000df4 <__udivmoddi4+0x298>
 8000d4c:	b156      	cbz	r6, 8000d64 <__udivmoddi4+0x208>
 8000d4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d52:	eb64 040e 	sbc.w	r4, r4, lr
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	40ca      	lsrs	r2, r1
 8000d5c:	40cc      	lsrs	r4, r1
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	e9c6 7400 	strd	r7, r4, [r6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	f1c3 0120 	rsb	r1, r3, #32
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	fa20 f201 	lsr.w	r2, r0, r1
 8000d78:	fa25 f101 	lsr.w	r1, r5, r1
 8000d7c:	409d      	lsls	r5, r3
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d90:	0c11      	lsrs	r1, r2, #16
 8000d92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d96:	fb00 f50e 	mul.w	r5, r0, lr
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x258>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000daa:	d22f      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d92d      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000db0:	3802      	subs	r0, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	1b49      	subs	r1, r1, r5
 8000db6:	b292      	uxth	r2, r2
 8000db8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x282>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	d216      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000dd6:	4291      	cmp	r1, r2
 8000dd8:	d914      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000dda:	3d02      	subs	r5, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000de4:	e738      	b.n	8000c58 <__udivmoddi4+0xfc>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e708      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000dec:	4639      	mov	r1, r7
 8000dee:	e6e6      	b.n	8000bbe <__udivmoddi4+0x62>
 8000df0:	4610      	mov	r0, r2
 8000df2:	e6fb      	b.n	8000bec <__udivmoddi4+0x90>
 8000df4:	4548      	cmp	r0, r9
 8000df6:	d2a9      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e00:	3b01      	subs	r3, #1
 8000e02:	e7a3      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e04:	4645      	mov	r5, r8
 8000e06:	e7ea      	b.n	8000dde <__udivmoddi4+0x282>
 8000e08:	462b      	mov	r3, r5
 8000e0a:	e794      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	e7d1      	b.n	8000db4 <__udivmoddi4+0x258>
 8000e10:	46d0      	mov	r8, sl
 8000e12:	e77b      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e14:	3d02      	subs	r5, #2
 8000e16:	4462      	add	r2, ip
 8000e18:	e732      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e70a      	b.n	8000c34 <__udivmoddi4+0xd8>
 8000e1e:	4464      	add	r4, ip
 8000e20:	3802      	subs	r0, #2
 8000e22:	e742      	b.n	8000caa <__udivmoddi4+0x14e>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_DAC_Init+0x60>)
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <MX_DAC_Init+0x64>)
 8000e3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e3c:	4812      	ldr	r0, [pc, #72]	; (8000e88 <MX_DAC_Init+0x60>)
 8000e3e:	f001 fd56 	bl	80028ee <HAL_DAC_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e48:	f000 fa44 	bl	80012d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_DAC_Init+0x60>)
 8000e5c:	f001 fe44 	bl	8002ae8 <HAL_DAC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e66:	f000 fa35 	bl	80012d4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_DAC_Init+0x60>)
 8000e72:	f001 fe39 	bl	8002ae8 <HAL_DAC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 fa2a 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000194 	.word	0x20000194
 8000e8c:	40007400 	.word	0x40007400

08000e90 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <HAL_DAC_MspInit+0x8c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d12f      	bne.n	8000f12 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_DAC_MspInit+0x90>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_DAC_MspInit+0x90>)
 8000ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_DAC_MspInit+0x90>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_DAC_MspInit+0x90>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_DAC_MspInit+0x90>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_DAC_MspInit+0x90>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eea:	2330      	movs	r3, #48	; 0x30
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_DAC_MspInit+0x94>)
 8000efe:	f001 fe6f 	bl	8002be0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2036      	movs	r0, #54	; 0x36
 8000f08:	f001 fcc3 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f0c:	2036      	movs	r0, #54	; 0x36
 8000f0e:	f001 fcdc 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40007400 	.word	0x40007400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a8a      	ldr	r2, [pc, #552]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b88      	ldr	r3, [pc, #544]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b84      	ldr	r3, [pc, #528]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a83      	ldr	r2, [pc, #524]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b81      	ldr	r3, [pc, #516]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b7d      	ldr	r3, [pc, #500]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a7c      	ldr	r2, [pc, #496]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b7a      	ldr	r3, [pc, #488]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b76      	ldr	r3, [pc, #472]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a75      	ldr	r2, [pc, #468]	; (8001170 <MX_GPIO_Init+0x248>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b6c      	ldr	r3, [pc, #432]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b68      	ldr	r3, [pc, #416]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a67      	ldr	r2, [pc, #412]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b65      	ldr	r3, [pc, #404]	; (8001170 <MX_GPIO_Init+0x248>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4862      	ldr	r0, [pc, #392]	; (8001174 <MX_GPIO_Init+0x24c>)
 8000fec:	f001 ffac 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4860      	ldr	r0, [pc, #384]	; (8001178 <MX_GPIO_Init+0x250>)
 8000ff6:	f001 ffa7 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Yen_Pin|XenOld_Pin|Xdir_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	21c8      	movs	r1, #200	; 0xc8
 8000ffe:	485f      	ldr	r0, [pc, #380]	; (800117c <MX_GPIO_Init+0x254>)
 8001000:	f001 ffa2 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Xen_GPIO_Port, Xen_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	485d      	ldr	r0, [pc, #372]	; (8001180 <MX_GPIO_Init+0x258>)
 800100c:	f001 ff9c 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f24c 0110 	movw	r1, #49168	; 0xc010
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <MX_GPIO_Init+0x258>)
 8001018:	f001 ff96 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800101c:	2308      	movs	r3, #8
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4850      	ldr	r0, [pc, #320]	; (8001174 <MX_GPIO_Init+0x24c>)
 8001034:	f001 fdd4 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001038:	2301      	movs	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	484a      	ldr	r0, [pc, #296]	; (8001178 <MX_GPIO_Init+0x250>)
 8001050:	f001 fdc6 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001058:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4844      	ldr	r0, [pc, #272]	; (800117c <MX_GPIO_Init+0x254>)
 800106a:	f001 fdb9 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Yen_Pin|XenOld_Pin|Xdir_Pin;
 800106e:	23c8      	movs	r3, #200	; 0xc8
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	483d      	ldr	r0, [pc, #244]	; (800117c <MX_GPIO_Init+0x254>)
 8001086:	f001 fdab 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800108a:	2304      	movs	r3, #4
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4839      	ldr	r0, [pc, #228]	; (8001184 <MX_GPIO_Init+0x25c>)
 800109e:	f001 fd9f 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	482f      	ldr	r0, [pc, #188]	; (8001174 <MX_GPIO_Init+0x24c>)
 80010b8:	f001 fd92 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Xen_Pin;
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Xen_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	482a      	ldr	r0, [pc, #168]	; (8001180 <MX_GPIO_Init+0x258>)
 80010d6:	f001 fd83 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Yz_Pin;
 80010da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Yz_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4823      	ldr	r0, [pc, #140]	; (8001180 <MX_GPIO_Init+0x258>)
 80010f2:	f001 fd75 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin|Audio_RST_Pin;
 80010f6:	f24c 0310 	movw	r3, #49168	; 0xc010
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	481c      	ldr	r0, [pc, #112]	; (8001180 <MX_GPIO_Init+0x258>)
 8001110:	f001 fd66 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Xz_Pin;
 8001114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Xz_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4813      	ldr	r0, [pc, #76]	; (8001178 <MX_GPIO_Init+0x250>)
 800112c:	f001 fd58 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	480f      	ldr	r0, [pc, #60]	; (8001180 <MX_GPIO_Init+0x258>)
 8001144:	f001 fd4c 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2017      	movs	r0, #23
 800114e:	f001 fba0 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001152:	2017      	movs	r0, #23
 8001154:	f001 fbb9 	bl	80028ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2028      	movs	r0, #40	; 0x28
 800115e:	f001 fb98 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001162:	2028      	movs	r0, #40	; 0x28
 8001164:	f001 fbb1 	bl	80028ca <HAL_NVIC_EnableIRQ>

}
 8001168:	bf00      	nop
 800116a:	3730      	adds	r7, #48	; 0x30
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40021000 	.word	0x40021000
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40020400 	.word	0x40020400

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f001 fa4b 	bl	8002628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f823 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f7ff fec7 	bl	8000f28 <MX_GPIO_Init>
  MX_SPI2_Init();
 800119a:	f000 f8a1 	bl	80012e0 <MX_SPI2_Init>
  MX_DAC_Init();
 800119e:	f7ff fe43 	bl	8000e28 <MX_DAC_Init>
  MX_TIM3_Init();
 80011a2:	f000 faad 	bl	8001700 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011a6:	f000 faff 	bl	80017a8 <MX_TIM4_Init>
  MX_TIM9_Init();
 80011aa:	f000 fb51 	bl	8001850 <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 80011ae:	f008 f979 	bl	80094a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  myInit(&hdac, &htim3, &htim4, &htim9, &hspi2);
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <main+0x40>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <main+0x44>)
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <main+0x48>)
 80011ba:	4906      	ldr	r1, [pc, #24]	; (80011d4 <main+0x4c>)
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <main+0x50>)
 80011be:	f001 f8d7 	bl	8002370 <myInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	myLoopInternals();
 80011c2:	f001 f95d 	bl	8002480 <myLoopInternals>
 80011c6:	e7fc      	b.n	80011c2 <main+0x3a>
 80011c8:	200001a8 	.word	0x200001a8
 80011cc:	200002dc 	.word	0x200002dc
 80011d0:	20000294 	.word	0x20000294
 80011d4:	2000024c 	.word	0x2000024c
 80011d8:	20000194 	.word	0x20000194

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 febe 	bl	8009f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <SystemClock_Config+0xcc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <SystemClock_Config+0xcc>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <SystemClock_Config+0xcc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <SystemClock_Config+0xd0>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <SystemClock_Config+0xd0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001250:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800125a:	2307      	movs	r3, #7
 800125c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f003 f920 	bl	80044a8 <HAL_RCC_OscConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800126e:	f000 f831 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
 8001274:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001276:	2302      	movs	r3, #2
 8001278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800127e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2105      	movs	r1, #5
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fb81 	bl	8004998 <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800129c:	f000 f81a 	bl	80012d4 <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3750      	adds	r7, #80	; 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012c2:	f001 f9d3 	bl	800266c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40001000 	.word	0x40001000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_SPI2_Init+0x5c>)
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_SPI2_Init+0x60>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_SPI2_Init+0x5c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_SPI2_Init+0x5c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI2_Init+0x5c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_SPI2_Init+0x5c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI2_Init+0x5c>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI2_Init+0x5c>)
 800130a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_SPI2_Init+0x5c>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI2_Init+0x5c>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_SPI2_Init+0x5c>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI2_Init+0x5c>)
 8001324:	220a      	movs	r2, #10
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_SPI2_Init+0x5c>)
 800132a:	f003 fd73 	bl	8004e14 <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8001334:	f7ff ffce 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001a8 	.word	0x200001a8
 8001340:	40003800 	.word	0x40003800

08001344 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <HAL_SPI_MspInit+0xd0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d152      	bne.n	800140c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a2a      	ldr	r2, [pc, #168]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_SPI_MspInit+0xd4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ca:	2305      	movs	r3, #5
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <HAL_SPI_MspInit+0xd8>)
 80013d6:	f001 fc03 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ec:	2305      	movs	r3, #5
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <HAL_SPI_MspInit+0xdc>)
 80013f8:	f001 fbf2 	bl	8002be0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2024      	movs	r0, #36	; 0x24
 8001402:	f001 fa46 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001406:	2024      	movs	r0, #36	; 0x24
 8001408:	f001 fa5f 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40003800 	.word	0x40003800
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40020400 	.word	0x40020400

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001462:	2007      	movs	r0, #7
 8001464:	f001 fa0a 	bl	800287c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_InitTick+0xe4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_InitTick+0xe4>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_InitTick+0xe4>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a0:	f107 0210 	add.w	r2, r7, #16
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fc80 	bl	8004db0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ba:	f003 fc65 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80014be:	6378      	str	r0, [r7, #52]	; 0x34
 80014c0:	e004      	b.n	80014cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014c2:	f003 fc61 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80014c6:	4603      	mov	r3, r0
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <HAL_InitTick+0xe8>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3b01      	subs	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_InitTick+0xec>)
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_InitTick+0xf0>)
 80014de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_InitTick+0xec>)
 80014e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_InitTick+0xec>)
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_InitTick+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_InitTick+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_InitTick+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <HAL_InitTick+0xec>)
 8001502:	f003 fe23 	bl	800514c <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800150c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11b      	bne.n	800154c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <HAL_InitTick+0xec>)
 8001516:	f003 fe69 	bl	80051ec <HAL_TIM_Base_Start_IT>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001520:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001528:	2036      	movs	r0, #54	; 0x36
 800152a:	f001 f9ce 	bl	80028ca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d808      	bhi.n	8001546 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f001 f9aa 	bl	8002892 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_InitTick+0xf4>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e002      	b.n	800154c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800154c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001550:	4618      	mov	r0, r3
 8001552:	3738      	adds	r7, #56	; 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	431bde83 	.word	0x431bde83
 8001560:	20000200 	.word	0x20000200
 8001564:	40001000 	.word	0x40001000
 8001568:	2000002c 	.word	0x2000002c

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Xz_Pin);
 80015c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015ca:	f001 fcd7 	bl	8002f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80015da:	f003 ffab 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200002dc 	.word	0x200002dc

080015e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <TIM3_IRQHandler+0x10>)
 80015ee:	f003 ffa1 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000024c 	.word	0x2000024c

080015fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM4_IRQHandler+0x10>)
 8001602:	f003 ff97 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000294 	.word	0x20000294

08001610 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <SPI2_IRQHandler+0x10>)
 8001616:	f003 fc87 	bl	8004f28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001a8 	.word	0x200001a8

08001624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Yz_Pin);
 8001628:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800162c:	f001 fca6 	bl	8002f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <TIM6_DAC_IRQHandler+0x20>)
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <TIM6_DAC_IRQHandler+0x20>)
 8001644:	f001 f9c7 	bl	80029d6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <TIM6_DAC_IRQHandler+0x24>)
 800164a:	f003 ff73 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000194 	.word	0x20000194
 8001658:	20000200 	.word	0x20000200

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f001 fdf3 	bl	800324c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200018bc 	.word	0x200018bc

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f008 fc6c 	bl	8009f7c <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	20000248 	.word	0x20000248
 80016d8:	20002130 	.word	0x20002130

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f008 fc2c 	bl	8009f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MX_TIM3_Init+0xa0>)
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <MX_TIM3_Init+0xa4>)
 8001720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM3_Init+0xa0>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM3_Init+0xa0>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM3_Init+0xa0>)
 8001730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM3_Init+0xa0>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_TIM3_Init+0xa0>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001742:	2303      	movs	r3, #3
 8001744:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800174a:	2301      	movs	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800175a:	2301      	movs	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <MX_TIM3_Init+0xa0>)
 800176e:	f003 fdad 	bl	80052cc <HAL_TIM_Encoder_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001778:	f7ff fdac 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_TIM3_Init+0xa0>)
 800178a:	f004 fa2b 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001794:	f7ff fd9e 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000024c 	.word	0x2000024c
 80017a4:	40000400 	.word	0x40000400

080017a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	; 0x30
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2224      	movs	r2, #36	; 0x24
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f008 fbd8 	bl	8009f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <MX_TIM4_Init+0xa0>)
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <MX_TIM4_Init+0xa4>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_TIM4_Init+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_TIM4_Init+0xa0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_TIM4_Init+0xa0>)
 80017d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_TIM4_Init+0xa0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_TIM4_Init+0xa0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ea:	2303      	movs	r3, #3
 80017ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <MX_TIM4_Init+0xa0>)
 8001816:	f003 fd59 	bl	80052cc <HAL_TIM_Encoder_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001820:	f7ff fd58 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_TIM4_Init+0xa0>)
 8001832:	f004 f9d7 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800183c:	f7ff fd4a 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3730      	adds	r7, #48	; 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000294 	.word	0x20000294
 800184c:	40000800 	.word	0x40000800

08001850 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	463b      	mov	r3, r7
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM9_Init+0x6c>)
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <MX_TIM9_Init+0x70>)
 8001866:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_TIM9_Init+0x6c>)
 800186a:	22a7      	movs	r2, #167	; 0xa7
 800186c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_TIM9_Init+0x6c>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 5000;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_TIM9_Init+0x6c>)
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_TIM9_Init+0x6c>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_TIM9_Init+0x6c>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_TIM9_Init+0x6c>)
 800188a:	f003 fc5f 	bl	800514c <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001894:	f7ff fd1e 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_TIM9_Init+0x6c>)
 80018a4:	f003 ff4e 	bl	8005744 <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80018ae:	f7ff fd11 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200002dc 	.word	0x200002dc
 80018c0:	40014000 	.word	0x40014000

080018c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <HAL_TIM_Encoder_MspInit+0x108>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d134      	bne.n	8001950 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800192e:	2302      	movs	r3, #2
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	4826      	ldr	r0, [pc, #152]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x110>)
 800193a:	f001 f951 	bl	8002be0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	201d      	movs	r0, #29
 8001944:	f000 ffa5 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001948:	201d      	movs	r0, #29
 800194a:	f000 ffbe 	bl	80028ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800194e:	e039      	b.n	80019c4 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x114>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d134      	bne.n	80019c4 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001992:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	480b      	ldr	r0, [pc, #44]	; (80019dc <HAL_TIM_Encoder_MspInit+0x118>)
 80019b0:	f001 f916 	bl	8002be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	201e      	movs	r0, #30
 80019ba:	f000 ff6a 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019be:	201e      	movs	r0, #30
 80019c0:	f000 ff83 	bl	80028ca <HAL_NVIC_EnableIRQ>
}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40020c00 	.word	0x40020c00

080019e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d115      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_TIM_Base_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_TIM_Base_MspInit+0x4c>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_TIM_Base_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	2018      	movs	r0, #24
 8001a14:	f000 ff3d 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a18:	2018      	movs	r0, #24
 8001a1a:	f000 ff56 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40014000 	.word	0x40014000
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_GPIO_EXTI_Callback>:
}

uint32_t xRotCount;
uint32_t yRotCount;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Xz_Pin){
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a40:	d105      	bne.n	8001a4e <HAL_GPIO_EXTI_Callback+0x1e>
		xRotCount++;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001a4a:	6013      	str	r3, [r2, #0]
	else if (GPIO_Pin == ESTOP_Pin){
		//applySoftwareLock();
		// Indicator LED??
		// HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	}
}
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_EXTI_Callback+0x30>
	else if (GPIO_Pin == Yz_Pin){
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a54:	d104      	bne.n	8001a60 <HAL_GPIO_EXTI_Callback+0x30>
		yRotCount++;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	20000324 	.word	0x20000324
 8001a70:	20000328 	.word	0x20000328

08001a74 <receiveTargetCoordinate>:
const char* resetCommand = "R";

#define TABLE_X_BOUNDARY_MIN 2000
#define TABLE_X_BOUNDARY_MAX 15100

void receiveTargetCoordinate(char* commandInput){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	; 0x38
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	// commandFormat - C:xInt:yInt:
	char xCoordinateChar[10];
	char yCoordinateChar[10];
	int xCoordinateStartIndex = 2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int commandIndex = xCoordinateStartIndex;
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
	while (commandInput[commandIndex] != ':'){
 8001a84:	e00d      	b.n	8001aa2 <receiveTargetCoordinate+0x2e>
		xCoordinateChar[commandIndex - xCoordinateStartIndex] = commandInput[commandIndex];
 8001a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	441a      	add	r2, r3
 8001a8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	1acb      	subs	r3, r1, r3
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	443b      	add	r3, r7
 8001a98:	f803 2c1c 	strb.w	r2, [r3, #-28]
		commandIndex++;
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
	while (commandInput[commandIndex] != ':'){
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b3a      	cmp	r3, #58	; 0x3a
 8001aac:	d1eb      	bne.n	8001a86 <receiveTargetCoordinate+0x12>
	}
	xCoordinateChar[commandIndex - xCoordinateStartIndex] = '\0';
 8001aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	3338      	adds	r3, #56	; 0x38
 8001ab6:	443b      	add	r3, r7
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f803 2c1c 	strb.w	r2, [r3, #-28]
	commandIndex++; // Skip past the : character
 8001abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
	int yCoordinateStartIndex = commandIndex;
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	while (commandInput[commandIndex] != ':'){
 8001ac8:	e00d      	b.n	8001ae6 <receiveTargetCoordinate+0x72>
		yCoordinateChar[commandIndex - yCoordinateStartIndex] = commandInput[commandIndex];
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	441a      	add	r2, r3
 8001ad0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	1acb      	subs	r3, r1, r3
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	3338      	adds	r3, #56	; 0x38
 8001ada:	443b      	add	r3, r7
 8001adc:	f803 2c28 	strb.w	r2, [r3, #-40]
		commandIndex++;
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
	while (commandInput[commandIndex] != ':'){
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b3a      	cmp	r3, #58	; 0x3a
 8001af0:	d1eb      	bne.n	8001aca <receiveTargetCoordinate+0x56>
	}
	yCoordinateChar[commandIndex - yCoordinateStartIndex] = 0;
 8001af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	3338      	adds	r3, #56	; 0x38
 8001afa:	443b      	add	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	f803 2c28 	strb.w	r2, [r3, #-40]

	int xPositionInt = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
	int yPositionInt = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
	sscanf(xCoordinateChar, "%du", &xPositionInt);
 8001b0a:	f107 020c 	add.w	r2, r7, #12
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	491d      	ldr	r1, [pc, #116]	; (8001b88 <receiveTargetCoordinate+0x114>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f008 f9fb 	bl	8009f10 <siscanf>
	sscanf(yCoordinateChar, "%du", &yPositionInt);
 8001b1a:	f107 0208 	add.w	r2, r7, #8
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4919      	ldr	r1, [pc, #100]	; (8001b88 <receiveTargetCoordinate+0x114>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f008 f9f3 	bl	8009f10 <siscanf>
	uint16_t xPosition = (uint16_t) xPositionInt;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t yPosition = (uint16_t) yPositionInt;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	863b      	strh	r3, [r7, #48]	; 0x30

	if (xPosition < TABLE_X_BOUNDARY_MIN){
 8001b32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b38:	d202      	bcs.n	8001b40 <receiveTargetCoordinate+0xcc>
		xPosition = TABLE_X_BOUNDARY_MIN;
 8001b3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b3e:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	if (xPosition > TABLE_X_BOUNDARY_MAX) {
 8001b40:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b42:	f643 22fc 	movw	r2, #15100	; 0x3afc
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d902      	bls.n	8001b50 <receiveTargetCoordinate+0xdc>
		xPosition = TABLE_X_BOUNDARY_MAX;
 8001b4a:	f643 23fc 	movw	r3, #15100	; 0x3afc
 8001b4e:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	if (yPosition < TABLE_Y_BOUNDARY_MIN){
 8001b50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b56:	d202      	bcs.n	8001b5e <receiveTargetCoordinate+0xea>
		yPosition = TABLE_Y_BOUNDARY_MIN;
 8001b58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b5c:	863b      	strh	r3, [r7, #48]	; 0x30
	}
	if (yPosition > TABLE_Y_BOUNDARY_MAX) {
 8001b5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b60:	f244 3294 	movw	r2, #17300	; 0x4394
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d902      	bls.n	8001b6e <receiveTargetCoordinate+0xfa>
		yPosition = TABLE_Y_BOUNDARY_MAX;
 8001b68:	f244 3394 	movw	r3, #17300	; 0x4394
 8001b6c:	863b      	strh	r3, [r7, #48]	; 0x30
	}
	targetCoordinateIn.xPosition = xPosition;
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <receiveTargetCoordinate+0x118>)
 8001b70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001b72:	8013      	strh	r3, [r2, #0]
	targetCoordinateIn.yPosition = yPosition;
 8001b74:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <receiveTargetCoordinate+0x118>)
 8001b76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b78:	8053      	strh	r3, [r2, #2]
	updatedCoordinateIn = 1;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <receiveTargetCoordinate+0x11c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
	return;
 8001b80:	bf00      	nop
}
 8001b82:	3738      	adds	r7, #56	; 0x38
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	0800abc4 	.word	0x0800abc4
 8001b8c:	20000330 	.word	0x20000330
 8001b90:	20000334 	.word	0x20000334

08001b94 <commandReceived>:

// TODO decode the command and add it to a buffer to be processed when the time is right
void commandReceived(char* charAccumulator, uint8_t commandSize){
 8001b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b98:	b087      	sub	sp, #28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
 8001ba2:	466b      	mov	r3, sp
 8001ba4:	461e      	mov	r6, r3
	char commandInput[commandSize+1];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	1e4b      	subs	r3, r1, #1
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	460a      	mov	r2, r1
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bca:	460a      	mov	r2, r1
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4614      	mov	r4, r2
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	00eb      	lsls	r3, r5, #3
 8001bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be0:	00e2      	lsls	r2, r4, #3
 8001be2:	460b      	mov	r3, r1
 8001be4:	3307      	adds	r3, #7
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	ebad 0d03 	sub.w	sp, sp, r3
 8001bee:	466b      	mov	r3, sp
 8001bf0:	3300      	adds	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
	int c;
	for (c = 0; c < commandSize; c++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e00b      	b.n	8001c12 <commandReceived+0x7e>
		commandInput[c] = charAccumulator[c];
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	7819      	ldrb	r1, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
	for (c = 0; c < commandSize; c++)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbef      	blt.n	8001bfa <commandReceived+0x66>
	commandInput[c] = '\0';
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4413      	add	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

	if (!strcmp(enableCommand, commandInput)){
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <commandReceived+0xdc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fad0 	bl	80001d0 <strcmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <commandReceived+0xa8>
		logicEnableCommandSent = 1;
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <commandReceived+0xe0>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
	}

	if (commandInput[0] == 67){
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b43      	cmp	r3, #67	; 0x43
 8001c42:	d102      	bne.n	8001c4a <commandReceived+0xb6>
		receiveTargetCoordinate(commandInput);
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff ff15 	bl	8001a74 <receiveTargetCoordinate>
	}
	if (!strcmp(resetCommand, commandInput)){
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <commandReceived+0xe4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fabd 	bl	80001d0 <strcmp>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <commandReceived+0xcc>
		HAL_NVIC_SystemReset();
 8001c5c:	f000 fe43 	bl	80028e6 <HAL_NVIC_SystemReset>
	}
	else if (!strcmp(yStopCommand, commandInput)){
		y_stop();
	}
	*/
	return;
 8001c60:	bf00      	nop
 8001c62:	46b5      	mov	sp, r6
 8001c64:	bf00      	nop
}
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000004 	.word	0x20000004
 8001c74:	2000032c 	.word	0x2000032c
 8001c78:	20000008 	.word	0x20000008

08001c7c <sign>:
#include "myInc/globals.h"
#include "myInc/Feedback.h"
#include <stdlib.h>


int32_t sign(int32_t x) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    return (x > 0) - (x < 0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bfcc      	ite	gt
 8001c8a:	2301      	movgt	r3, #1
 8001c8c:	2300      	movle	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0fdb      	lsrs	r3, r3, #31
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	1ad3      	subs	r3, r2, r3
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <integrationStep_X>:
// X Integrator
float lastError_X = 0;
uint32_t lastUpdateTicks_X;
float rollingIntegral_X = 0;
uint8_t integralFirstUpdateNeeded_X = 1;
float integrationStep_X(float error){
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (integralFirstUpdateNeeded_X) {
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <integrationStep_X+0xe4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <integrationStep_X+0x28>
		lastUpdateTicks_X = HAL_GetTick();
 8001cba:	f000 fceb 	bl	8002694 <HAL_GetTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <integrationStep_X+0xe8>)
 8001cc2:	6013      	str	r3, [r2, #0]
		integralFirstUpdateNeeded_X = 0;
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <integrationStep_X+0xe4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
		return 0;
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e056      	b.n	8001d7e <integrationStep_X+0xd6>
	}
	uint32_t currentTicks = HAL_GetTick();
 8001cd0:	f000 fce0 	bl	8002694 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]
	rollingIntegral_X += ((error + lastError_X) * ((float)(currentTicks-lastUpdateTicks_X))) / 2.0;
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <integrationStep_X+0xec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc44 	bl	8000568 <__aeabi_f2d>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	460d      	mov	r5, r1
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <integrationStep_X+0xf0>)
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <integrationStep_X+0xe8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	ee17 0a90 	vmov	r0, s15
 8001d0a:	f7fe fc2d 	bl	8000568 <__aeabi_f2d>
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d16:	f7fe fda9 	bl	800086c <__aeabi_ddiv>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fac3 	bl	80002ac <__adddf3>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fead 	bl	8000a8c <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <integrationStep_X+0xec>)
 8001d36:	6013      	str	r3, [r2, #0]

	// anti-windup
	if (rollingIntegral_X > 100){
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <integrationStep_X+0xec>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001d9c <integrationStep_X+0xf4>
 8001d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	dd03      	ble.n	8001d54 <integrationStep_X+0xac>
		rollingIntegral_X = 100;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <integrationStep_X+0xec>)
 8001d4e:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <integrationStep_X+0xf8>)
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e00c      	b.n	8001d6e <integrationStep_X+0xc6>
	}
	else if (rollingIntegral_X < -100){
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <integrationStep_X+0xec>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001da4 <integrationStep_X+0xfc>
 8001d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	d502      	bpl.n	8001d6e <integrationStep_X+0xc6>
		rollingIntegral_X = -100;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <integrationStep_X+0xec>)
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <integrationStep_X+0x100>)
 8001d6c:	601a      	str	r2, [r3, #0]
	}

	// saving data for next loop
	lastError_X = error;
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <integrationStep_X+0xf0>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6013      	str	r3, [r2, #0]
	lastUpdateTicks_X = currentTicks;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <integrationStep_X+0xe8>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6013      	str	r3, [r2, #0]
	return rollingIntegral_X;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <integrationStep_X+0xec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
}
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eeb0 0a67 	vmov.f32	s0, s15
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	2000033c 	.word	0x2000033c
 8001d94:	20000340 	.word	0x20000340
 8001d98:	20000338 	.word	0x20000338
 8001d9c:	42c80000 	.word	0x42c80000
 8001da0:	42c80000 	.word	0x42c80000
 8001da4:	c2c80000 	.word	0xc2c80000
 8001da8:	c2c80000 	.word	0xc2c80000

08001dac <integrationStep_Y>:
// Y Integrator
float lastError_Y = 0;
uint32_t lastUpdateTicks_Y;
float rollingIntegral_Y = 0;
uint8_t integralFirstUpdateNeeded_Y = 1;
float integrationStep_Y(float error){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (integralFirstUpdateNeeded_Y) {
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <integrationStep_Y+0x98>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <integrationStep_Y+0x28>
		lastUpdateTicks_Y = HAL_GetTick();
 8001dbe:	f000 fc69 	bl	8002694 <HAL_GetTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <integrationStep_Y+0x9c>)
 8001dc6:	6013      	str	r3, [r2, #0]
		integralFirstUpdateNeeded_Y = 0;
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <integrationStep_Y+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
		return 0;
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e02f      	b.n	8001e34 <integrationStep_Y+0x88>
	}
	uint32_t currentTicks = HAL_GetTick();
 8001dd4:	f000 fc5e 	bl	8002694 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]
	rollingIntegral_Y += error;//((error + lastError_Y) * ((float)(currentTicks-lastUpdateTicks_Y))) / 2.0;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <integrationStep_Y+0xa0>)
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <integrationStep_Y+0xa0>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]

	// anti-windup
	if (rollingIntegral_Y > 100){
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <integrationStep_Y+0xa0>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001e50 <integrationStep_Y+0xa4>
 8001df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	dd03      	ble.n	8001e0a <integrationStep_Y+0x5e>
		rollingIntegral_Y = 100;
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <integrationStep_Y+0xa0>)
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <integrationStep_Y+0xa8>)
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e00c      	b.n	8001e24 <integrationStep_Y+0x78>
	}
	else if (rollingIntegral_Y < -100){
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <integrationStep_Y+0xa0>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e58 <integrationStep_Y+0xac>
 8001e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d502      	bpl.n	8001e24 <integrationStep_Y+0x78>
		rollingIntegral_Y = -100;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <integrationStep_Y+0xa0>)
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <integrationStep_Y+0xb0>)
 8001e22:	601a      	str	r2, [r3, #0]
	}

	lastError_Y = error;
 8001e24:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <integrationStep_Y+0xb4>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
	lastUpdateTicks_Y = currentTicks;
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <integrationStep_Y+0x9c>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6013      	str	r3, [r2, #0]
	return rollingIntegral_Y;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <integrationStep_Y+0xa0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000000d 	.word	0x2000000d
 8001e48:	20000348 	.word	0x20000348
 8001e4c:	2000034c 	.word	0x2000034c
 8001e50:	42c80000 	.word	0x42c80000
 8001e54:	42c80000 	.word	0x42c80000
 8001e58:	c2c80000 	.word	0xc2c80000
 8001e5c:	c2c80000 	.word	0xc2c80000
 8001e60:	20000344 	.word	0x20000344

08001e64 <PIDControlStep>:

int32_t xTopSpeed = 20000;
int32_t yTopSpeed = 2000;
float lastXError = 0;
float lastYError = 0;
void PIDControlStep(Coordinate setpoint, Coordinate currentPosition, int32_t* newSpeedX, int32_t* newSpeedY){
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
	// Get error between -100 and 100
	int xErrorTicks = (int32_t)(setpoint.xPosition) - (int32_t)(currentPosition.xPosition);
 8001e72:	89bb      	ldrh	r3, [r7, #12]
 8001e74:	461a      	mov	r2, r3
 8001e76:	893b      	ldrh	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	61fb      	str	r3, [r7, #28]
	int yErrorTicks = (int32_t)(setpoint.yPosition) - (int32_t)(currentPosition.yPosition);
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	61bb      	str	r3, [r7, #24]
	float xError = 100.0 * (xErrorTicks/((float)(TABLE_X_BOUNDARY_MAX - TABLE_X_BOUNDARY_MIN)));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e90:	eddf 6a90 	vldr	s13, [pc, #576]	; 80020d4 <PIDControlStep+0x270>
 8001e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e98:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80020d8 <PIDControlStep+0x274>
 8001e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea0:	edc7 7a05 	vstr	s15, [r7, #20]
	float yError = 100.0 * (yErrorTicks/((float)(TABLE_Y_BOUNDARY_MAX - TABLE_Y_BOUNDARY_MIN)));
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eae:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80020dc <PIDControlStep+0x278>
 8001eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80020d8 <PIDControlStep+0x274>
 8001eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebe:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate new x speed as % of top speed
	float xSpeedPercent = 0;
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
	xSpeedPercent += x_P * xError;
 8001ec8:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <PIDControlStep+0x27c>)
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	xSpeedPercent += x_I * integrationStep_X(xError);
 8001ee2:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ee6:	f7ff fedf 	bl	8001ca8 <integrationStep_X>
 8001eea:	eeb0 7a40 	vmov.f32	s14, s0
 8001eee:	4b7d      	ldr	r3, [pc, #500]	; (80020e4 <PIDControlStep+0x280>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	xSpeedPercent += x_D * (xError - lastXError);
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <PIDControlStep+0x284>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f12:	4b76      	ldr	r3, [pc, #472]	; (80020ec <PIDControlStep+0x288>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	lastXError = xError;
 8001f28:	4a6f      	ldr	r2, [pc, #444]	; (80020e8 <PIDControlStep+0x284>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	6013      	str	r3, [r2, #0]
	if (xSpeedPercent > 100){xSpeedPercent = 100;}
 8001f2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f32:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80020d8 <PIDControlStep+0x274>
 8001f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	dd01      	ble.n	8001f44 <PIDControlStep+0xe0>
 8001f40:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <PIDControlStep+0x28c>)
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
	if (xSpeedPercent < -100){xSpeedPercent = -100;}
 8001f44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f48:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80020f4 <PIDControlStep+0x290>
 8001f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	d501      	bpl.n	8001f5a <PIDControlStep+0xf6>
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <PIDControlStep+0x294>)
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculate new y speed as % of top speed
	float ySpeedPercent = 0;
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
	ySpeedPercent += y_P * yError;
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <PIDControlStep+0x298>)
 8001f62:	ed93 7a00 	vldr	s14, [r3]
 8001f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a08 	vstr	s15, [r7, #32]
	ySpeedPercent += y_I * integrationStep_Y(yError);
 8001f7a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001f7e:	f7ff ff15 	bl	8001dac <integrationStep_Y>
 8001f82:	eeb0 7a40 	vmov.f32	s14, s0
 8001f86:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <PIDControlStep+0x29c>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f90:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	edc7 7a08 	vstr	s15, [r7, #32]
	ySpeedPercent += y_D * (yError - lastYError);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <PIDControlStep+0x2a0>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001faa:	4b57      	ldr	r3, [pc, #348]	; (8002108 <PIDControlStep+0x2a4>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	edc7 7a08 	vstr	s15, [r7, #32]
	lastYError = yError;
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <PIDControlStep+0x2a0>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6013      	str	r3, [r2, #0]
	if (ySpeedPercent > 100){ySpeedPercent = 100;}
 8001fc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fca:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80020d8 <PIDControlStep+0x274>
 8001fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	dd01      	ble.n	8001fdc <PIDControlStep+0x178>
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <PIDControlStep+0x28c>)
 8001fda:	623b      	str	r3, [r7, #32]
	if (ySpeedPercent < -100){ySpeedPercent = -100;}
 8001fdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fe0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80020f4 <PIDControlStep+0x290>
 8001fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	d501      	bpl.n	8001ff2 <PIDControlStep+0x18e>
 8001fee:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <PIDControlStep+0x294>)
 8001ff0:	623b      	str	r3, [r7, #32]

	// Convert the % speeds to absolute units.
	*newSpeedX = (xSpeedPercent/100.0) * xTopSpeed;
 8001ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ff4:	f7fe fab8 	bl	8000568 <__aeabi_f2d>
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b43      	ldr	r3, [pc, #268]	; (800210c <PIDControlStep+0x2a8>)
 8001ffe:	f7fe fc35 	bl	800086c <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <PIDControlStep+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa98 	bl	8000544 <__aeabi_i2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	f7fe fafc 	bl	8000618 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd08 	bl	8000a3c <__aeabi_d2iz>
 800202c:	4602      	mov	r2, r0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
	*newSpeedY = (ySpeedPercent/100.0) * yTopSpeed;
 8002032:	6a38      	ldr	r0, [r7, #32]
 8002034:	f7fe fa98 	bl	8000568 <__aeabi_f2d>
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <PIDControlStep+0x2a8>)
 800203e:	f7fe fc15 	bl	800086c <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4614      	mov	r4, r2
 8002048:	461d      	mov	r5, r3
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <PIDControlStep+0x2b0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fa78 	bl	8000544 <__aeabi_i2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe fadc 	bl	8000618 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fce8 	bl	8000a3c <__aeabi_d2iz>
 800206c:	4602      	mov	r2, r0
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	601a      	str	r2, [r3, #0]

	if (abs(*newSpeedX) > xTopSpeed){*newSpeedX = sign(*newSpeedX)*xTopSpeed;}
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800207a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <PIDControlStep+0x2ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	dd0b      	ble.n	800209e <PIDControlStep+0x23a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fdf6 	bl	8001c7c <sign>
 8002090:	4602      	mov	r2, r0
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <PIDControlStep+0x2ac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fb03 f202 	mul.w	r2, r3, r2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
	if (abs(*newSpeedY) > yTopSpeed){*newSpeedY = sign(*newSpeedY)*yTopSpeed;}
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <PIDControlStep+0x2b0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dd0b      	ble.n	80020ca <PIDControlStep+0x266>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fde0 	bl	8001c7c <sign>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <PIDControlStep+0x2b0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdb0      	pop	{r4, r5, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	464cb000 	.word	0x464cb000
 80020d8:	42c80000 	.word	0x42c80000
 80020dc:	466f1000 	.word	0x466f1000
 80020e0:	20000010 	.word	0x20000010
 80020e4:	20000350 	.word	0x20000350
 80020e8:	20000354 	.word	0x20000354
 80020ec:	20000014 	.word	0x20000014
 80020f0:	42c80000 	.word	0x42c80000
 80020f4:	c2c80000 	.word	0xc2c80000
 80020f8:	c2c80000 	.word	0xc2c80000
 80020fc:	20000018 	.word	0x20000018
 8002100:	2000001c 	.word	0x2000001c
 8002104:	20000358 	.word	0x20000358
 8002108:	20000020 	.word	0x20000020
 800210c:	40590000 	.word	0x40590000
 8002110:	20000024 	.word	0x20000024
 8002114:	20000028 	.word	0x20000028

08002118 <applySoftwareLock>:

#include "myInc/MotorWriters.h"
#include <stdlib.h>

uint8_t softwareMotorLock;
void applySoftwareLock(){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	disableYMotor();
 800211c:	f000 f846 	bl	80021ac <disableYMotor>
	disableXMotor();
 8002120:	f000 f826 	bl	8002170 <disableXMotor>
	softwareMotorLock = 0x0F;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <applySoftwareLock+0x18>)
 8002126:	220f      	movs	r2, #15
 8002128:	701a      	strb	r2, [r3, #0]
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000035c 	.word	0x2000035c

08002134 <disableSoftwareLock>:
void disableSoftwareLock(){
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	softwareMotorLock = 0x00;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <disableSoftwareLock+0x14>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	2000035c 	.word	0x2000035c

0800214c <enableXMotor>:



void enableXMotor(){
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	if (!softwareMotorLock){
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <enableXMotor+0x1c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <enableXMotor+0x18>
		HAL_GPIO_WritePin(GPIOD, Xen_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <enableXMotor+0x20>)
 8002160:	f000 fef2 	bl	8002f48 <HAL_GPIO_WritePin>
	}
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000035c 	.word	0x2000035c
 800216c:	40020c00 	.word	0x40020c00

08002170 <disableXMotor>:
void disableXMotor(){
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, Xen_Pin, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217a:	4802      	ldr	r0, [pc, #8]	; (8002184 <disableXMotor+0x14>)
 800217c:	f000 fee4 	bl	8002f48 <HAL_GPIO_WritePin>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020c00 	.word	0x40020c00

08002188 <enableYMotor>:



void enableYMotor(){
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	if (!softwareMotorLock){
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <enableYMotor+0x1c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <enableYMotor+0x16>
		HAL_GPIO_WritePin(GPIOA, Yen_Pin, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	2108      	movs	r1, #8
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <enableYMotor+0x20>)
 800219a:	f000 fed5 	bl	8002f48 <HAL_GPIO_WritePin>
	}

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000035c 	.word	0x2000035c
 80021a8:	40020000 	.word	0x40020000

080021ac <disableYMotor>:
void disableYMotor(){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Yen_Pin, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2108      	movs	r1, #8
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <disableYMotor+0x14>)
 80021b6:	f000 fec7 	bl	8002f48 <HAL_GPIO_WritePin>
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40020000 	.word	0x40020000

080021c4 <setXSpeed>:
uint16_t XSpeedTwelveBit;
uint8_t boundaryWasOverrun = 0;
uint8_t boundaryOverrunIllegalDirection;

// Set X Speed from -2^12 to +2^12
uint8_t setXSpeed(int32_t speed, Coordinate currentRobotPosition){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	currentXSpeed = speed;
 80021ce:	4a27      	ldr	r2, [pc, #156]	; (800226c <setXSpeed+0xa8>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6013      	str	r3, [r2, #0]
	currentXDirection = (currentXSpeed >= 0);
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <setXSpeed+0xa8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	43db      	mvns	r3, r3
 80021da:	0fdb      	lsrs	r3, r3, #31
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <setXSpeed+0xac>)
 80021e2:	701a      	strb	r2, [r3, #0]
	if (boundaryWasOverrun && (boundaryOverrunIllegalDirection != currentXDirection)){
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <setXSpeed+0xb0>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <setXSpeed+0x3e>
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <setXSpeed+0xb4>)
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <setXSpeed+0xac>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d004      	beq.n	8002202 <setXSpeed+0x3e>
		enableXMotor();
 80021f8:	f7ff ffa8 	bl	800214c <enableXMotor>
		boundaryWasOverrun = 0;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <setXSpeed+0xb0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
	}

	// Handle boundary overrun checks
	if (	(!currentXDirection && (currentRobotPosition.xPosition < TABLE_X_BOUNDARY_MIN)) ||
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <setXSpeed+0xac>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <setXSpeed+0x4e>
 800220a:	883b      	ldrh	r3, [r7, #0]
 800220c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002210:	d308      	bcc.n	8002224 <setXSpeed+0x60>
			(currentXDirection && (currentRobotPosition.xPosition > TABLE_X_BOUNDARY_MAX)) ) {
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <setXSpeed+0xac>)
 8002214:	781b      	ldrb	r3, [r3, #0]
	if (	(!currentXDirection && (currentRobotPosition.xPosition < TABLE_X_BOUNDARY_MIN)) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <setXSpeed+0x70>
			(currentXDirection && (currentRobotPosition.xPosition > TABLE_X_BOUNDARY_MAX)) ) {
 800221a:	883b      	ldrh	r3, [r7, #0]
 800221c:	f643 22fc 	movw	r2, #15100	; 0x3afc
 8002220:	4293      	cmp	r3, r2
 8002222:	d907      	bls.n	8002234 <setXSpeed+0x70>
		currentXSpeed = 0;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <setXSpeed+0xa8>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
		// for now, disable motor to get around the offset issue
		disableXMotor();
 800222a:	f7ff ffa1 	bl	8002170 <disableXMotor>
		boundaryWasOverrun = 1;
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <setXSpeed+0xb0>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
	}

	// Get the twelve bit number to give to the DAC
	XSpeedTwelveBit = (uint16_t)abs(currentXSpeed);
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <setXSpeed+0xa8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	bfb8      	it	lt
 800223c:	425b      	neglt	r3, r3
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <setXSpeed+0xb8>)
 8002242:	801a      	strh	r2, [r3, #0]
		XSpeedTwelveBit = AXIS_MAX_POS_SPEED;
	}
	*/

	// Assume DAC has started
	HAL_GPIO_WritePin(GPIOA, Xdir_Pin, currentXDirection);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <setXSpeed+0xac>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <setXSpeed+0xbc>)
 800224e:	f000 fe7b 	bl	8002f48 <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(p_hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, XSpeedTwelveBit);
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <setXSpeed+0xc0>)
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <setXSpeed+0xb8>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	f000 fc14 	bl	8002a8a <HAL_DAC_SetValue>
	return 1;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000360 	.word	0x20000360
 8002270:	20000364 	.word	0x20000364
 8002274:	20000368 	.word	0x20000368
 8002278:	20000369 	.word	0x20000369
 800227c:	20000366 	.word	0x20000366
 8002280:	40020000 	.word	0x40020000
 8002284:	20000380 	.word	0x20000380

08002288 <setYSpeed>:

// Set Y Speed from -2^12 to +2^12
int32_t currentYSpeed;
uint8_t currentYDirection;
uint16_t YSpeedTwelveBit;
uint8_t setYSpeed(int32_t speed, Coordinate currentRobotPosition){
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	currentYSpeed = speed;
 8002292:	4a25      	ldr	r2, [pc, #148]	; (8002328 <setYSpeed+0xa0>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6013      	str	r3, [r2, #0]
	currentYDirection = currentYSpeed >= 0;
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <setYSpeed+0xa0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	43db      	mvns	r3, r3
 800229e:	0fdb      	lsrs	r3, r3, #31
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <setYSpeed+0xa4>)
 80022a6:	701a      	strb	r2, [r3, #0]

	// Handle boundary overrun checks
	if (	(!currentYDirection && (currentRobotPosition.yPosition < TABLE_Y_BOUNDARY_MIN)) ||
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <setYSpeed+0xa4>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <setYSpeed+0x30>
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022b6:	d308      	bcc.n	80022ca <setYSpeed+0x42>
			(currentYDirection && (currentRobotPosition.yPosition > TABLE_Y_BOUNDARY_MAX)) ) {
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <setYSpeed+0xa4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
	if (	(!currentYDirection && (currentRobotPosition.yPosition < TABLE_Y_BOUNDARY_MIN)) ||
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <setYSpeed+0x48>
			(currentYDirection && (currentRobotPosition.yPosition > TABLE_Y_BOUNDARY_MAX)) ) {
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	f244 3294 	movw	r2, #17300	; 0x4394
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d902      	bls.n	80022d0 <setYSpeed+0x48>
		currentYSpeed = 0;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <setYSpeed+0xa0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
	}

	// Get the twelve bit number to give to the DAC
	YSpeedTwelveBit = (uint16_t)abs(currentYSpeed);
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <setYSpeed+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bfb8      	it	lt
 80022d8:	425b      	neglt	r3, r3
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <setYSpeed+0xa8>)
 80022de:	801a      	strh	r2, [r3, #0]
	if (currentYDirection){
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <setYSpeed+0xa4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <setYSpeed+0x74>
		YSpeedTwelveBit = 2048 + (YSpeedTwelveBit>>1);
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <setYSpeed+0xa8>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <setYSpeed+0xa8>)
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e008      	b.n	800230e <setYSpeed+0x86>
	}
	else{
		YSpeedTwelveBit = 2048 - (YSpeedTwelveBit>>1);
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <setYSpeed+0xa8>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	b29b      	uxth	r3, r3
 8002304:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002308:	b29a      	uxth	r2, r3
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <setYSpeed+0xa8>)
 800230c:	801a      	strh	r2, [r3, #0]
		YSpeedTwelveBit = AXIS_MAX_POS_SPEED;
	}
	*/

	// Assume DAC has started
	HAL_DAC_SetValue(p_hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, YSpeedTwelveBit);
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <setYSpeed+0xac>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <setYSpeed+0xa8>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	2110      	movs	r1, #16
 800231a:	f000 fbb6 	bl	8002a8a <HAL_DAC_SetValue>
	return 1;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000036c 	.word	0x2000036c
 800232c:	20000370 	.word	0x20000370
 8002330:	20000372 	.word	0x20000372
 8002334:	20000380 	.word	0x20000380

08002338 <updateRobotPosition>:
TIM_HandleTypeDef* p_htim9;
DAC_HandleTypeDef* p_hdac;
SPI_HandleTypeDef* p_hspi2;

// Helper Functions
void updateRobotPosition(Coordinate* currentPosition){
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	currentPosition->xPosition = __HAL_TIM_GET_COUNTER(p_htim3);
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <updateRobotPosition+0x30>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	801a      	strh	r2, [r3, #0]
	currentPosition->yPosition = __HAL_TIM_GET_COUNTER(p_htim4);
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <updateRobotPosition+0x34>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	805a      	strh	r2, [r3, #2]
	return;
 800235c:	bf00      	nop
}
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	20000374 	.word	0x20000374
 800236c:	20000378 	.word	0x20000378

08002370 <myInit>:
// Vars needed in initialisation.
Coordinate lastRobotPosition, currentRobotPosition;
uint32_t lastRobotPositionUpdateTime, currentRobotPositionUpdateTime;
Coordinate targetPosition;

void myInit(DAC_HandleTypeDef* p_hdac_arg, TIM_HandleTypeDef* p_htim3_arg, TIM_HandleTypeDef* p_htim4_arg, TIM_HandleTypeDef* p_htim9_arg, SPI_HandleTypeDef* p_hspi2_arg) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
	// Disable the Motors during initialisation stage
	applySoftwareLock();
 800237e:	f7ff fecb 	bl	8002118 <applySoftwareLock>

	logicEnableCommandSent = 0;
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <myInit+0xe0>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	updatedCoordinateIn = 0;
 8002388:	4b32      	ldr	r3, [pc, #200]	; (8002454 <myInit+0xe4>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]

	// set up feature references
	p_hdac = p_hdac_arg;
 800238e:	4a32      	ldr	r2, [pc, #200]	; (8002458 <myInit+0xe8>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6013      	str	r3, [r2, #0]
	p_htim3 = p_htim3_arg;
 8002394:	4a31      	ldr	r2, [pc, #196]	; (800245c <myInit+0xec>)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6013      	str	r3, [r2, #0]
	p_htim4 = p_htim4_arg;
 800239a:	4a31      	ldr	r2, [pc, #196]	; (8002460 <myInit+0xf0>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6013      	str	r3, [r2, #0]
	p_htim9 = p_htim9_arg;
 80023a0:	4a30      	ldr	r2, [pc, #192]	; (8002464 <myInit+0xf4>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6013      	str	r3, [r2, #0]
	p_hspi2 = p_hspi2_arg;
 80023a6:	4a30      	ldr	r2, [pc, #192]	; (8002468 <myInit+0xf8>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6013      	str	r3, [r2, #0]

	// FEATURE INIT
	HAL_TIM_Encoder_Start(p_htim3, TIM_CHANNEL_ALL);
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <myInit+0xec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	213c      	movs	r1, #60	; 0x3c
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f830 	bl	8005418 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(p_htim4, TIM_CHANNEL_ALL);
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <myInit+0xf0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	213c      	movs	r1, #60	; 0x3c
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 f82a 	bl	8005418 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(p_htim9);
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <myInit+0xf4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 ff0f 	bl	80051ec <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(p_hdac, DAC_CHANNEL_1); // x motor DAC
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <myInit+0xe8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 faac 	bl	8002932 <HAL_DAC_Start>
	HAL_DAC_Start(p_hdac, DAC_CHANNEL_2); // y motor DAC
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <myInit+0xe8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2110      	movs	r1, #16
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 faa6 	bl	8002932 <HAL_DAC_Start>

	// Global Variable Instantiation
	xRotCount = 0;
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <myInit+0xfc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
	yRotCount = 0;
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <myInit+0x100>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

	//HAL_Delay(1);

	// Wait on signal from logic center to continue
	//logicEnableCommandSent = 1;
	while (!logicEnableCommandSent){
 80023f2:	e002      	b.n	80023fa <myInit+0x8a>
		HAL_Delay(10);
 80023f4:	200a      	movs	r0, #10
 80023f6:	f000 f959 	bl	80026ac <HAL_Delay>
	while (!logicEnableCommandSent){
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <myInit+0xe0>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f8      	beq.n	80023f4 <myInit+0x84>
	}

	// Set encoder positions to start at 2000 ticks. This will prevent the timers overflowing the other direction when the table edge is met
	__HAL_TIM_SET_COUNTER(p_htim3, 2000);
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <myInit+0xec>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(p_htim4, 2000);
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <myInit+0xf0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

	// Use encoder timers to get the last known position.
	updateRobotPosition(&lastRobotPosition);
 800241a:	4816      	ldr	r0, [pc, #88]	; (8002474 <myInit+0x104>)
 800241c:	f7ff ff8c 	bl	8002338 <updateRobotPosition>
	lastRobotPositionUpdateTime = HAL_GetTick();
 8002420:	f000 f938 	bl	8002694 <HAL_GetTick>
 8002424:	4603      	mov	r3, r0
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <myInit+0x108>)
 8002428:	6013      	str	r3, [r2, #0]

	targetPosition.xPosition = lastRobotPosition.xPosition;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <myInit+0x104>)
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <myInit+0x10c>)
 8002430:	801a      	strh	r2, [r3, #0]
	targetPosition.yPosition = lastRobotPosition.yPosition;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <myInit+0x104>)
 8002434:	885a      	ldrh	r2, [r3, #2]
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <myInit+0x10c>)
 8002438:	805a      	strh	r2, [r3, #2]

	disableSoftwareLock();
 800243a:	f7ff fe7b 	bl	8002134 <disableSoftwareLock>
	enableXMotor();
 800243e:	f7ff fe85 	bl	800214c <enableXMotor>
	enableYMotor();
 8002442:	f7ff fea1 	bl	8002188 <enableYMotor>

	//targetPosition.xPosition = 7500;
	//targetPosition.yPosition = 2000;

}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000032c 	.word	0x2000032c
 8002454:	20000334 	.word	0x20000334
 8002458:	20000380 	.word	0x20000380
 800245c:	20000374 	.word	0x20000374
 8002460:	20000378 	.word	0x20000378
 8002464:	2000037c 	.word	0x2000037c
 8002468:	20000384 	.word	0x20000384
 800246c:	20000324 	.word	0x20000324
 8002470:	20000328 	.word	0x20000328
 8002474:	20000388 	.word	0x20000388
 8002478:	20000390 	.word	0x20000390
 800247c:	20000398 	.word	0x20000398

08002480 <myLoopInternals>:
int32_t xDistanceToTargetPosition, yDistanceToTargetPosition;
float actualXSpeed, actualYSpeed;
int32_t newXSpeed, newYSpeed;
uint32_t estopHighOccurances = 0;

void myLoopInternals(){
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	// Detect if the E-Stop was pressed. Occurrences counted to filter for noisy connections.
	if (HAL_GPIO_ReadPin(GPIOE, ESTOP_Pin)){
 8002484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002488:	4842      	ldr	r0, [pc, #264]	; (8002594 <myLoopInternals+0x114>)
 800248a:	f000 fd45 	bl	8002f18 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <myLoopInternals+0x2c>
		estopHighOccurances ++;
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <myLoopInternals+0x118>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <myLoopInternals+0x118>)
 800249c:	6013      	str	r3, [r2, #0]
		if (estopHighOccurances > 5){
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <myLoopInternals+0x118>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d905      	bls.n	80024b2 <myLoopInternals+0x32>
			applySoftwareLock();
 80024a6:	f7ff fe37 	bl	8002118 <applySoftwareLock>
 80024aa:	e002      	b.n	80024b2 <myLoopInternals+0x32>
		}
	}
	else{
		estopHighOccurances = 0;
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <myLoopInternals+0x118>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
	}

	// Get the new robot position, record time of update.
	updateRobotPosition(&currentRobotPosition);
 80024b2:	483a      	ldr	r0, [pc, #232]	; (800259c <myLoopInternals+0x11c>)
 80024b4:	f7ff ff40 	bl	8002338 <updateRobotPosition>
	currentRobotPositionUpdateTime = HAL_GetTick();
 80024b8:	f000 f8ec 	bl	8002694 <HAL_GetTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <myLoopInternals+0x120>)
 80024c0:	6013      	str	r3, [r2, #0]

	// Calculate the robot's speed in ticks/ms.
	travelTime = currentRobotPositionUpdateTime - lastRobotPositionUpdateTime;
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <myLoopInternals+0x120>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <myLoopInternals+0x124>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	4a36      	ldr	r2, [pc, #216]	; (80025a8 <myLoopInternals+0x128>)
 80024ce:	6013      	str	r3, [r2, #0]
	if (travelTime == 0){
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <myLoopInternals+0x128>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05b      	beq.n	8002590 <myLoopInternals+0x110>
		return;
	}
	xTravel = ((int32_t)currentRobotPosition.xPosition) - ((int32_t)lastRobotPosition.xPosition);
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <myLoopInternals+0x11c>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b33      	ldr	r3, [pc, #204]	; (80025ac <myLoopInternals+0x12c>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <myLoopInternals+0x130>)
 80024e6:	6013      	str	r3, [r2, #0]
	yTravel = ((int32_t)currentRobotPosition.yPosition) - ((int32_t)lastRobotPosition.yPosition);
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <myLoopInternals+0x11c>)
 80024ea:	885b      	ldrh	r3, [r3, #2]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <myLoopInternals+0x12c>)
 80024f0:	885b      	ldrh	r3, [r3, #2]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <myLoopInternals+0x134>)
 80024f6:	6013      	str	r3, [r2, #0]
	actualXSpeed = xTravel / ((float) travelTime);
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <myLoopInternals+0x130>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <myLoopInternals+0x128>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <myLoopInternals+0x138>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
	actualYSpeed = yTravel / ((float) travelTime);
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <myLoopInternals+0x134>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <myLoopInternals+0x128>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <myLoopInternals+0x13c>)
 8002538:	edc3 7a00 	vstr	s15, [r3]

	PIDControlStep(targetPosition, currentRobotPosition, &newXSpeed, &newYSpeed);
 800253c:	4917      	ldr	r1, [pc, #92]	; (800259c <myLoopInternals+0x11c>)
 800253e:	4820      	ldr	r0, [pc, #128]	; (80025c0 <myLoopInternals+0x140>)
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <myLoopInternals+0x144>)
 8002542:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <myLoopInternals+0x148>)
 8002544:	6809      	ldr	r1, [r1, #0]
 8002546:	6800      	ldr	r0, [r0, #0]
 8002548:	f7ff fc8c 	bl	8001e64 <PIDControlStep>

	// Update the speed. Current position needed to protect against over-running the stops.
	setXSpeed(newXSpeed, currentRobotPosition);
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <myLoopInternals+0x148>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <myLoopInternals+0x11c>)
 8002552:	6811      	ldr	r1, [r2, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fe35 	bl	80021c4 <setXSpeed>
	setYSpeed(newYSpeed, currentRobotPosition);
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <myLoopInternals+0x144>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <myLoopInternals+0x11c>)
 8002560:	6811      	ldr	r1, [r2, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fe90 	bl	8002288 <setYSpeed>




	// Check for any updates to the instruction coordinates
	if (updatedCoordinateIn){
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <myLoopInternals+0x14c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <myLoopInternals+0xfe>
		targetPosition = targetCoordinateIn;
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <myLoopInternals+0x140>)
 8002572:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <myLoopInternals+0x150>)
 8002574:	6810      	ldr	r0, [r2, #0]
 8002576:	6018      	str	r0, [r3, #0]
		updatedCoordinateIn = 0;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <myLoopInternals+0x14c>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
	}

	// Retain information for the next loop iteration.
	lastRobotPosition = currentRobotPosition;
 800257e:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <myLoopInternals+0x12c>)
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <myLoopInternals+0x11c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6013      	str	r3, [r2, #0]
	lastRobotPositionUpdateTime = currentRobotPositionUpdateTime;
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <myLoopInternals+0x120>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <myLoopInternals+0x124>)
 800258c:	6013      	str	r3, [r2, #0]

	return;
 800258e:	e000      	b.n	8002592 <myLoopInternals+0x112>
		return;
 8002590:	bf00      	nop
}
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	200003b8 	.word	0x200003b8
 800259c:	2000038c 	.word	0x2000038c
 80025a0:	20000394 	.word	0x20000394
 80025a4:	20000390 	.word	0x20000390
 80025a8:	200003a4 	.word	0x200003a4
 80025ac:	20000388 	.word	0x20000388
 80025b0:	2000039c 	.word	0x2000039c
 80025b4:	200003a0 	.word	0x200003a0
 80025b8:	200003a8 	.word	0x200003a8
 80025bc:	200003ac 	.word	0x200003ac
 80025c0:	20000398 	.word	0x20000398
 80025c4:	200003b4 	.word	0x200003b4
 80025c8:	200003b0 	.word	0x200003b0
 80025cc:	20000334 	.word	0x20000334
 80025d0:	20000330 	.word	0x20000330

080025d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800260c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025d8:	480d      	ldr	r0, [pc, #52]	; (8002610 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f0:	4c0b      	ldr	r4, [pc, #44]	; (8002620 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025fe:	f7ff f86d 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002602:	f007 fcc1 	bl	8009f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002606:	f7fe fdbf 	bl	8001188 <main>
  bx  lr    
 800260a:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 800260c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002618:	0800ad64 	.word	0x0800ad64
  ldr r2, =_sbss
 800261c:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002620:	20002130 	.word	0x20002130

08002624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC_IRQHandler>
	...

08002628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <HAL_Init+0x40>)
 8002632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_Init+0x40>)
 800263e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_Init+0x40>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002650:	2003      	movs	r0, #3
 8002652:	f000 f913 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe ff0c 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800265c:	f7fe fee2 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000030 	.word	0x20000030
 8002690:	200003bc 	.word	0x200003bc

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	200003bc 	.word	0x200003bc

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000030 	.word	0x20000030

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4907      	ldr	r1, [pc, #28]	; (8002790 <__NVIC_EnableIRQ+0x38>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	; (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	; (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002854:	f3bf 8f4f 	dsb	sy
}
 8002858:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <__NVIC_SystemReset+0x24>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002862:	4904      	ldr	r1, [pc, #16]	; (8002874 <__NVIC_SystemReset+0x24>)
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_SystemReset+0x28>)
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800286a:	f3bf 8f4f 	dsb	sy
}
 800286e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <__NVIC_SystemReset+0x20>
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	05fa0004 	.word	0x05fa0004

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff35 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff4a 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff9a 	bl	80027e8 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff69 	bl	8002794 <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff3d 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80028ea:	f7ff ffb1 	bl	8002850 <__NVIC_SystemReset>

080028ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e014      	b.n	800292a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	791b      	ldrb	r3, [r3, #4]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe fabd 	bl	8000e90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	795b      	ldrb	r3, [r3, #5]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_DAC_Start+0x16>
 8002944:	2302      	movs	r3, #2
 8002946:	e040      	b.n	80029ca <HAL_DAC_Start+0x98>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2201      	movs	r2, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10f      	bne.n	8002992 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800297c:	2b3c      	cmp	r3, #60	; 0x3c
 800297e:	d11d      	bne.n	80029bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	e014      	b.n	80029bc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	213c      	movs	r1, #60	; 0x3c
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0202 	orr.w	r2, r2, #2
 80029ba:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ec:	d120      	bne.n	8002a30 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fc:	d118      	bne.n	8002a30 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2204      	movs	r2, #4
 8002a02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f852 	bl	8002ad4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3e:	d120      	bne.n	8002a82 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d118      	bne.n	8002a82 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f882 	bl	8002b86 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3308      	adds	r3, #8
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e004      	b.n	8002abe <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3314      	adds	r3, #20
 8002abc:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	795b      	ldrb	r3, [r3, #5]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_DAC_ConfigChannel+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e03c      	b.n	8002b7a <HAL_DAC_ConfigChannel+0x92>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4013      	ands	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	22c0      	movs	r2, #192	; 0xc0
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e00c      	b.n	8002bd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2205      	movs	r2, #5
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e16b      	b.n	8002ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 815a 	bne.w	8002ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d005      	beq.n	8002c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d017      	beq.n	8002cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d123      	bne.n	8002d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80b4 	beq.w	8002ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b60      	ldr	r3, [pc, #384]	; (8002eec <HAL_GPIO_Init+0x30c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <HAL_GPIO_Init+0x30c>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_GPIO_Init+0x30c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d82:	4a5b      	ldr	r2, [pc, #364]	; (8002ef0 <HAL_GPIO_Init+0x310>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_GPIO_Init+0x314>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02b      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	; (8002ef8 <HAL_GPIO_Init+0x318>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d025      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_GPIO_Init+0x31c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <HAL_GPIO_Init+0x21e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <HAL_GPIO_Init+0x320>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_GPIO_Init+0x216>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_GPIO_Init+0x328>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00d      	beq.n	8002df2 <HAL_GPIO_Init+0x212>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	; (8002f0c <HAL_GPIO_Init+0x32c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <HAL_GPIO_Init+0x20e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <HAL_GPIO_Init+0x330>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_GPIO_Init+0x20a>
 8002de6:	2307      	movs	r3, #7
 8002de8:	e00e      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dea:	2308      	movs	r3, #8
 8002dec:	e00c      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00a      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e18:	4935      	ldr	r1, [pc, #212]	; (8002ef0 <HAL_GPIO_Init+0x310>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f ae90 	bls.w	8002bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021c00 	.word	0x40021c00
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe fd48 	bl	8001a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b08f      	sub	sp, #60	; 0x3c
 8002fb0:	af0a      	add	r7, sp, #40	; 0x28
 8002fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e10f      	b.n	80031de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f006 fc77 	bl	80098cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 ff96 	bl	8005f2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	687e      	ldr	r6, [r7, #4]
 800300a:	466d      	mov	r5, sp
 800300c:	f106 0410 	add.w	r4, r6, #16
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800301c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003020:	1d33      	adds	r3, r6, #4
 8003022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003024:	6838      	ldr	r0, [r7, #0]
 8003026:	f002 fe6d 	bl	8005d04 <USB_CoreInit>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0d0      	b.n	80031de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f002 ff84 	bl	8005f50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e04a      	b.n	80030e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	333d      	adds	r3, #61	; 0x3d
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	333c      	adds	r3, #60	; 0x3c
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	b298      	uxth	r0, r3
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3344      	adds	r3, #68	; 0x44
 800308a:	4602      	mov	r2, r0
 800308c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3340      	adds	r3, #64	; 0x40
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3348      	adds	r3, #72	; 0x48
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	334c      	adds	r3, #76	; 0x4c
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3354      	adds	r3, #84	; 0x54
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	3301      	adds	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3af      	bcc.n	800304e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e044      	b.n	800317e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	3301      	adds	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d3b5      	bcc.n	80030f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	687e      	ldr	r6, [r7, #4]
 8003190:	466d      	mov	r5, sp
 8003192:	f106 0410 	add.w	r4, r6, #16
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a6:	1d33      	adds	r3, r6, #4
 80031a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f002 ff1c 	bl	8005fe8 <USB_DevInit>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00d      	b.n	80031de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 f86b 	bl	80072b2 <USB_DevDisconnect>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_PCD_Start+0x1c>
 80031fe:	2302      	movs	r3, #2
 8003200:	e020      	b.n	8003244 <HAL_PCD_Start+0x5e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b01      	cmp	r3, #1
 8003210:	d109      	bne.n	8003226 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003216:	2b01      	cmp	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fe6e 	bl	8005f0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 f81b 	bl	8007270 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b08d      	sub	sp, #52	; 0x34
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 f8d9 	bl	800741a <USB_GetMode>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 848a 	bne.w	8003b84 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f004 f83d 	bl	80072f4 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8480 	beq.w	8003b82 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 f82a 	bl	80072f4 <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f002 0202 	and.w	r2, r2, #2
 80032b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 f818 	bl	80072f4 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d161      	bne.n	8003392 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0210 	bic.w	r2, r2, #16
 80032dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f003 020f 	and.w	r2, r3, #15
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	3304      	adds	r3, #4
 80032fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	0c5b      	lsrs	r3, r3, #17
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	2b02      	cmp	r3, #2
 8003308:	d124      	bne.n	8003354 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d035      	beq.n	8003382 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003324:	b29b      	uxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	6a38      	ldr	r0, [r7, #32]
 800332a:	f003 fe4f 	bl	8006fcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333a:	441a      	add	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800334c:	441a      	add	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	621a      	str	r2, [r3, #32]
 8003352:	e016      	b.n	8003382 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	0c5b      	lsrs	r3, r3, #17
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	2b06      	cmp	r3, #6
 800335e:	d110      	bne.n	8003382 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003366:	2208      	movs	r2, #8
 8003368:	4619      	mov	r1, r3
 800336a:	6a38      	ldr	r0, [r7, #32]
 800336c:	f003 fe2e 	bl	8006fcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337c:	441a      	add	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0210 	orr.w	r2, r2, #16
 8003390:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 ffac 	bl	80072f4 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033a6:	f040 80a7 	bne.w	80034f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 ffb1 	bl	800731a <USB_ReadDevAllOutEpInterrupt>
 80033b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033ba:	e099      	b.n	80034f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 808e 	beq.w	80034e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 ffd5 	bl	8007382 <USB_ReadDevOutEPInterrupt>
 80033d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f0:	461a      	mov	r2, r3
 80033f2:	2301      	movs	r3, #1
 80033f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fec3 	bl	8004184 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003414:	461a      	mov	r2, r3
 8003416:	2308      	movs	r3, #8
 8003418:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800341a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 ff99 	bl	8004354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	2310      	movs	r3, #16
 800343c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d030      	beq.n	80034aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d109      	bne.n	8003468 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003466:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	78db      	ldrb	r3, [r3, #3]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 fb2e 	bl	8009af4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	2302      	movs	r3, #2
 80034a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	2320      	movs	r3, #32
 80034c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	3301      	adds	r3, #1
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f47f af62 	bne.w	80033bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fef9 	bl	80072f4 <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350c:	f040 80db 	bne.w	80036c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f003 ff1a 	bl	800734e <USB_ReadDevAllInEpInterrupt>
 800351a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003520:	e0cd      	b.n	80036be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80c2 	beq.w	80036b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f003 ff40 	bl	80073be <USB_ReadDevInEPInterrupt>
 800353e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d057      	beq.n	80035fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	2201      	movs	r2, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	43db      	mvns	r3, r3
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356a:	4013      	ands	r3, r2
 800356c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357a:	461a      	mov	r2, r3
 800357c:	2301      	movs	r3, #1
 800357e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d132      	bne.n	80035ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	334c      	adds	r3, #76	; 0x4c
 8003598:	6819      	ldr	r1, [r3, #0]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4403      	add	r3, r0
 80035a8:	3348      	adds	r3, #72	; 0x48
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4419      	add	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4403      	add	r3, r0
 80035bc:	334c      	adds	r3, #76	; 0x4c
 80035be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d113      	bne.n	80035ee <HAL_PCD_IRQHandler+0x3a2>
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	3354      	adds	r3, #84	; 0x54
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d108      	bne.n	80035ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e6:	461a      	mov	r2, r3
 80035e8:	2101      	movs	r1, #1
 80035ea:	f003 ff47 	bl	800747c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f006 f9f8 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	461a      	mov	r2, r3
 8003612:	2308      	movs	r3, #8
 8003614:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	461a      	mov	r2, r3
 800362e:	2310      	movs	r3, #16
 8003630:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003648:	461a      	mov	r2, r3
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d023      	beq.n	80036a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365a:	6a38      	ldr	r0, [r7, #32]
 800365c:	f002 fe28 	bl	80062b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3338      	adds	r3, #56	; 0x38
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	3304      	adds	r3, #4
 8003672:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	78db      	ldrb	r3, [r3, #3]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f006 fa45 	bl	8009b18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369a:	461a      	mov	r2, r3
 800369c:	2302      	movs	r3, #2
 800369e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fcdb 	bl	8004068 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	3301      	adds	r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f47f af2e 	bne.w	8003522 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fe12 	bl	80072f4 <USB_ReadInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036da:	d122      	bne.n	8003722 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003702:	2100      	movs	r1, #0
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fec3 	bl	8004490 <HAL_PCDEx_LPM_Callback>
 800370a:	e002      	b.n	8003712 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f006 f9e3 	bl	8009ad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f003 fde4 	bl	80072f4 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003736:	d112      	bne.n	800375e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f006 f99f 	bl	8009a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800375c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fdc6 	bl	80072f4 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	f040 80b7 	bne.w	80038e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2110      	movs	r1, #16
 8003790:	4618      	mov	r0, r3
 8003792:	f002 fd8d 	bl	80062b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379a:	e046      	b.n	800382a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a8:	461a      	mov	r2, r3
 80037aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c0:	0151      	lsls	r1, r2, #5
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	440a      	add	r2, r1
 80037c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f4:	0151      	lsls	r1, r2, #5
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	440a      	add	r2, r1
 80037fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003802:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	440a      	add	r2, r1
 800381a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003822:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	3301      	adds	r3, #1
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003830:	429a      	cmp	r2, r3
 8003832:	d3b3      	bcc.n	800379c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003842:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003846:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	2b00      	cmp	r3, #0
 800384e:	d016      	beq.n	800387e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003860:	f043 030b 	orr.w	r3, r3, #11
 8003864:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003876:	f043 030b 	orr.w	r3, r3, #11
 800387a:	6453      	str	r3, [r2, #68]	; 0x44
 800387c:	e015      	b.n	80038aa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003890:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003894:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a4:	f043 030b 	orr.w	r3, r3, #11
 80038a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f003 fdd4 	bl	800747c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 fd03 	bl	80072f4 <USB_ReadInterrupts>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f8:	d124      	bne.n	8003944 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fd99 	bl	8007436 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f002 fd4e 	bl	80063aa <USB_GetDevSpeed>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681c      	ldr	r4, [r3, #0]
 800391a:	f001 fa29 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 800391e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	4620      	mov	r0, r4
 800392a:	f002 fa4d 	bl	8005dc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f006 f883 	bl	8009a3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003942:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f003 fcd3 	bl	80072f4 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d10a      	bne.n	800396e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f006 f860 	bl	8009a1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f002 0208 	and.w	r2, r2, #8
 800396c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fcbe 	bl	80072f4 <USB_ReadInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d122      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398e:	2301      	movs	r3, #1
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e014      	b.n	80039be <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb27 	bl	8004006 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	3301      	adds	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3e5      	bcc.n	8003994 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fc91 	bl	80072f4 <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039dc:	d13b      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039de:	2301      	movs	r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	e02b      	b.n	8003a3c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3340      	adds	r3, #64	; 0x40
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d115      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da12      	bge.n	8003a36 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	333f      	adds	r3, #63	; 0x3f
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fae8 	bl	8004006 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	3301      	adds	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3ce      	bcc.n	80039e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 fc4a 	bl	80072f4 <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a6a:	d155      	bne.n	8003b18 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e045      	b.n	8003afe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d12e      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	da2b      	bge.n	8003af8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003aac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d121      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af4:	6053      	str	r3, [r2, #4]
            break;
 8003af6:	e007      	b.n	8003b08 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	3301      	adds	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3b4      	bcc.n	8003a72 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f003 fbe9 	bl	80072f4 <USB_ReadInterrupts>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d10a      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f006 f804 	bl	8009b3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fbd3 	bl	80072f4 <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d115      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f005 fff4 	bl	8009b58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	e000      	b.n	8003b84 <HAL_PCD_IRQHandler+0x938>
      return;
 8003b82:	bf00      	nop
    }
  }
}
 8003b84:	3734      	adds	r7, #52	; 0x34
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_PCD_SetAddress+0x1a>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e013      	b.n	8003bcc <HAL_PCD_SetAddress+0x42>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fb31 	bl	8007224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	70fb      	strb	r3, [r7, #3]
 8003be6:	460b      	mov	r3, r1
 8003be8:	803b      	strh	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da0f      	bge.n	8003c1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 020f 	and.w	r2, r3, #15
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	3338      	adds	r3, #56	; 0x38
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	705a      	strb	r2, [r3, #1]
 8003c18:	e00f      	b.n	8003c3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c46:	883a      	ldrh	r2, [r7, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	78ba      	ldrb	r2, [r7, #2]
 8003c50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c64:	78bb      	ldrb	r3, [r7, #2]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d102      	bne.n	8003c70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_PCD_EP_Open+0xaa>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e00e      	b.n	8003c9c <HAL_PCD_EP_Open+0xc8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 fbb1 	bl	80063f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da0f      	bge.n	8003cd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	3338      	adds	r3, #56	; 0x38
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4413      	add	r3, r2
 8003ccc:	3304      	adds	r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	705a      	strb	r2, [r3, #1]
 8003cd6:	e00f      	b.n	8003cf8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 020f 	and.w	r2, r3, #15
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_PCD_EP_Close+0x6e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e00e      	b.n	8003d30 <HAL_PCD_EP_Close+0x8c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 fbef 	bl	8006504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	460b      	mov	r3, r1
 8003d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3304      	adds	r3, #4
 8003d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d102      	bne.n	8003d94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	f002 fece 	bl	8006b4c <USB_EP0StartXfer>
 8003db0:	e008      	b.n	8003dc4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6979      	ldr	r1, [r7, #20]
 8003dc0:	f002 fc7c 	bl	80066bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003df0:	681b      	ldr	r3, [r3, #0]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	3338      	adds	r3, #56	; 0x38
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d102      	bne.n	8003e58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	f002 fe6c 	bl	8006b4c <USB_EP0StartXfer>
 8003e74:	e008      	b.n	8003e88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	f002 fc1a 	bl	80066bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	f003 020f 	and.w	r2, r3, #15
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d901      	bls.n	8003eb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e050      	b.n	8003f52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	da0f      	bge.n	8003ed8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 020f 	and.w	r2, r3, #15
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	3338      	adds	r3, #56	; 0x38
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	3304      	adds	r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	705a      	strb	r2, [r3, #1]
 8003ed6:	e00d      	b.n	8003ef4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_PCD_EP_SetStall+0x82>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e01e      	b.n	8003f52 <HAL_PCD_EP_SetStall+0xc0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 f8aa 	bl	800707c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	b2d9      	uxtb	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f42:	461a      	mov	r2, r3
 8003f44:	f003 fa9a 	bl	800747c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d901      	bls.n	8003f78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e042      	b.n	8003ffe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da0f      	bge.n	8003fa0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	3338      	adds	r3, #56	; 0x38
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	705a      	strb	r2, [r3, #1]
 8003f9e:	e00f      	b.n	8003fc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_PCD_EP_ClrStall+0x86>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e00e      	b.n	8003ffe <HAL_PCD_EP_ClrStall+0xa4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68f9      	ldr	r1, [r7, #12]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f003 f8b2 	bl	8007158 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004016:	2b00      	cmp	r3, #0
 8004018:	da0c      	bge.n	8004034 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	3338      	adds	r3, #56	; 0x38
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	3304      	adds	r3, #4
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e00c      	b.n	800404e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 020f 	and.w	r2, r3, #15
 800403a:	4613      	mov	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	3304      	adds	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4618      	mov	r0, r3
 8004056:	f002 fed1 	bl	8006dfc <USB_EPStopXfer>
 800405a:	4603      	mov	r3, r0
 800405c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800405e:	7afb      	ldrb	r3, [r7, #11]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af02      	add	r7, sp, #8
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	3338      	adds	r3, #56	; 0x38
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	3304      	adds	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1a      	ldr	r2, [r3, #32]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	429a      	cmp	r2, r3
 800409a:	d901      	bls.n	80040a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e06c      	b.n	800417a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d902      	bls.n	80040bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3303      	adds	r3, #3
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c4:	e02b      	b.n	800411e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d902      	bls.n	80040e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3303      	adds	r3, #3
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4603      	mov	r3, r0
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f002 ff25 	bl	8006f50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	441a      	add	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	441a      	add	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	429a      	cmp	r2, r3
 8004132:	d809      	bhi.n	8004148 <PCD_WriteEmptyTxFifo+0xe0>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800413c:	429a      	cmp	r2, r3
 800413e:	d203      	bcs.n	8004148 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1be      	bne.n	80040c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	429a      	cmp	r2, r3
 8004152:	d811      	bhi.n	8004178 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	2201      	movs	r2, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	43db      	mvns	r3, r3
 800416e:	6939      	ldr	r1, [r7, #16]
 8004170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004174:	4013      	ands	r3, r2
 8004176:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	333c      	adds	r3, #60	; 0x3c
 800419c:	3304      	adds	r3, #4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d17b      	bne.n	80042b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	4a61      	ldr	r2, [pc, #388]	; (800434c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	f240 80b9 	bls.w	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80b3 	beq.w	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	461a      	mov	r2, r3
 80041e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ec:	6093      	str	r3, [r2, #8]
 80041ee:	e0a7      	b.n	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	461a      	mov	r2, r3
 8004208:	2320      	movs	r3, #32
 800420a:	6093      	str	r3, [r2, #8]
 800420c:	e098      	b.n	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8093 	bne.w	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4a4b      	ldr	r2, [pc, #300]	; (800434c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d90f      	bls.n	8004242 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	461a      	mov	r2, r3
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	6093      	str	r3, [r2, #8]
 8004240:	e07e      	b.n	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4413      	add	r3, r2
 8004254:	3304      	adds	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	0159      	lsls	r1, r3, #5
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	440b      	add	r3, r1
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426e:	1ad2      	subs	r2, r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d114      	bne.n	80042a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800428c:	461a      	mov	r2, r3
 800428e:	2101      	movs	r1, #1
 8004290:	f003 f8f4 	bl	800747c <USB_EP0_OutStart>
 8004294:	e006      	b.n	80042a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	441a      	add	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f005 fb82 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
 80042b0:	e046      	b.n	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	4a26      	ldr	r2, [pc, #152]	; (8004350 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d124      	bne.n	8004304 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d0:	461a      	mov	r2, r3
 80042d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d6:	6093      	str	r3, [r2, #8]
 80042d8:	e032      	b.n	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f0:	461a      	mov	r2, r3
 80042f2:	2320      	movs	r3, #32
 80042f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f005 fb59 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
 8004302:	e01d      	b.n	8004340 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d114      	bne.n	8004334 <PCD_EP_OutXfrComplete_int+0x1b0>
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800432c:	461a      	mov	r2, r3
 800432e:	2100      	movs	r1, #0
 8004330:	f003 f8a4 	bl	800747c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4619      	mov	r1, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f005 fb3a 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	4f54300a 	.word	0x4f54300a
 8004350:	4f54310a 	.word	0x4f54310a

08004354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	333c      	adds	r3, #60	; 0x3c
 800436c:	3304      	adds	r3, #4
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <PCD_EP_OutSetupPacket_int+0x88>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d90e      	bls.n	80043a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f005 faf1 	bl	8009990 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <PCD_EP_OutSetupPacket_int+0x88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d90c      	bls.n	80043d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d108      	bne.n	80043d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c8:	461a      	mov	r2, r3
 80043ca:	2101      	movs	r1, #1
 80043cc:	f003 f856 	bl	800747c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	4f54300a 	.word	0x4f54300a

080043e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	70fb      	strb	r3, [r7, #3]
 80043ec:	4613      	mov	r3, r2
 80043ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043fe:	883b      	ldrh	r3, [r7, #0]
 8004400:	0419      	lsls	r1, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	430a      	orrs	r2, r1
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
 800440c:	e028      	b.n	8004460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	4413      	add	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800441c:	2300      	movs	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	e00d      	b.n	800443e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	3340      	adds	r3, #64	; 0x40
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	3301      	adds	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	3b01      	subs	r3, #1
 8004444:	429a      	cmp	r2, r3
 8004446:	d3ec      	bcc.n	8004422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004448:	883b      	ldrh	r3, [r7, #0]
 800444a:	0418      	lsls	r0, r3, #16
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	3b01      	subs	r3, #1
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	4302      	orrs	r2, r0
 8004458:	3340      	adds	r3, #64	; 0x40
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e267      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d075      	beq.n	80045b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044c6:	4b88      	ldr	r3, [pc, #544]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00c      	beq.n	80044ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d112      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ea:	d10b      	bne.n	8004504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4b7e      	ldr	r3, [pc, #504]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05b      	beq.n	80045b0 <HAL_RCC_OscConfig+0x108>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d157      	bne.n	80045b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e242      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d106      	bne.n	800451c <HAL_RCC_OscConfig+0x74>
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a75      	ldr	r2, [pc, #468]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e01d      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x98>
 8004526:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a6f      	ldr	r2, [pc, #444]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6c      	ldr	r2, [pc, #432]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0xb0>
 8004540:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a68      	ldr	r2, [pc, #416]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a65      	ldr	r2, [pc, #404]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe f898 	bl	8002694 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe f894 	bl	8002694 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e207      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0xc0>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe f884 	bl	8002694 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe f880 	bl	8002694 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1f3      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	4b51      	ldr	r3, [pc, #324]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0xe8>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d063      	beq.n	8004686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d11c      	bne.n	8004610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b44      	ldr	r3, [pc, #272]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d116      	bne.n	8004610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_RCC_OscConfig+0x152>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d001      	beq.n	80045fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e1c7      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4937      	ldr	r1, [pc, #220]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	e03a      	b.n	8004686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004618:	4b34      	ldr	r3, [pc, #208]	; (80046ec <HAL_RCC_OscConfig+0x244>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe f839 	bl	8002694 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe f835 	bl	8002694 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1a8      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4925      	ldr	r1, [pc, #148]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
 8004658:	e015      	b.n	8004686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCC_OscConfig+0x244>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fe f818 	bl	8002694 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004668:	f7fe f814 	bl	8002694 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e187      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d036      	beq.n	8004700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_RCC_OscConfig+0x248>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fd fff8 	bl	8002694 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a8:	f7fd fff4 	bl	8002694 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e167      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_OscConfig+0x240>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x200>
 80046c6:	e01b      	b.n	8004700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_OscConfig+0x248>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ce:	f7fd ffe1 	bl	8002694 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	e00e      	b.n	80046f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d6:	f7fd ffdd 	bl	8002694 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d907      	bls.n	80046f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e150      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	42470000 	.word	0x42470000
 80046f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ea      	bne.n	80046d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8097 	beq.w	800483c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b81      	ldr	r3, [pc, #516]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	4b7d      	ldr	r3, [pc, #500]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a7c      	ldr	r2, [pc, #496]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
 800472e:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	4b77      	ldr	r3, [pc, #476]	; (800491c <HAL_RCC_OscConfig+0x474>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d118      	bne.n	800477c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474a:	4b74      	ldr	r3, [pc, #464]	; (800491c <HAL_RCC_OscConfig+0x474>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a73      	ldr	r2, [pc, #460]	; (800491c <HAL_RCC_OscConfig+0x474>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004756:	f7fd ff9d 	bl	8002694 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475e:	f7fd ff99 	bl	8002694 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e10c      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	4b6a      	ldr	r3, [pc, #424]	; (800491c <HAL_RCC_OscConfig+0x474>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x2ea>
 8004784:	4b64      	ldr	r3, [pc, #400]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a63      	ldr	r2, [pc, #396]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
 8004790:	e01c      	b.n	80047cc <HAL_RCC_OscConfig+0x324>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b05      	cmp	r3, #5
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x30c>
 800479a:	4b5f      	ldr	r3, [pc, #380]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	4a5e      	ldr	r2, [pc, #376]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	6713      	str	r3, [r2, #112]	; 0x70
 80047a6:	4b5c      	ldr	r3, [pc, #368]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a5b      	ldr	r2, [pc, #364]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0x324>
 80047b4:	4b58      	ldr	r3, [pc, #352]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	; 0x70
 80047c0:	4b55      	ldr	r3, [pc, #340]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	4a54      	ldr	r2, [pc, #336]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 0304 	bic.w	r3, r3, #4
 80047ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fd ff5e 	bl	8002694 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fd ff5a 	bl	8002694 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0cb      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	4b49      	ldr	r3, [pc, #292]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ee      	beq.n	80047dc <HAL_RCC_OscConfig+0x334>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004800:	f7fd ff48 	bl	8002694 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd ff44 	bl	8002694 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0b5      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ee      	bne.n	8004808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4a38      	ldr	r2, [pc, #224]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a1 	beq.w	8004988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004846:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b08      	cmp	r3, #8
 8004850:	d05c      	beq.n	800490c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d141      	bne.n	80048de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <HAL_RCC_OscConfig+0x478>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fd ff18 	bl	8002694 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fd ff14 	bl	8002694 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e087      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	019b      	lsls	r3, r3, #6
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	491b      	ldr	r1, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_RCC_OscConfig+0x478>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fd feed 	bl	8002694 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048be:	f7fd fee9 	bl	8002694 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e05c      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x416>
 80048dc:	e054      	b.n	8004988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_RCC_OscConfig+0x478>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fed6 	bl	8002694 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fed2 	bl	8002694 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e045      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCC_OscConfig+0x470>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x444>
 800490a:	e03d      	b.n	8004988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d107      	bne.n	8004924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e038      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000
 8004920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004924:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x4ec>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d028      	beq.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d121      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d11a      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800495a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800495c:	4293      	cmp	r3, r2
 800495e:	d111      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800

08004998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0cc      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d90c      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0b8      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ec:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a04:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a52      	ldr	r2, [pc, #328]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	494d      	ldr	r1, [pc, #308]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d044      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e067      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4934      	ldr	r1, [pc, #208]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a88:	f7fd fe04 	bl	8002694 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fd fe00 	bl	8002694 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e04f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d20c      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e032      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4916      	ldr	r1, [pc, #88]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b1e:	f000 f821 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	490a      	ldr	r1, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fc fc98 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023c00 	.word	0x40023c00
 8004b54:	40023800 	.word	0x40023800
 8004b58:	0800ac1c 	.word	0x0800ac1c
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	2000002c 	.word	0x2000002c

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b68:	b094      	sub	sp, #80	; 0x50
 8004b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b70:	2300      	movs	r3, #0
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b74:	2300      	movs	r3, #0
 8004b76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7c:	4b79      	ldr	r3, [pc, #484]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 030c 	and.w	r3, r3, #12
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d00d      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	f200 80e1 	bhi.w	8004d50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x34>
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b96:	e0db      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b73      	ldr	r3, [pc, #460]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b9c:	e0db      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9e:	4b73      	ldr	r3, [pc, #460]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ba2:	e0d8      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bae:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d063      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	0159      	lsls	r1, r3, #5
 8004be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be8:	0150      	lsls	r0, r2, #5
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4621      	mov	r1, r4
 8004bf0:	1a51      	subs	r1, r2, r1
 8004bf2:	6139      	str	r1, [r7, #16]
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c08:	4659      	mov	r1, fp
 8004c0a:	018b      	lsls	r3, r1, #6
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c12:	4651      	mov	r1, sl
 8004c14:	018a      	lsls	r2, r1, #6
 8004c16:	4651      	mov	r1, sl
 8004c18:	ebb2 0801 	subs.w	r8, r2, r1
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c36:	4690      	mov	r8, r2
 8004c38:	4699      	mov	r9, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	eb18 0303 	adds.w	r3, r8, r3
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	462b      	mov	r3, r5
 8004c44:	eb49 0303 	adc.w	r3, r9, r3
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c56:	4629      	mov	r1, r5
 8004c58:	024b      	lsls	r3, r1, #9
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c60:	4621      	mov	r1, r4
 8004c62:	024a      	lsls	r2, r1, #9
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c74:	f7fb ff5a 	bl	8000b2c <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c80:	e058      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	2200      	movs	r2, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c92:	623b      	str	r3, [r7, #32]
 8004c94:	2300      	movs	r3, #0
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
 8004c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	f04f 0000 	mov.w	r0, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	0159      	lsls	r1, r3, #5
 8004caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cae:	0150      	lsls	r0, r2, #5
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cba:	4649      	mov	r1, r9
 8004cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	00eb      	lsls	r3, r5, #3
 8004ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cea:	00e2      	lsls	r2, r4, #3
 8004cec:	4614      	mov	r4, r2
 8004cee:	461d      	mov	r5, r3
 8004cf0:	4643      	mov	r3, r8
 8004cf2:	18e3      	adds	r3, r4, r3
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	eb45 0303 	adc.w	r3, r5, r3
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	028b      	lsls	r3, r1, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d14:	4621      	mov	r1, r4
 8004d16:	028a      	lsls	r2, r1, #10
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	61fa      	str	r2, [r7, #28]
 8004d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d28:	f7fb ff00 	bl	8000b2c <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4613      	mov	r3, r2
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3750      	adds	r7, #80	; 0x50
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	007a1200 	.word	0x007a1200

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000000 	.word	0x20000000

08004d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d8c:	f7ff fff0 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a9b      	lsrs	r3, r3, #10
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	0800ac2c 	.word	0x0800ac2c

08004db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_RCC_GetClockConfig+0x5c>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0203 	and.w	r2, r3, #3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <HAL_RCC_GetClockConfig+0x5c>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_RCC_GetClockConfig+0x5c>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_GetClockConfig+0x5c>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	08db      	lsrs	r3, r3, #3
 8004dea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_RCC_GetClockConfig+0x60>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0207 	and.w	r2, r3, #7
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	601a      	str	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40023c00 	.word	0x40023c00

08004e14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07b      	b.n	8004f1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d108      	bne.n	8004e40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e36:	d009      	beq.n	8004e4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	61da      	str	r2, [r3, #28]
 8004e3e:	e005      	b.n	8004e4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fa6c 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	ea42 0103 	orr.w	r1, r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	f003 0104 	and.w	r1, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0210 	and.w	r2, r3, #16
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10e      	bne.n	8004f68 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
    return;
 8004f66:	e0ce      	b.n	8005106 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_SPI_IRQHandler+0x5e>
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
    return;
 8004f84:	e0bf      	b.n	8005106 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <HAL_SPI_IRQHandler+0x7e>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80b0 	beq.w	8005106 <HAL_SPI_IRQHandler+0x1de>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80aa 	beq.w	8005106 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d023      	beq.n	8005004 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d011      	beq.n	8004fec <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	f043 0204 	orr.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e00b      	b.n	8005004 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	693b      	ldr	r3, [r7, #16]
        return;
 8005002:	e080      	b.n	8005106 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d014      	beq.n	8005038 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f043 0208 	orr.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	2b00      	cmp	r3, #0
 8005062:	d04f      	beq.n	8005104 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005072:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <HAL_SPI_IRQHandler+0x168>
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d034      	beq.n	80050fa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0203 	bic.w	r2, r2, #3
 800509e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d011      	beq.n	80050cc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <HAL_SPI_IRQHandler+0x1e4>)
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd fd70 	bl	8002b9a <HAL_DMA_Abort_IT>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d016      	beq.n	8005102 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d8:	4a0c      	ldr	r2, [pc, #48]	; (800510c <HAL_SPI_IRQHandler+0x1e4>)
 80050da:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fd fd5a 	bl	8002b9a <HAL_DMA_Abort_IT>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80050f8:	e003      	b.n	8005102 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f808 	bl	8005110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005100:	e000      	b.n	8005104 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005102:	bf00      	nop
    return;
 8005104:	bf00      	nop
  }
}
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	08005125 	.word	0x08005125

08005110 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff ffe6 	bl	8005110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e041      	b.n	80051e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fc34 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fbca 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d001      	beq.n	8005204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e04e      	b.n	80052a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d01d      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <HAL_TIM_Base_Start_IT+0xd0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d111      	bne.n	8005290 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b06      	cmp	r3, #6
 800527c:	d010      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	e007      	b.n	80052a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e097      	b.n	8005410 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fc fae5 	bl	80018c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005310:	f023 0307 	bic.w	r3, r3, #7
 8005314:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 faff 	bl	8005924 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	4313      	orrs	r3, r2
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800536c:	f023 030c 	bic.w	r3, r3, #12
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	4313      	orrs	r3, r2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	031b      	lsls	r3, r3, #12
 800539c:	4313      	orrs	r3, r2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	4313      	orrs	r3, r2
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005428:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005430:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005438:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005440:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d110      	bne.n	800546a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800544e:	7b7b      	ldrb	r3, [r7, #13]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e069      	b.n	800552c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005468:	e031      	b.n	80054ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d110      	bne.n	8005492 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d102      	bne.n	800547c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005476:	7b3b      	ldrb	r3, [r7, #12]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d001      	beq.n	8005480 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e055      	b.n	800552c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005490:	e01d      	b.n	80054ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d108      	bne.n	80054aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800549e:	7b7b      	ldrb	r3, [r7, #13]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d102      	bne.n	80054aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a4:	7b3b      	ldrb	r3, [r7, #12]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d001      	beq.n	80054ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e03e      	b.n	800552c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_TIM_Encoder_Start+0xc4>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d008      	beq.n	80054ec <HAL_TIM_Encoder_Start+0xd4>
 80054da:	e00f      	b.n	80054fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2201      	movs	r2, #1
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fb57 	bl	8005b98 <TIM_CCxChannelCmd>
      break;
 80054ea:	e016      	b.n	800551a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2201      	movs	r2, #1
 80054f2:	2104      	movs	r1, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fb4f 	bl	8005b98 <TIM_CCxChannelCmd>
      break;
 80054fa:	e00e      	b.n	800551a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fb47 	bl	8005b98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2201      	movs	r2, #1
 8005510:	2104      	movs	r1, #4
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fb40 	bl	8005b98 <TIM_CCxChannelCmd>
      break;
 8005518:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d122      	bne.n	8005590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0202 	mvn.w	r2, #2
 8005560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9b5 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9a7 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9b8 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0204 	mvn.w	r2, #4
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f98b 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f97d 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f98e 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0208 	mvn.w	r2, #8
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2204      	movs	r2, #4
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f961 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f953 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f964 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b10      	cmp	r3, #16
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0210 	mvn.w	r2, #16
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2208      	movs	r2, #8
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f937 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f929 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f93a 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d10e      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d107      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0201 	mvn.w	r2, #1
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb fdfc 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d10e      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fb06 	bl	8005cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8ff 	bl	800590e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b20      	cmp	r3, #32
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0220 	mvn.w	r2, #32
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fad0 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIM_ConfigClockSource+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e0b4      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x186>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005798:	d03e      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0xd4>
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579e:	f200 8087 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_TIM_ConfigClockSource+0x172>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d87f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b70      	cmp	r3, #112	; 0x70
 80057b2:	d01a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0xa6>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d87b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b60      	cmp	r3, #96	; 0x60
 80057ba:	d050      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x11a>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d877      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b50      	cmp	r3, #80	; 0x50
 80057c2:	d03c      	beq.n	800583e <HAL_TIM_ConfigClockSource+0xfa>
 80057c4:	2b50      	cmp	r3, #80	; 0x50
 80057c6:	d873      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d058      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x13a>
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d86f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d064      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d86b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d060      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d867      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d05a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	e062      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6899      	ldr	r1, [r3, #8]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f000 f9ad 	bl	8005b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800580c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]
      break;
 8005816:	e04f      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f000 f996 	bl	8005b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e03c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f000 f90a 	bl	8005a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2150      	movs	r1, #80	; 0x50
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f963 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800585c:	e02c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 f929 	bl	8005ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2160      	movs	r1, #96	; 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f953 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800587c:	e01c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 f8ea 	bl	8005a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f943 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800589c:	e00c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 f93a 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3d      	ldr	r2, [pc, #244]	; (8005a3c <TIM_Base_SetConfig+0x118>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <TIM_Base_SetConfig+0x11c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3b      	ldr	r2, [pc, #236]	; (8005a44 <TIM_Base_SetConfig+0x120>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3a      	ldr	r2, [pc, #232]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d108      	bne.n	8005976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d02b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d027      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <TIM_Base_SetConfig+0x118>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d023      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2b      	ldr	r2, [pc, #172]	; (8005a40 <TIM_Base_SetConfig+0x11c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01f      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <TIM_Base_SetConfig+0x120>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d017      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <TIM_Base_SetConfig+0x128>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <TIM_Base_SetConfig+0x12c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a26      	ldr	r2, [pc, #152]	; (8005a54 <TIM_Base_SetConfig+0x130>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <TIM_Base_SetConfig+0x134>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <TIM_Base_SetConfig+0x138>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <TIM_Base_SetConfig+0x13c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0xf8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0c      	ldr	r2, [pc, #48]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d103      	bne.n	8005a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	615a      	str	r2, [r3, #20]
}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800
 8005a58:	40001800 	.word	0x40001800
 8005a5c:	40001c00 	.word	0x40001c00
 8005a60:	40002000 	.word	0x40002000

08005a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0210 	bic.w	r2, r3, #16
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f043 0307 	orr.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2201      	movs	r2, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e05a      	b.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d01d      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1a      	ldr	r2, [pc, #104]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a17      	ldr	r2, [pc, #92]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10c      	bne.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40001800 	.word	0x40001800

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d04:	b084      	sub	sp, #16
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	f107 001c 	add.w	r0, r7, #28
 8005d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d122      	bne.n	8005d62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fbee 	bl	8007538 <USB_CoreReset>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e01a      	b.n	8005d98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fbe2 	bl	8007538 <USB_CoreReset>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
 8005d8a:	e005      	b.n	8005d98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10b      	bne.n	8005db6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f043 0206 	orr.w	r2, r3, #6
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f043 0220 	orr.w	r2, r3, #32
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc2:	b004      	add	sp, #16
 8005dc4:	4770      	bx	lr
	...

08005dc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d165      	bne.n	8005ea8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4a41      	ldr	r2, [pc, #260]	; (8005ee4 <USB_SetTurnaroundTime+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d906      	bls.n	8005df2 <USB_SetTurnaroundTime+0x2a>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4a40      	ldr	r2, [pc, #256]	; (8005ee8 <USB_SetTurnaroundTime+0x120>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d202      	bcs.n	8005df2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005dec:	230f      	movs	r3, #15
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e062      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <USB_SetTurnaroundTime+0x120>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d306      	bcc.n	8005e08 <USB_SetTurnaroundTime+0x40>
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4a3b      	ldr	r2, [pc, #236]	; (8005eec <USB_SetTurnaroundTime+0x124>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d202      	bcs.n	8005e08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e02:	230e      	movs	r3, #14
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e057      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a38      	ldr	r2, [pc, #224]	; (8005eec <USB_SetTurnaroundTime+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d306      	bcc.n	8005e1e <USB_SetTurnaroundTime+0x56>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a37      	ldr	r2, [pc, #220]	; (8005ef0 <USB_SetTurnaroundTime+0x128>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d202      	bcs.n	8005e1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e18:	230d      	movs	r3, #13
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e04c      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4a33      	ldr	r2, [pc, #204]	; (8005ef0 <USB_SetTurnaroundTime+0x128>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d306      	bcc.n	8005e34 <USB_SetTurnaroundTime+0x6c>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4a32      	ldr	r2, [pc, #200]	; (8005ef4 <USB_SetTurnaroundTime+0x12c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d802      	bhi.n	8005e34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e2e:	230c      	movs	r3, #12
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e041      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <USB_SetTurnaroundTime+0x12c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d906      	bls.n	8005e4a <USB_SetTurnaroundTime+0x82>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a2e      	ldr	r2, [pc, #184]	; (8005ef8 <USB_SetTurnaroundTime+0x130>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d802      	bhi.n	8005e4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e44:	230b      	movs	r3, #11
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e036      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <USB_SetTurnaroundTime+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d906      	bls.n	8005e60 <USB_SetTurnaroundTime+0x98>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4a29      	ldr	r2, [pc, #164]	; (8005efc <USB_SetTurnaroundTime+0x134>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d802      	bhi.n	8005e60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e02b      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4a26      	ldr	r2, [pc, #152]	; (8005efc <USB_SetTurnaroundTime+0x134>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d906      	bls.n	8005e76 <USB_SetTurnaroundTime+0xae>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <USB_SetTurnaroundTime+0x138>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d202      	bcs.n	8005e76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e70:	2309      	movs	r3, #9
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	e020      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <USB_SetTurnaroundTime+0x138>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d306      	bcc.n	8005e8c <USB_SetTurnaroundTime+0xc4>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <USB_SetTurnaroundTime+0x13c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d802      	bhi.n	8005e8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e86:	2308      	movs	r3, #8
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e015      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <USB_SetTurnaroundTime+0x13c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d906      	bls.n	8005ea2 <USB_SetTurnaroundTime+0xda>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4a1c      	ldr	r2, [pc, #112]	; (8005f08 <USB_SetTurnaroundTime+0x140>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d202      	bcs.n	8005ea2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e9c:	2307      	movs	r3, #7
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e00a      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ea2:	2306      	movs	r3, #6
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e007      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005eae:	2309      	movs	r3, #9
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e001      	b.n	8005eb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005eb4:	2309      	movs	r3, #9
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	00d8acbf 	.word	0x00d8acbf
 8005ee8:	00e4e1c0 	.word	0x00e4e1c0
 8005eec:	00f42400 	.word	0x00f42400
 8005ef0:	01067380 	.word	0x01067380
 8005ef4:	011a499f 	.word	0x011a499f
 8005ef8:	01312cff 	.word	0x01312cff
 8005efc:	014ca43f 	.word	0x014ca43f
 8005f00:	016e3600 	.word	0x016e3600
 8005f04:	01a6ab1f 	.word	0x01a6ab1f
 8005f08:	01e84800 	.word	0x01e84800

08005f0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f043 0201 	orr.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d115      	bne.n	8005f9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7fc fb94 	bl	80026ac <HAL_Delay>
      ms++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3301      	adds	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fa45 	bl	800741a <USB_GetMode>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d01e      	beq.n	8005fd4 <USB_SetCurrentMode+0x84>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b31      	cmp	r3, #49	; 0x31
 8005f9a:	d9f0      	bls.n	8005f7e <USB_SetCurrentMode+0x2e>
 8005f9c:	e01a      	b.n	8005fd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d115      	bne.n	8005fd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f7fc fb7b 	bl	80026ac <HAL_Delay>
      ms++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fa2c 	bl	800741a <USB_GetMode>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <USB_SetCurrentMode+0x84>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b31      	cmp	r3, #49	; 0x31
 8005fcc:	d9f0      	bls.n	8005fb0 <USB_SetCurrentMode+0x60>
 8005fce:	e001      	b.n	8005fd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e005      	b.n	8005fe0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b32      	cmp	r3, #50	; 0x32
 8005fd8:	d101      	bne.n	8005fde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe8:	b084      	sub	sp, #16
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	e009      	b.n	800601c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3340      	adds	r3, #64	; 0x40
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3301      	adds	r3, #1
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b0e      	cmp	r3, #14
 8006020:	d9f2      	bls.n	8006008 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11c      	bne.n	8006062 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006036:	f043 0302 	orr.w	r3, r3, #2
 800603a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
 8006060:	e00b      	b.n	800607a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	4619      	mov	r1, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	461a      	mov	r2, r3
 8006096:	680b      	ldr	r3, [r1, #0]
 8006098:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d10c      	bne.n	80060ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060a6:	2100      	movs	r1, #0
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f965 	bl	8006378 <USB_SetDevSpeed>
 80060ae:	e008      	b.n	80060c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060b0:	2101      	movs	r1, #1
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f960 	bl	8006378 <USB_SetDevSpeed>
 80060b8:	e003      	b.n	80060c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060ba:	2103      	movs	r1, #3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f95b 	bl	8006378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060c2:	2110      	movs	r1, #16
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8f3 	bl	80062b0 <USB_FlushTxFifo>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f91f 	bl	8006318 <USB_FlushRxFifo>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	461a      	mov	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	461a      	mov	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e043      	b.n	8006196 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006124:	d118      	bne.n	8006158 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e013      	b.n	800616a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e008      	b.n	800616a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	461a      	mov	r2, r3
 800618a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800618e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3b7      	bcc.n	800610e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e043      	b.n	800622c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ba:	d118      	bne.n	80061ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e013      	b.n	8006200 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e008      	b.n	8006200 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	461a      	mov	r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	461a      	mov	r2, r3
 800620e:	2300      	movs	r3, #0
 8006210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	461a      	mov	r2, r3
 8006220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006224:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d3b7      	bcc.n	80061a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006246:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006254:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f043 0210 	orr.w	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <USB_DevInit+0x2c4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f043 0208 	orr.w	r2, r3, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d107      	bne.n	800629c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a8:	b004      	add	sp, #16
 80062aa:	4770      	bx	lr
 80062ac:	803c3800 	.word	0x803c3800

080062b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3301      	adds	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4a13      	ldr	r2, [pc, #76]	; (8006314 <USB_FlushTxFifo+0x64>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d901      	bls.n	80062d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e01b      	b.n	8006308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	daf2      	bge.n	80062be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	019b      	lsls	r3, r3, #6
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <USB_FlushTxFifo+0x64>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e006      	b.n	8006308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b20      	cmp	r3, #32
 8006304:	d0f0      	beq.n	80062e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	00030d40 	.word	0x00030d40

08006318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a11      	ldr	r2, [pc, #68]	; (8006374 <USB_FlushRxFifo+0x5c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e018      	b.n	8006368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	daf2      	bge.n	8006324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2210      	movs	r2, #16
 8006346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a08      	ldr	r2, [pc, #32]	; (8006374 <USB_FlushRxFifo+0x5c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d901      	bls.n	800635a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e006      	b.n	8006368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d0f0      	beq.n	8006348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	00030d40 	.word	0x00030d40

08006378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0306 	and.w	r3, r3, #6
 80063c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
 80063ce:	e00a      	b.n	80063e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d002      	beq.n	80063dc <USB_GetDevSpeed+0x32>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b06      	cmp	r3, #6
 80063da:	d102      	bne.n	80063e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063dc:	2302      	movs	r3, #2
 80063de:	75fb      	strb	r3, [r7, #23]
 80063e0:	e001      	b.n	80063e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063e2:	230f      	movs	r3, #15
 80063e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d13a      	bne.n	8006486 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	2101      	movs	r1, #1
 8006422:	fa01 f303 	lsl.w	r3, r1, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800642e:	4313      	orrs	r3, r2
 8006430:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d155      	bne.n	80064f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	791b      	ldrb	r3, [r3, #4]
 8006462:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006464:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800646c:	4313      	orrs	r3, r2
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e036      	b.n	80064f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	2101      	movs	r1, #1
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	041b      	lsls	r3, r3, #16
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d11a      	bne.n	80064f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	791b      	ldrb	r3, [r3, #4]
 80064d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064da:	430b      	orrs	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d161      	bne.n	80065e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006536:	d11f      	bne.n	8006578 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006556:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006576:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	2101      	movs	r1, #1
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	b29b      	uxth	r3, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006598:	4013      	ands	r3, r2
 800659a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	2101      	movs	r1, #1
 80065ae:	fa01 f303 	lsl.w	r3, r1, r3
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065bc:	4013      	ands	r3, r2
 80065be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	0159      	lsls	r1, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065da:	4619      	mov	r1, r3
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <USB_DeactivateEndpoint+0x1b0>)
 80065de:	4013      	ands	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]
 80065e2:	e060      	b.n	80066a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fa:	d11f      	bne.n	800663c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800661a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	2101      	movs	r1, #1
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	43db      	mvns	r3, r3
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665c:	4013      	ands	r3, r2
 800665e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	43db      	mvns	r3, r3
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006680:	4013      	ands	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	0159      	lsls	r1, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	440b      	add	r3, r1
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	4619      	mov	r1, r3
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <USB_DeactivateEndpoint+0x1b4>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	ec337800 	.word	0xec337800
 80066b8:	eff37800 	.word	0xeff37800

080066bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f040 815c 	bne.w	8006996 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d132      	bne.n	800674c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006700:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006704:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006744:	0cdb      	lsrs	r3, r3, #19
 8006746:	04db      	lsls	r3, r3, #19
 8006748:	6113      	str	r3, [r2, #16]
 800674a:	e074      	b.n	8006836 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006766:	0cdb      	lsrs	r3, r3, #19
 8006768:	04db      	lsls	r3, r3, #19
 800676a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006786:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800678a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800678e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6999      	ldr	r1, [r3, #24]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	440b      	add	r3, r1
 80067a8:	1e59      	subs	r1, r3, #1
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067b4:	4b9d      	ldr	r3, [pc, #628]	; (8006a2c <USB_EPStartXfer+0x370>)
 80067b6:	400b      	ands	r3, r1
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	0148      	lsls	r0, r1, #5
 80067bc:	69f9      	ldr	r1, [r7, #28]
 80067be:	4401      	add	r1, r0
 80067c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067c4:	4313      	orrs	r3, r2
 80067c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067de:	69b9      	ldr	r1, [r7, #24]
 80067e0:	0148      	lsls	r0, r1, #5
 80067e2:	69f9      	ldr	r1, [r7, #28]
 80067e4:	4401      	add	r1, r0
 80067e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ea:	4313      	orrs	r3, r2
 80067ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	791b      	ldrb	r3, [r3, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d11f      	bne.n	8006836 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006814:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006834:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d14b      	bne.n	80068d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	461a      	mov	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	791b      	ldrb	r3, [r3, #4]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d128      	bne.n	80068b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d110      	bne.n	8006892 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e00f      	b.n	80068b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	e133      	b.n	8006b3c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	791b      	ldrb	r3, [r3, #4]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d015      	beq.n	8006928 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 811b 	beq.w	8006b3c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	2101      	movs	r1, #1
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	69f9      	ldr	r1, [r7, #28]
 800691e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006922:	4313      	orrs	r3, r2
 8006924:	634b      	str	r3, [r1, #52]	; 0x34
 8006926:	e109      	b.n	8006b3c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d110      	bne.n	800695a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e00f      	b.n	800697a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006978:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6919      	ldr	r1, [r3, #16]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	b298      	uxth	r0, r3
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fade 	bl	8006f50 <USB_WritePacket>
 8006994:	e0d2      	b.n	8006b3c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	0cdb      	lsrs	r3, r3, #19
 80069b2:	04db      	lsls	r3, r3, #19
 80069b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d126      	bne.n	8006a30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	0148      	lsls	r0, r1, #5
 80069fc:	69f9      	ldr	r1, [r7, #28]
 80069fe:	4401      	add	r1, r0
 8006a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a04:	4313      	orrs	r3, r2
 8006a06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a26:	6113      	str	r3, [r2, #16]
 8006a28:	e03a      	b.n	8006aa0 <USB_EPStartXfer+0x3e4>
 8006a2a:	bf00      	nop
 8006a2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	1e5a      	subs	r2, r3, #1
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	8afa      	ldrh	r2, [r7, #22]
 8006a4c:	fb03 f202 	mul.w	r2, r3, r2
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	8afb      	ldrh	r3, [r7, #22]
 8006a64:	04d9      	lsls	r1, r3, #19
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <USB_EPStartXfer+0x48c>)
 8006a68:	400b      	ands	r3, r1
 8006a6a:	69b9      	ldr	r1, [r7, #24]
 8006a6c:	0148      	lsls	r0, r1, #5
 8006a6e:	69f9      	ldr	r1, [r7, #28]
 8006a70:	4401      	add	r1, r0
 8006a72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a76:	4313      	orrs	r3, r2
 8006a78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	0148      	lsls	r0, r1, #5
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	4401      	add	r1, r0
 8006a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10d      	bne.n	8006ac2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6919      	ldr	r1, [r3, #16]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	460a      	mov	r2, r1
 8006ac0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	791b      	ldrb	r3, [r3, #4]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d128      	bne.n	8006b1c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d110      	bne.n	8006afc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	e00f      	b.n	8006b1c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	1ff80000 	.word	0x1ff80000

08006b4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	785b      	ldrb	r3, [r3, #1]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	f040 80ce 	bne.w	8006d0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d132      	bne.n	8006bdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd4:	0cdb      	lsrs	r3, r3, #19
 8006bd6:	04db      	lsls	r3, r3, #19
 8006bd8:	6113      	str	r3, [r2, #16]
 8006bda:	e04e      	b.n	8006c7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf6:	0cdb      	lsrs	r3, r3, #19
 8006bf8:	04db      	lsls	r3, r3, #19
 8006bfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d903      	bls.n	8006c34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6a:	6939      	ldr	r1, [r7, #16]
 8006c6c:	0148      	lsls	r0, r1, #5
 8006c6e:	6979      	ldr	r1, [r7, #20]
 8006c70:	4401      	add	r1, r0
 8006c72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c76:	4313      	orrs	r3, r2
 8006c78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d11e      	bne.n	8006cbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e097      	b.n	8006dee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8083 	beq.w	8006dee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d04:	4313      	orrs	r3, r2
 8006d06:	634b      	str	r3, [r1, #52]	; 0x34
 8006d08:	e071      	b.n	8006dee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	0cdb      	lsrs	r3, r3, #19
 8006d26:	04db      	lsls	r3, r3, #19
 8006d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9c:	6939      	ldr	r1, [r7, #16]
 8006d9e:	0148      	lsls	r0, r1, #5
 8006da0:	6979      	ldr	r1, [r7, #20]
 8006da2:	4401      	add	r1, r0
 8006da4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006da8:	4313      	orrs	r3, r2
 8006daa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10d      	bne.n	8006dce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6919      	ldr	r1, [r3, #16]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dca:	460a      	mov	r2, r1
 8006dcc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d14a      	bne.n	8006eb0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e32:	f040 8086 	bne.w	8006f42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	7812      	ldrb	r2, [r2, #0]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d902      	bls.n	8006e94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
          break;
 8006e92:	e056      	b.n	8006f42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eac:	d0e7      	beq.n	8006e7e <USB_EPStopXfer+0x82>
 8006eae:	e048      	b.n	8006f42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec8:	d13b      	bne.n	8006f42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d902      	bls.n	8006f28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
          break;
 8006f26:	e00c      	b.n	8006f42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f40:	d0e7      	beq.n	8006f12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	460b      	mov	r3, r1
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d123      	bne.n	8006fbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f76:	88bb      	ldrh	r3, [r7, #4]
 8006f78:	3303      	adds	r3, #3
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e018      	b.n	8006fb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	031a      	lsls	r2, r3, #12
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f90:	461a      	mov	r2, r3
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d3e2      	bcc.n	8006f84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3724      	adds	r7, #36	; 0x24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b08b      	sub	sp, #44	; 0x2c
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	089b      	lsrs	r3, r3, #2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	e014      	b.n	8007022 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	601a      	str	r2, [r3, #0]
    pDest++;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	3301      	adds	r3, #1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	3301      	adds	r3, #1
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	3301      	adds	r3, #1
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	3301      	adds	r3, #1
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	3301      	adds	r3, #1
 8007020:	623b      	str	r3, [r7, #32]
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	429a      	cmp	r2, r3
 8007028:	d3e6      	bcc.n	8006ff8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800702a:	8bfb      	ldrh	r3, [r7, #30]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01e      	beq.n	800706e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703a:	461a      	mov	r2, r3
 800703c:	f107 0310 	add.w	r3, r7, #16
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
 8007050:	b2da      	uxtb	r2, r3
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	701a      	strb	r2, [r3, #0]
      i++;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	3301      	adds	r3, #1
 800705a:	623b      	str	r3, [r7, #32]
      pDest++;
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	3301      	adds	r3, #1
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007062:	8bfb      	ldrh	r3, [r7, #30]
 8007064:	3b01      	subs	r3, #1
 8007066:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007068:	8bfb      	ldrh	r3, [r7, #30]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1ea      	bne.n	8007044 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007070:	4618      	mov	r0, r3
 8007072:	372c      	adds	r7, #44	; 0x2c
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	785b      	ldrb	r3, [r3, #1]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d12c      	bne.n	80070f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	db12      	blt.n	80070d0 <USB_EPSetStall+0x54>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00f      	beq.n	80070d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	e02b      	b.n	800714a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	db12      	blt.n	800712a <USB_EPSetStall+0xae>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007124:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007128:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	440a      	add	r2, r1
 8007140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007148:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d128      	bne.n	80071c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007192:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	791b      	ldrb	r3, [r3, #4]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d003      	beq.n	80071a4 <USB_EPClearStall+0x4c>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	791b      	ldrb	r3, [r3, #4]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d138      	bne.n	8007216 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	e027      	b.n	8007216 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	791b      	ldrb	r3, [r3, #4]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d003      	beq.n	80071f6 <USB_EPClearStall+0x9e>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	791b      	ldrb	r3, [r3, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d10f      	bne.n	8007216 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007214:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007242:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007246:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800725e:	4313      	orrs	r3, r2
 8007260:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800729e:	f023 0302 	bic.w	r3, r3, #2
 80072a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072cc:	f023 0303 	bic.w	r3, r3, #3
 80072d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4013      	ands	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	0c1b      	lsrs	r3, r3, #16
}
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	b29b      	uxth	r3, r3
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	4013      	ands	r3, r2
 80073ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073b0:	68bb      	ldr	r3, [r7, #8]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073be:	b480      	push	{r7}
 80073c0:	b087      	sub	sp, #28
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	fa22 f303 	lsr.w	r3, r2, r3
 80073ee:	01db      	lsls	r3, r3, #7
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4013      	ands	r3, r2
 800740a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800740c:	68bb      	ldr	r3, [r7, #8]
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
}
 800742a:	4618      	mov	r0, r3
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007450:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	460b      	mov	r3, r1
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	333c      	adds	r3, #60	; 0x3c
 8007492:	3304      	adds	r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4a26      	ldr	r2, [pc, #152]	; (8007534 <USB_EP0_OutStart+0xb8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d90a      	bls.n	80074b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b0:	d101      	bne.n	80074b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e037      	b.n	8007526 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e4:	f043 0318 	orr.w	r3, r3, #24
 80074e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80074fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10f      	bne.n	8007524 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	4f54300a 	.word	0x4f54300a

08007538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a13      	ldr	r2, [pc, #76]	; (800759c <USB_CoreReset+0x64>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e01b      	b.n	800758e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	daf2      	bge.n	8007544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f043 0201 	orr.w	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <USB_CoreReset+0x64>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e006      	b.n	800758e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d0f0      	beq.n	800756e <USB_CoreReset+0x36>

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	00030d40 	.word	0x00030d40

080075a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075b0:	f002 fc6a 	bl	8009e88 <USBD_static_malloc>
 80075b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32b0      	adds	r2, #176	; 0xb0
 80075c6:	2100      	movs	r1, #0
 80075c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e0d4      	b.n	800777a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80075d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80075d4:	2100      	movs	r1, #0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f002 fcc8 	bl	8009f6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	32b0      	adds	r2, #176	; 0xb0
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	32b0      	adds	r2, #176	; 0xb0
 80075f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	7c1b      	ldrb	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d138      	bne.n	800767a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007608:	4b5e      	ldr	r3, [pc, #376]	; (8007784 <USBD_CDC_Init+0x1e4>)
 800760a:	7819      	ldrb	r1, [r3, #0]
 800760c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007610:	2202      	movs	r2, #2
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f002 fb15 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007618:	4b5a      	ldr	r3, [pc, #360]	; (8007784 <USBD_CDC_Init+0x1e4>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3324      	adds	r3, #36	; 0x24
 800762e:	2201      	movs	r2, #1
 8007630:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007632:	4b55      	ldr	r3, [pc, #340]	; (8007788 <USBD_CDC_Init+0x1e8>)
 8007634:	7819      	ldrb	r1, [r3, #0]
 8007636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800763a:	2202      	movs	r2, #2
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f002 fb00 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007642:	4b51      	ldr	r3, [pc, #324]	; (8007788 <USBD_CDC_Init+0x1e8>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800765a:	2201      	movs	r2, #1
 800765c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800765e:	4b4b      	ldr	r3, [pc, #300]	; (800778c <USBD_CDC_Init+0x1ec>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 020f 	and.w	r2, r3, #15
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	3326      	adds	r3, #38	; 0x26
 8007674:	2210      	movs	r2, #16
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	e035      	b.n	80076e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800767a:	4b42      	ldr	r3, [pc, #264]	; (8007784 <USBD_CDC_Init+0x1e4>)
 800767c:	7819      	ldrb	r1, [r3, #0]
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	2202      	movs	r2, #2
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f002 fadd 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007688:	4b3e      	ldr	r3, [pc, #248]	; (8007784 <USBD_CDC_Init+0x1e4>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 020f 	and.w	r2, r3, #15
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	3324      	adds	r3, #36	; 0x24
 800769e:	2201      	movs	r2, #1
 80076a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076a2:	4b39      	ldr	r3, [pc, #228]	; (8007788 <USBD_CDC_Init+0x1e8>)
 80076a4:	7819      	ldrb	r1, [r3, #0]
 80076a6:	2340      	movs	r3, #64	; 0x40
 80076a8:	2202      	movs	r2, #2
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f002 fac9 	bl	8009c42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076b0:	4b35      	ldr	r3, [pc, #212]	; (8007788 <USBD_CDC_Init+0x1e8>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	f003 020f 	and.w	r2, r3, #15
 80076b8:	6879      	ldr	r1, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076c8:	2201      	movs	r2, #1
 80076ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076cc:	4b2f      	ldr	r3, [pc, #188]	; (800778c <USBD_CDC_Init+0x1ec>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 020f 	and.w	r2, r3, #15
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	3326      	adds	r3, #38	; 0x26
 80076e2:	2210      	movs	r2, #16
 80076e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076e6:	4b29      	ldr	r3, [pc, #164]	; (800778c <USBD_CDC_Init+0x1ec>)
 80076e8:	7819      	ldrb	r1, [r3, #0]
 80076ea:	2308      	movs	r3, #8
 80076ec:	2203      	movs	r2, #3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f002 faa7 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80076f4:	4b25      	ldr	r3, [pc, #148]	; (800778c <USBD_CDC_Init+0x1ec>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	f003 020f 	and.w	r2, r3, #15
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	3324      	adds	r3, #36	; 0x24
 800770a:	2201      	movs	r2, #1
 800770c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	33b0      	adds	r3, #176	; 0xb0
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007744:	2302      	movs	r3, #2
 8007746:	e018      	b.n	800777a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7c1b      	ldrb	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007750:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <USBD_CDC_Init+0x1e8>)
 8007752:	7819      	ldrb	r1, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800775a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f002 fb5e 	bl	8009e20 <USBD_LL_PrepareReceive>
 8007764:	e008      	b.n	8007778 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007766:	4b08      	ldr	r3, [pc, #32]	; (8007788 <USBD_CDC_Init+0x1e8>)
 8007768:	7819      	ldrb	r1, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007770:	2340      	movs	r3, #64	; 0x40
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f002 fb54 	bl	8009e20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200000bb 	.word	0x200000bb
 8007788:	200000bc 	.word	0x200000bc
 800778c:	200000bd 	.word	0x200000bd

08007790 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800779c:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <USBD_CDC_DeInit+0xf8>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f002 fa73 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80077a8:	4b37      	ldr	r3, [pc, #220]	; (8007888 <USBD_CDC_DeInit+0xf8>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	3324      	adds	r3, #36	; 0x24
 80077be:	2200      	movs	r2, #0
 80077c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80077c2:	4b32      	ldr	r3, [pc, #200]	; (800788c <USBD_CDC_DeInit+0xfc>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f002 fa60 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80077ce:	4b2f      	ldr	r3, [pc, #188]	; (800788c <USBD_CDC_DeInit+0xfc>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 020f 	and.w	r2, r3, #15
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077e6:	2200      	movs	r2, #0
 80077e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80077ea:	4b29      	ldr	r3, [pc, #164]	; (8007890 <USBD_CDC_DeInit+0x100>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f002 fa4c 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80077f6:	4b26      	ldr	r3, [pc, #152]	; (8007890 <USBD_CDC_DeInit+0x100>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	f003 020f 	and.w	r2, r3, #15
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	3324      	adds	r3, #36	; 0x24
 800780c:	2200      	movs	r2, #0
 800780e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007810:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <USBD_CDC_DeInit+0x100>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	3326      	adds	r3, #38	; 0x26
 8007826:	2200      	movs	r2, #0
 8007828:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32b0      	adds	r2, #176	; 0xb0
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01f      	beq.n	800787c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	33b0      	adds	r3, #176	; 0xb0
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32b0      	adds	r2, #176	; 0xb0
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	4618      	mov	r0, r3
 8007860:	f002 fb20 	bl	8009ea4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	32b0      	adds	r2, #176	; 0xb0
 800786e:	2100      	movs	r1, #0
 8007870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200000bb 	.word	0x200000bb
 800788c:	200000bc 	.word	0x200000bc
 8007890:	200000bd 	.word	0x200000bd

08007894 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	32b0      	adds	r2, #176	; 0xb0
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e0bf      	b.n	8007a44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d050      	beq.n	8007972 <USBD_CDC_Setup+0xde>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	f040 80af 	bne.w	8007a34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	88db      	ldrh	r3, [r3, #6]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d03a      	beq.n	8007954 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	b25b      	sxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	da1b      	bge.n	8007920 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	33b0      	adds	r3, #176	; 0xb0
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80078fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	88d2      	ldrh	r2, [r2, #6]
 8007904:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88db      	ldrh	r3, [r3, #6]
 800790a:	2b07      	cmp	r3, #7
 800790c:	bf28      	it	cs
 800790e:	2307      	movcs	r3, #7
 8007910:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	89fa      	ldrh	r2, [r7, #14]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 fd43 	bl	80093a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800791e:	e090      	b.n	8007a42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	785a      	ldrb	r2, [r3, #1]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	88db      	ldrh	r3, [r3, #6]
 800792e:	2b3f      	cmp	r3, #63	; 0x3f
 8007930:	d803      	bhi.n	800793a <USBD_CDC_Setup+0xa6>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	88db      	ldrh	r3, [r3, #6]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	e000      	b.n	800793c <USBD_CDC_Setup+0xa8>
 800793a:	2240      	movs	r2, #64	; 0x40
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007942:	6939      	ldr	r1, [r7, #16]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800794a:	461a      	mov	r2, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fd55 	bl	80093fc <USBD_CtlPrepareRx>
      break;
 8007952:	e076      	b.n	8007a42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	33b0      	adds	r3, #176	; 0xb0
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	7850      	ldrb	r0, [r2, #1]
 800796a:	2200      	movs	r2, #0
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	4798      	blx	r3
      break;
 8007970:	e067      	b.n	8007a42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b0b      	cmp	r3, #11
 8007978:	d851      	bhi.n	8007a1e <USBD_CDC_Setup+0x18a>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <USBD_CDC_Setup+0xec>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	080079b1 	.word	0x080079b1
 8007984:	08007a2d 	.word	0x08007a2d
 8007988:	08007a1f 	.word	0x08007a1f
 800798c:	08007a1f 	.word	0x08007a1f
 8007990:	08007a1f 	.word	0x08007a1f
 8007994:	08007a1f 	.word	0x08007a1f
 8007998:	08007a1f 	.word	0x08007a1f
 800799c:	08007a1f 	.word	0x08007a1f
 80079a0:	08007a1f 	.word	0x08007a1f
 80079a4:	08007a1f 	.word	0x08007a1f
 80079a8:	080079db 	.word	0x080079db
 80079ac:	08007a05 	.word	0x08007a05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d107      	bne.n	80079cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80079bc:	f107 030a 	add.w	r3, r7, #10
 80079c0:	2202      	movs	r2, #2
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 fced 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ca:	e032      	b.n	8007a32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fc77 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	75fb      	strb	r3, [r7, #23]
          break;
 80079d8:	e02b      	b.n	8007a32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d107      	bne.n	80079f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80079e6:	f107 030d 	add.w	r3, r7, #13
 80079ea:	2201      	movs	r2, #1
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fcd8 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079f4:	e01d      	b.n	8007a32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fc62 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80079fe:	2303      	movs	r3, #3
 8007a00:	75fb      	strb	r3, [r7, #23]
          break;
 8007a02:	e016      	b.n	8007a32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d00f      	beq.n	8007a30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fc55 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a1c:	e008      	b.n	8007a30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fc4e 	bl	80092c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a26:	2303      	movs	r3, #3
 8007a28:	75fb      	strb	r3, [r7, #23]
          break;
 8007a2a:	e002      	b.n	8007a32 <USBD_CDC_Setup+0x19e>
          break;
 8007a2c:	bf00      	nop
 8007a2e:	e008      	b.n	8007a42 <USBD_CDC_Setup+0x1ae>
          break;
 8007a30:	bf00      	nop
      }
      break;
 8007a32:	e006      	b.n	8007a42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fc43 	bl	80092c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a40:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	32b0      	adds	r2, #176	; 0xb0
 8007a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e065      	b.n	8007b42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	32b0      	adds	r2, #176	; 0xb0
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	3318      	adds	r3, #24
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d02f      	beq.n	8007b00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	f003 020f 	and.w	r2, r3, #15
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3318      	adds	r3, #24
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	78fb      	ldrb	r3, [r7, #3]
 8007ab8:	f003 010f 	and.w	r1, r3, #15
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	440b      	add	r3, r1
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4403      	add	r3, r0
 8007ac8:	3348      	adds	r3, #72	; 0x48
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d112      	bne.n	8007b00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 020f 	and.w	r2, r3, #15
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	3318      	adds	r3, #24
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007af2:	78f9      	ldrb	r1, [r7, #3]
 8007af4:	2300      	movs	r3, #0
 8007af6:	2200      	movs	r2, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 f970 	bl	8009dde <USBD_LL_Transmit>
 8007afe:	e01f      	b.n	8007b40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	33b0      	adds	r3, #176	; 0xb0
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d010      	beq.n	8007b40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	33b0      	adds	r3, #176	; 0xb0
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	32b0      	adds	r2, #176	; 0xb0
 8007b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	32b0      	adds	r2, #176	; 0xb0
 8007b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e01a      	b.n	8007bb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f002 f96e 	bl	8009e62 <USBD_LL_GetRxDataSize>
 8007b86:	4602      	mov	r2, r0
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	33b0      	adds	r3, #176	; 0xb0
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bac:	4611      	mov	r1, r2
 8007bae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	32b0      	adds	r2, #176	; 0xb0
 8007bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e025      	b.n	8007c28 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	33b0      	adds	r3, #176	; 0xb0
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01a      	beq.n	8007c26 <USBD_CDC_EP0_RxReady+0x6c>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007bf6:	2bff      	cmp	r3, #255	; 0xff
 8007bf8:	d015      	beq.n	8007c26 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	33b0      	adds	r3, #176	; 0xb0
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c1a:	b292      	uxth	r2, r2
 8007c1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	22ff      	movs	r2, #255	; 0xff
 8007c22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c38:	2182      	movs	r1, #130	; 0x82
 8007c3a:	4818      	ldr	r0, [pc, #96]	; (8007c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c3c:	f000 fd09 	bl	8008652 <USBD_GetEpDesc>
 8007c40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c42:	2101      	movs	r1, #1
 8007c44:	4815      	ldr	r0, [pc, #84]	; (8007c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c46:	f000 fd04 	bl	8008652 <USBD_GetEpDesc>
 8007c4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c4c:	2181      	movs	r1, #129	; 0x81
 8007c4e:	4813      	ldr	r0, [pc, #76]	; (8007c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007c50:	f000 fcff 	bl	8008652 <USBD_GetEpDesc>
 8007c54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c70:	711a      	strb	r2, [r3, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d006      	beq.n	8007c8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c84:	711a      	strb	r2, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2243      	movs	r2, #67	; 0x43
 8007c8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000078 	.word	0x20000078

08007ca0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ca8:	2182      	movs	r1, #130	; 0x82
 8007caa:	4818      	ldr	r0, [pc, #96]	; (8007d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cac:	f000 fcd1 	bl	8008652 <USBD_GetEpDesc>
 8007cb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	4815      	ldr	r0, [pc, #84]	; (8007d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cb6:	f000 fccc 	bl	8008652 <USBD_GetEpDesc>
 8007cba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cbc:	2181      	movs	r1, #129	; 0x81
 8007cbe:	4813      	ldr	r0, [pc, #76]	; (8007d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007cc0:	f000 fcc7 	bl	8008652 <USBD_GetEpDesc>
 8007cc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d006      	beq.n	8007ce6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	711a      	strb	r2, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f042 0202 	orr.w	r2, r2, #2
 8007ce4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d006      	beq.n	8007cfa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	711a      	strb	r2, [r3, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f042 0202 	orr.w	r2, r2, #2
 8007cf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2243      	movs	r2, #67	; 0x43
 8007cfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d00:	4b02      	ldr	r3, [pc, #8]	; (8007d0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000078 	.word	0x20000078

08007d10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d18:	2182      	movs	r1, #130	; 0x82
 8007d1a:	4818      	ldr	r0, [pc, #96]	; (8007d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d1c:	f000 fc99 	bl	8008652 <USBD_GetEpDesc>
 8007d20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d22:	2101      	movs	r1, #1
 8007d24:	4815      	ldr	r0, [pc, #84]	; (8007d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d26:	f000 fc94 	bl	8008652 <USBD_GetEpDesc>
 8007d2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d2c:	2181      	movs	r1, #129	; 0x81
 8007d2e:	4813      	ldr	r0, [pc, #76]	; (8007d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d30:	f000 fc8f 	bl	8008652 <USBD_GetEpDesc>
 8007d34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d006      	beq.n	8007d56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d50:	711a      	strb	r2, [r3, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d006      	beq.n	8007d6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d64:	711a      	strb	r2, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2243      	movs	r2, #67	; 0x43
 8007d6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d70:	4b02      	ldr	r3, [pc, #8]	; (8007d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000078 	.word	0x20000078

08007d80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d8e:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	20000034 	.word	0x20000034

08007da0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e009      	b.n	8007dc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	33b0      	adds	r3, #176	; 0xb0
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	32b0      	adds	r2, #176	; 0xb0
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e008      	b.n	8007e0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32b0      	adds	r2, #176	; 0xb0
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e004      	b.n	8007e46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	32b0      	adds	r2, #176	; 0xb0
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	32b0      	adds	r2, #176	; 0xb0
 8007e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e018      	b.n	8007eb4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7c1b      	ldrb	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e8a:	4b0c      	ldr	r3, [pc, #48]	; (8007ebc <USBD_CDC_ReceivePacket+0x68>)
 8007e8c:	7819      	ldrb	r1, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 ffc1 	bl	8009e20 <USBD_LL_PrepareReceive>
 8007e9e:	e008      	b.n	8007eb2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ea0:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <USBD_CDC_ReceivePacket+0x68>)
 8007ea2:	7819      	ldrb	r1, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007eaa:	2340      	movs	r3, #64	; 0x40
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 ffb7 	bl	8009e20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200000bc 	.word	0x200000bc

08007ec0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e01f      	b.n	8007f18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	79fa      	ldrb	r2, [r7, #7]
 8007f0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f001 fe31 	bl	8009b74 <USBD_LL_Init>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e025      	b.n	8007f84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	32ae      	adds	r2, #174	; 0xae
 8007f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	32ae      	adds	r2, #174	; 0xae
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	f107 020e 	add.w	r2, r7, #14
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 fe39 	bl	8009c0c <USBD_LL_Start>
 8007f9a:	4603      	mov	r3, r0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d009      	beq.n	8007fe8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	4618      	mov	r0, r3
 800803a:	f001 f908 	bl	800924e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800805a:	f003 031f 	and.w	r3, r3, #31
 800805e:	2b02      	cmp	r3, #2
 8008060:	d01a      	beq.n	8008098 <USBD_LL_SetupStage+0x72>
 8008062:	2b02      	cmp	r3, #2
 8008064:	d822      	bhi.n	80080ac <USBD_LL_SetupStage+0x86>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <USBD_LL_SetupStage+0x4a>
 800806a:	2b01      	cmp	r3, #1
 800806c:	d00a      	beq.n	8008084 <USBD_LL_SetupStage+0x5e>
 800806e:	e01d      	b.n	80080ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fb5f 	bl	800873c <USBD_StdDevReq>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
      break;
 8008082:	e020      	b.n	80080c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fbc7 	bl	8008820 <USBD_StdItfReq>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
      break;
 8008096:	e016      	b.n	80080c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc29 	bl	80088f8 <USBD_StdEPReq>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73fb      	strb	r3, [r7, #15]
      break;
 80080aa:	e00c      	b.n	80080c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 fe06 	bl	8009ccc <USBD_LL_StallEP>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
      break;
 80080c4:	bf00      	nop
  }

  return ret;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	460b      	mov	r3, r1
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d16e      	bne.n	80081c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	f040 8098 	bne.w	800822c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	429a      	cmp	r2, r3
 8008106:	d913      	bls.n	8008130 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	1ad2      	subs	r2, r2, r3
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	4293      	cmp	r3, r2
 8008120:	bf28      	it	cs
 8008122:	4613      	movcs	r3, r2
 8008124:	461a      	mov	r2, r3
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 f984 	bl	8009436 <USBD_CtlContinueRx>
 800812e:	e07d      	b.n	800822c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008136:	f003 031f 	and.w	r3, r3, #31
 800813a:	2b02      	cmp	r3, #2
 800813c:	d014      	beq.n	8008168 <USBD_LL_DataOutStage+0x98>
 800813e:	2b02      	cmp	r3, #2
 8008140:	d81d      	bhi.n	800817e <USBD_LL_DataOutStage+0xae>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <USBD_LL_DataOutStage+0x7c>
 8008146:	2b01      	cmp	r3, #1
 8008148:	d003      	beq.n	8008152 <USBD_LL_DataOutStage+0x82>
 800814a:	e018      	b.n	800817e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	75bb      	strb	r3, [r7, #22]
            break;
 8008150:	e018      	b.n	8008184 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008158:	b2db      	uxtb	r3, r3
 800815a:	4619      	mov	r1, r3
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fa5e 	bl	800861e <USBD_CoreFindIF>
 8008162:	4603      	mov	r3, r0
 8008164:	75bb      	strb	r3, [r7, #22]
            break;
 8008166:	e00d      	b.n	8008184 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800816e:	b2db      	uxtb	r3, r3
 8008170:	4619      	mov	r1, r3
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 fa60 	bl	8008638 <USBD_CoreFindEP>
 8008178:	4603      	mov	r3, r0
 800817a:	75bb      	strb	r3, [r7, #22]
            break;
 800817c:	e002      	b.n	8008184 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	75bb      	strb	r3, [r7, #22]
            break;
 8008182:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008184:	7dbb      	ldrb	r3, [r7, #22]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d119      	bne.n	80081be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b03      	cmp	r3, #3
 8008194:	d113      	bne.n	80081be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008196:	7dba      	ldrb	r2, [r7, #22]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	32ae      	adds	r2, #174	; 0xae
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80081a6:	7dba      	ldrb	r2, [r7, #22]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081ae:	7dba      	ldrb	r2, [r7, #22]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	32ae      	adds	r2, #174	; 0xae
 80081b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 f94a 	bl	8009458 <USBD_CtlSendStatus>
 80081c4:	e032      	b.n	800822c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	4619      	mov	r1, r3
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fa31 	bl	8008638 <USBD_CoreFindEP>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081da:	7dbb      	ldrb	r3, [r7, #22]
 80081dc:	2bff      	cmp	r3, #255	; 0xff
 80081de:	d025      	beq.n	800822c <USBD_LL_DataOutStage+0x15c>
 80081e0:	7dbb      	ldrb	r3, [r7, #22]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d122      	bne.n	800822c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d117      	bne.n	8008222 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081f2:	7dba      	ldrb	r2, [r7, #22]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	32ae      	adds	r2, #174	; 0xae
 80081f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008202:	7dba      	ldrb	r2, [r7, #22]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800820a:	7dba      	ldrb	r2, [r7, #22]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	32ae      	adds	r2, #174	; 0xae
 8008210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	7afa      	ldrb	r2, [r7, #11]
 8008218:	4611      	mov	r1, r2
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	4798      	blx	r3
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	e000      	b.n	800822e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b086      	sub	sp, #24
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	460b      	mov	r3, r1
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d16f      	bne.n	800832a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3314      	adds	r3, #20
 800824e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008256:	2b02      	cmp	r3, #2
 8008258:	d15a      	bne.n	8008310 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	429a      	cmp	r2, r3
 8008264:	d914      	bls.n	8008290 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	461a      	mov	r2, r3
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f001 f8ac 	bl	80093da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008282:	2300      	movs	r3, #0
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f001 fdc9 	bl	8009e20 <USBD_LL_PrepareReceive>
 800828e:	e03f      	b.n	8008310 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d11c      	bne.n	80082d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d316      	bcc.n	80082d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d20f      	bcs.n	80082d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082b6:	2200      	movs	r2, #0
 80082b8:	2100      	movs	r1, #0
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f001 f88d 	bl	80093da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c8:	2300      	movs	r3, #0
 80082ca:	2200      	movs	r2, #0
 80082cc:	2100      	movs	r1, #0
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f001 fda6 	bl	8009e20 <USBD_LL_PrepareReceive>
 80082d4:	e01c      	b.n	8008310 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d10f      	bne.n	8008302 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008302:	2180      	movs	r1, #128	; 0x80
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f001 fce1 	bl	8009ccc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f001 f8b7 	bl	800947e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d03a      	beq.n	8008390 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff fe42 	bl	8007fa4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008328:	e032      	b.n	8008390 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800832a:	7afb      	ldrb	r3, [r7, #11]
 800832c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f97f 	bl	8008638 <USBD_CoreFindEP>
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2bff      	cmp	r3, #255	; 0xff
 8008342:	d025      	beq.n	8008390 <USBD_LL_DataInStage+0x15a>
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d122      	bne.n	8008390 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b03      	cmp	r3, #3
 8008354:	d11c      	bne.n	8008390 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008356:	7dfa      	ldrb	r2, [r7, #23]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	32ae      	adds	r2, #174	; 0xae
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d014      	beq.n	8008390 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008366:	7dfa      	ldrb	r2, [r7, #23]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800836e:	7dfa      	ldrb	r2, [r7, #23]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	32ae      	adds	r2, #174	; 0xae
 8008374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	7afa      	ldrb	r2, [r7, #11]
 800837c:	4611      	mov	r1, r2
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	4798      	blx	r3
 8008382:	4603      	mov	r3, r0
 8008384:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008386:	7dbb      	ldrb	r3, [r7, #22]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800838c:	7dbb      	ldrb	r3, [r7, #22]
 800838e:	e000      	b.n	8008392 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d014      	beq.n	8008400 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6852      	ldr	r2, [r2, #4]
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	4611      	mov	r1, r2
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008400:	2340      	movs	r3, #64	; 0x40
 8008402:	2200      	movs	r2, #0
 8008404:	2100      	movs	r1, #0
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fc1b 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2240      	movs	r2, #64	; 0x40
 8008418:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800841c:	2340      	movs	r3, #64	; 0x40
 800841e:	2200      	movs	r2, #0
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fc0d 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2240      	movs	r2, #64	; 0x40
 8008432:	621a      	str	r2, [r3, #32]

  return ret;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846c:	b2da      	uxtb	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2204      	movs	r2, #4
 8008478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b04      	cmp	r3, #4
 800849c:	d106      	bne.n	80084ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d110      	bne.n	80084f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	32ae      	adds	r2, #174	; 0xae
 8008510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	e01c      	b.n	8008556 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b03      	cmp	r3, #3
 8008526:	d115      	bne.n	8008554 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	32ae      	adds	r2, #174	; 0xae
 8008532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	32ae      	adds	r2, #174	; 0xae
 8008546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	4611      	mov	r1, r2
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	32ae      	adds	r2, #174	; 0xae
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	e01c      	b.n	80085ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b03      	cmp	r3, #3
 800858a:	d115      	bne.n	80085b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32ae      	adds	r2, #174	; 0xae
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	32ae      	adds	r2, #174	; 0xae
 80085aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	78fa      	ldrb	r2, [r7, #3]
 80085b2:	4611      	mov	r1, r2
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6852      	ldr	r2, [r2, #4]
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	4611      	mov	r1, r2
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008610:	2303      	movs	r3, #3
 8008612:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800862a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008644:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	885b      	ldrh	r3, [r3, #2]
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	429a      	cmp	r2, r3
 8008678:	d920      	bls.n	80086bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008682:	e013      	b.n	80086ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008684:	f107 030a 	add.w	r3, r7, #10
 8008688:	4619      	mov	r1, r3
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f000 f81b 	bl	80086c6 <USBD_GetNextDesc>
 8008690:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d108      	bne.n	80086ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	789b      	ldrb	r3, [r3, #2]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d008      	beq.n	80086ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	897b      	ldrh	r3, [r7, #10]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d8e5      	bhi.n	8008684 <USBD_GetEpDesc+0x32>
 80086b8:	e000      	b.n	80086bc <USBD_GetEpDesc+0x6a>
          break;
 80086ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086bc:	693b      	ldr	r3, [r7, #16]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	881a      	ldrh	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4413      	add	r3, r2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4413      	add	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	3301      	adds	r3, #1
 8008716:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800871e:	8a3b      	ldrh	r3, [r7, #16]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	b21a      	sxth	r2, r3
 8008724:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008728:	4313      	orrs	r3, r2
 800872a:	b21b      	sxth	r3, r3
 800872c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800872e:	89fb      	ldrh	r3, [r7, #14]
}
 8008730:	4618      	mov	r0, r3
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	d005      	beq.n	8008762 <USBD_StdDevReq+0x26>
 8008756:	2b40      	cmp	r3, #64	; 0x40
 8008758:	d857      	bhi.n	800880a <USBD_StdDevReq+0xce>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <USBD_StdDevReq+0x42>
 800875e:	2b20      	cmp	r3, #32
 8008760:	d153      	bne.n	800880a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32ae      	adds	r2, #174	; 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
      break;
 800877c:	e04a      	b.n	8008814 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b09      	cmp	r3, #9
 8008784:	d83b      	bhi.n	80087fe <USBD_StdDevReq+0xc2>
 8008786:	a201      	add	r2, pc, #4	; (adr r2, 800878c <USBD_StdDevReq+0x50>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087e1 	.word	0x080087e1
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080087ff 	.word	0x080087ff
 8008798:	080087eb 	.word	0x080087eb
 800879c:	080087ff 	.word	0x080087ff
 80087a0:	080087bf 	.word	0x080087bf
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087ff 	.word	0x080087ff
 80087ac:	080087d7 	.word	0x080087d7
 80087b0:	080087c9 	.word	0x080087c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa3c 	bl	8008c34 <USBD_GetDescriptor>
          break;
 80087bc:	e024      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fba1 	bl	8008f08 <USBD_SetAddress>
          break;
 80087c6:	e01f      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fbe0 	bl	8008f90 <USBD_SetConfig>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
          break;
 80087d4:	e018      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc83 	bl	80090e4 <USBD_GetConfig>
          break;
 80087de:	e013      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fcb4 	bl	8009150 <USBD_GetStatus>
          break;
 80087e8:	e00e      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fce3 	bl	80091b8 <USBD_SetFeature>
          break;
 80087f2:	e009      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fd07 	bl	800920a <USBD_ClrFeature>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fd5e 	bl	80092c2 <USBD_CtlError>
          break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fd58 	bl	80092c2 <USBD_CtlError>
      break;
 8008812:	bf00      	nop
  }

  return ret;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop

08008820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008836:	2b40      	cmp	r3, #64	; 0x40
 8008838:	d005      	beq.n	8008846 <USBD_StdItfReq+0x26>
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	d852      	bhi.n	80088e4 <USBD_StdItfReq+0xc4>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <USBD_StdItfReq+0x26>
 8008842:	2b20      	cmp	r3, #32
 8008844:	d14e      	bne.n	80088e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	b2db      	uxtb	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	2b02      	cmp	r3, #2
 8008852:	d840      	bhi.n	80088d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	889b      	ldrh	r3, [r3, #4]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d836      	bhi.n	80088cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	889b      	ldrh	r3, [r3, #4]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fed9 	bl	800861e <USBD_CoreFindIF>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2bff      	cmp	r3, #255	; 0xff
 8008874:	d01d      	beq.n	80088b2 <USBD_StdItfReq+0x92>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11a      	bne.n	80088b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800887c:	7bba      	ldrb	r2, [r7, #14]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32ae      	adds	r2, #174	; 0xae
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00f      	beq.n	80088ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800888c:	7bba      	ldrb	r2, [r7, #14]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008894:	7bba      	ldrb	r2, [r7, #14]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32ae      	adds	r2, #174	; 0xae
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088aa:	e004      	b.n	80088b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088b0:	e001      	b.n	80088b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d110      	bne.n	80088e0 <USBD_StdItfReq+0xc0>
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fdc7 	bl	8009458 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088ca:	e009      	b.n	80088e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fcf7 	bl	80092c2 <USBD_CtlError>
          break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fcf2 	bl	80092c2 <USBD_CtlError>
          break;
 80088de:	e000      	b.n	80088e2 <USBD_StdItfReq+0xc2>
          break;
 80088e0:	bf00      	nop
      }
      break;
 80088e2:	e004      	b.n	80088ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fceb 	bl	80092c2 <USBD_CtlError>
      break;
 80088ec:	bf00      	nop
  }

  return ret;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	889b      	ldrh	r3, [r3, #4]
 800890a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008914:	2b40      	cmp	r3, #64	; 0x40
 8008916:	d007      	beq.n	8008928 <USBD_StdEPReq+0x30>
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	f200 817f 	bhi.w	8008c1c <USBD_StdEPReq+0x324>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d02a      	beq.n	8008978 <USBD_StdEPReq+0x80>
 8008922:	2b20      	cmp	r3, #32
 8008924:	f040 817a 	bne.w	8008c1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fe83 	bl	8008638 <USBD_CoreFindEP>
 8008932:	4603      	mov	r3, r0
 8008934:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008936:	7b7b      	ldrb	r3, [r7, #13]
 8008938:	2bff      	cmp	r3, #255	; 0xff
 800893a:	f000 8174 	beq.w	8008c26 <USBD_StdEPReq+0x32e>
 800893e:	7b7b      	ldrb	r3, [r7, #13]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8170 	bne.w	8008c26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008946:	7b7a      	ldrb	r2, [r7, #13]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800894e:	7b7a      	ldrb	r2, [r7, #13]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	32ae      	adds	r2, #174	; 0xae
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8163 	beq.w	8008c26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008960:	7b7a      	ldrb	r2, [r7, #13]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	32ae      	adds	r2, #174	; 0xae
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008976:	e156      	b.n	8008c26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b03      	cmp	r3, #3
 800897e:	d008      	beq.n	8008992 <USBD_StdEPReq+0x9a>
 8008980:	2b03      	cmp	r3, #3
 8008982:	f300 8145 	bgt.w	8008c10 <USBD_StdEPReq+0x318>
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 809b 	beq.w	8008ac2 <USBD_StdEPReq+0x1ca>
 800898c:	2b01      	cmp	r3, #1
 800898e:	d03c      	beq.n	8008a0a <USBD_StdEPReq+0x112>
 8008990:	e13e      	b.n	8008c10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d002      	beq.n	80089a4 <USBD_StdEPReq+0xac>
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d016      	beq.n	80089d0 <USBD_StdEPReq+0xd8>
 80089a2:	e02c      	b.n	80089fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <USBD_StdEPReq+0xce>
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b80      	cmp	r3, #128	; 0x80
 80089ae:	d00a      	beq.n	80089c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f989 	bl	8009ccc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f985 	bl	8009ccc <USBD_LL_StallEP>
 80089c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089c4:	e020      	b.n	8008a08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc7a 	bl	80092c2 <USBD_CtlError>
              break;
 80089ce:	e01b      	b.n	8008a08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	885b      	ldrh	r3, [r3, #2]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10e      	bne.n	80089f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <USBD_StdEPReq+0xfe>
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b80      	cmp	r3, #128	; 0x80
 80089e2:	d008      	beq.n	80089f6 <USBD_StdEPReq+0xfe>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f96b 	bl	8009ccc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fd2e 	bl	8009458 <USBD_CtlSendStatus>

              break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc5e 	bl	80092c2 <USBD_CtlError>
              break;
 8008a06:	bf00      	nop
          }
          break;
 8008a08:	e107      	b.n	8008c1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d002      	beq.n	8008a1c <USBD_StdEPReq+0x124>
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d016      	beq.n	8008a48 <USBD_StdEPReq+0x150>
 8008a1a:	e04b      	b.n	8008ab4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00d      	beq.n	8008a3e <USBD_StdEPReq+0x146>
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b80      	cmp	r3, #128	; 0x80
 8008a26:	d00a      	beq.n	8008a3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f94d 	bl	8009ccc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a32:	2180      	movs	r1, #128	; 0x80
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f949 	bl	8009ccc <USBD_LL_StallEP>
 8008a3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a3c:	e040      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fc3e 	bl	80092c2 <USBD_CtlError>
              break;
 8008a46:	e03b      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d136      	bne.n	8008abe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 f953 	bl	8009d0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fcf7 	bl	8009458 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fde2 	bl	8008638 <USBD_CoreFindEP>
 8008a74:	4603      	mov	r3, r0
 8008a76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a78:	7b7b      	ldrb	r3, [r7, #13]
 8008a7a:	2bff      	cmp	r3, #255	; 0xff
 8008a7c:	d01f      	beq.n	8008abe <USBD_StdEPReq+0x1c6>
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11c      	bne.n	8008abe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a84:	7b7a      	ldrb	r2, [r7, #13]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a8c:	7b7a      	ldrb	r2, [r7, #13]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	32ae      	adds	r2, #174	; 0xae
 8008a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d010      	beq.n	8008abe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a9c:	7b7a      	ldrb	r2, [r7, #13]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32ae      	adds	r2, #174	; 0xae
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ab2:	e004      	b.n	8008abe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fc03 	bl	80092c2 <USBD_CtlError>
              break;
 8008abc:	e000      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>
              break;
 8008abe:	bf00      	nop
          }
          break;
 8008ac0:	e0ab      	b.n	8008c1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d002      	beq.n	8008ad4 <USBD_StdEPReq+0x1dc>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d032      	beq.n	8008b38 <USBD_StdEPReq+0x240>
 8008ad2:	e097      	b.n	8008c04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <USBD_StdEPReq+0x1f2>
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b80      	cmp	r3, #128	; 0x80
 8008ade:	d004      	beq.n	8008aea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fbed 	bl	80092c2 <USBD_CtlError>
                break;
 8008ae8:	e091      	b.n	8008c0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da0b      	bge.n	8008b0a <USBD_StdEPReq+0x212>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	3310      	adds	r3, #16
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	e00b      	b.n	8008b22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc37 	bl	80093a4 <USBD_CtlSendData>
              break;
 8008b36:	e06a      	b.n	8008c0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da11      	bge.n	8008b64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	f003 020f 	and.w	r2, r3, #15
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	3324      	adds	r3, #36	; 0x24
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d117      	bne.n	8008b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fbb0 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b62:	e054      	b.n	8008c0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	f003 020f 	and.w	r2, r3, #15
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb9d 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b88:	e041      	b.n	8008c0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da0b      	bge.n	8008baa <USBD_StdEPReq+0x2b2>
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	3310      	adds	r3, #16
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	e00b      	b.n	8008bc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <USBD_StdEPReq+0x2d8>
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b80      	cmp	r3, #128	; 0x80
 8008bce:	d103      	bne.n	8008bd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	e00e      	b.n	8008bf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f8b3 	bl	8009d48 <USBD_LL_IsStallEP>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fbd1 	bl	80093a4 <USBD_CtlSendData>
              break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fb5b 	bl	80092c2 <USBD_CtlError>
              break;
 8008c0c:	bf00      	nop
          }
          break;
 8008c0e:	e004      	b.n	8008c1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb55 	bl	80092c2 <USBD_CtlError>
          break;
 8008c18:	bf00      	nop
      }
      break;
 8008c1a:	e005      	b.n	8008c28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb4f 	bl	80092c2 <USBD_CtlError>
      break;
 8008c24:	e000      	b.n	8008c28 <USBD_StdEPReq+0x330>
      break;
 8008c26:	bf00      	nop
  }

  return ret;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b06      	cmp	r3, #6
 8008c56:	f200 8128 	bhi.w	8008eaa <USBD_GetDescriptor+0x276>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <USBD_GetDescriptor+0x2c>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c95 	.word	0x08008c95
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008eab 	.word	0x08008eab
 8008c70:	08008eab 	.word	0x08008eab
 8008c74:	08008e4b 	.word	0x08008e4b
 8008c78:	08008e77 	.word	0x08008e77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
      break;
 8008c92:	e112      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cb6:	e100      	b.n	8008eba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e0f2      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	f200 80ac 	bhi.w	8008e38 <USBD_GetDescriptor+0x204>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBD_GetDescriptor+0xb4>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d35 	.word	0x08008d35
 8008cf0:	08008d69 	.word	0x08008d69
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	08008dd1 	.word	0x08008dd1
 8008cfc:	08008e05 	.word	0x08008e05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d22:	e091      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 facb 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
          break;
 8008d32:	e089      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d56:	e077      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fab1 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
          break;
 8008d66:	e06f      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8a:	e05d      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa97 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9a:	e055      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dbe:	e043      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa7d 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dce:	e03b      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e029      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa63 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e021      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e00f      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa49 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e007      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa41 	bl	80092c2 <USBD_CtlError>
          err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e46:	bf00      	nop
      }
      break;
 8008e48:	e037      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7c1b      	ldrb	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4798      	blx	r3
 8008e62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e64:	e029      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa2a 	bl	80092c2 <USBD_CtlError>
        err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
      break;
 8008e74:	e021      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7c1b      	ldrb	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	f107 0208 	add.w	r2, r7, #8
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4798      	blx	r3
 8008e8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	2207      	movs	r2, #7
 8008e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e98:	e00f      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa10 	bl	80092c2 <USBD_CtlError>
        err++;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea8:	e007      	b.n	8008eba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa08 	bl	80092c2 <USBD_CtlError>
      err++;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb8:	bf00      	nop
  }

  if (err != 0U)
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11e      	bne.n	8008efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d016      	beq.n	8008ef6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ec8:	893b      	ldrh	r3, [r7, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88da      	ldrh	r2, [r3, #6]
 8008ed2:	893b      	ldrh	r3, [r7, #8]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bf28      	it	cs
 8008ed8:	4613      	movcs	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa5d 	bl	80093a4 <USBD_CtlSendData>
 8008eea:	e009      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9e7 	bl	80092c2 <USBD_CtlError>
 8008ef4:	e004      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 faae 	bl	8009458 <USBD_CtlSendStatus>
 8008efc:	e000      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    return;
 8008efe:	bf00      	nop
  }
}
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop

08008f08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	889b      	ldrh	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d131      	bne.n	8008f7e <USBD_SetAddress+0x76>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d12d      	bne.n	8008f7e <USBD_SetAddress+0x76>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	2b7f      	cmp	r3, #127	; 0x7f
 8008f28:	d829      	bhi.n	8008f7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d104      	bne.n	8008f4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f9bc 	bl	80092c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	e01d      	b.n	8008f88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7bfa      	ldrb	r2, [r7, #15]
 8008f50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 ff21 	bl	8009da0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa7a 	bl	8009458 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	e009      	b.n	8008f88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7c:	e004      	b.n	8008f88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f99e 	bl	80092c2 <USBD_CtlError>
  }
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	885b      	ldrh	r3, [r3, #2]
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	4b4e      	ldr	r3, [pc, #312]	; (80090e0 <USBD_SetConfig+0x150>)
 8008fa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	; (80090e0 <USBD_SetConfig+0x150>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d905      	bls.n	8008fbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f985 	bl	80092c2 <USBD_CtlError>
    return USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e08c      	b.n	80090d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d002      	beq.n	8008fce <USBD_SetConfig+0x3e>
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d029      	beq.n	8009020 <USBD_SetConfig+0x90>
 8008fcc:	e075      	b.n	80090ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fce:	4b44      	ldr	r3, [pc, #272]	; (80090e0 <USBD_SetConfig+0x150>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d020      	beq.n	8009018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fd6:	4b42      	ldr	r3, [pc, #264]	; (80090e0 <USBD_SetConfig+0x150>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fe0:	4b3f      	ldr	r3, [pc, #252]	; (80090e0 <USBD_SetConfig+0x150>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fe ffe7 	bl	8007fba <USBD_SetClassConfig>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f962 	bl	80092c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009006:	e065      	b.n	80090d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa25 	bl	8009458 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2203      	movs	r2, #3
 8009012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009016:	e05d      	b.n	80090d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa1d 	bl	8009458 <USBD_CtlSendStatus>
      break;
 800901e:	e059      	b.n	80090d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009020:	4b2f      	ldr	r3, [pc, #188]	; (80090e0 <USBD_SetConfig+0x150>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d112      	bne.n	800904e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009030:	4b2b      	ldr	r3, [pc, #172]	; (80090e0 <USBD_SetConfig+0x150>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800903a:	4b29      	ldr	r3, [pc, #164]	; (80090e0 <USBD_SetConfig+0x150>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe ffd6 	bl	8007ff2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa06 	bl	8009458 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800904c:	e042      	b.n	80090d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <USBD_SetConfig+0x150>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d02a      	beq.n	80090b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ffc4 	bl	8007ff2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800906a:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <USBD_SetConfig+0x150>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009074:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <USBD_SetConfig+0x150>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7fe ff9d 	bl	8007fba <USBD_SetClassConfig>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00f      	beq.n	80090aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f918 	bl	80092c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7fe ffa9 	bl	8007ff2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80090a8:	e014      	b.n	80090d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9d4 	bl	8009458 <USBD_CtlSendStatus>
      break;
 80090b0:	e010      	b.n	80090d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9d0 	bl	8009458 <USBD_CtlSendStatus>
      break;
 80090b8:	e00c      	b.n	80090d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f900 	bl	80092c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090c2:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <USBD_SetConfig+0x150>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7fe ff92 	bl	8007ff2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090ce:	2303      	movs	r3, #3
 80090d0:	73fb      	strb	r3, [r7, #15]
      break;
 80090d2:	bf00      	nop
  }

  return ret;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	200003c0 	.word	0x200003c0

080090e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d004      	beq.n	8009100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f8e2 	bl	80092c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090fe:	e023      	b.n	8009148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	dc02      	bgt.n	8009112 <USBD_GetConfig+0x2e>
 800910c:	2b00      	cmp	r3, #0
 800910e:	dc03      	bgt.n	8009118 <USBD_GetConfig+0x34>
 8009110:	e015      	b.n	800913e <USBD_GetConfig+0x5a>
 8009112:	2b03      	cmp	r3, #3
 8009114:	d00b      	beq.n	800912e <USBD_GetConfig+0x4a>
 8009116:	e012      	b.n	800913e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3308      	adds	r3, #8
 8009122:	2201      	movs	r2, #1
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f93c 	bl	80093a4 <USBD_CtlSendData>
        break;
 800912c:	e00c      	b.n	8009148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3304      	adds	r3, #4
 8009132:	2201      	movs	r2, #1
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f934 	bl	80093a4 <USBD_CtlSendData>
        break;
 800913c:	e004      	b.n	8009148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f8be 	bl	80092c2 <USBD_CtlError>
        break;
 8009146:	bf00      	nop
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	2b02      	cmp	r3, #2
 8009166:	d81e      	bhi.n	80091a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88db      	ldrh	r3, [r3, #6]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d004      	beq.n	800917a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f8a5 	bl	80092c2 <USBD_CtlError>
        break;
 8009178:	e01a      	b.n	80091b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f043 0202 	orr.w	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	330c      	adds	r3, #12
 800919a:	2202      	movs	r2, #2
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f900 	bl	80093a4 <USBD_CtlSendData>
      break;
 80091a4:	e004      	b.n	80091b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f88a 	bl	80092c2 <USBD_CtlError>
      break;
 80091ae:	bf00      	nop
  }
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	885b      	ldrh	r3, [r3, #2]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d107      	bne.n	80091da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f940 	bl	8009458 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091d8:	e013      	b.n	8009202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d10b      	bne.n	80091fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	889b      	ldrh	r3, [r3, #4]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f930 	bl	8009458 <USBD_CtlSendStatus>
}
 80091f8:	e003      	b.n	8009202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f860 	bl	80092c2 <USBD_CtlError>
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921a:	b2db      	uxtb	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	2b02      	cmp	r3, #2
 8009220:	d80b      	bhi.n	800923a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d10c      	bne.n	8009244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f910 	bl	8009458 <USBD_CtlSendStatus>
      }
      break;
 8009238:	e004      	b.n	8009244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f840 	bl	80092c2 <USBD_CtlError>
      break;
 8009242:	e000      	b.n	8009246 <USBD_ClrFeature+0x3c>
      break;
 8009244:	bf00      	nop
  }
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	781a      	ldrb	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fa41 	bl	8008700 <SWAPBYTE>
 800927e:	4603      	mov	r3, r0
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3301      	adds	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff fa34 	bl	8008700 <SWAPBYTE>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff fa27 	bl	8008700 <SWAPBYTE>
 80092b2:	4603      	mov	r3, r0
 80092b4:	461a      	mov	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	80da      	strh	r2, [r3, #6]
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092cc:	2180      	movs	r1, #128	; 0x80
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fcfc 	bl	8009ccc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092d4:	2100      	movs	r1, #0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fcf8 	bl	8009ccc <USBD_LL_StallEP>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d036      	beq.n	8009368 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f000 f836 	bl	8009370 <USBD_GetLen>
 8009304:	4603      	mov	r3, r0
 8009306:	3301      	adds	r3, #1
 8009308:	b29b      	uxth	r3, r3
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	4413      	add	r3, r2
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	701a      	strb	r2, [r3, #0]
  idx++;
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	3301      	adds	r3, #1
 8009322:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	4413      	add	r3, r2
 800932a:	2203      	movs	r2, #3
 800932c:	701a      	strb	r2, [r3, #0]
  idx++;
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	3301      	adds	r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009334:	e013      	b.n	800935e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	4413      	add	r3, r2
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3301      	adds	r3, #1
 8009346:	613b      	str	r3, [r7, #16]
    idx++;
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	3301      	adds	r3, #1
 800934c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
    idx++;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	3301      	adds	r3, #1
 800935c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e7      	bne.n	8009336 <USBD_GetString+0x52>
 8009366:	e000      	b.n	800936a <USBD_GetString+0x86>
    return;
 8009368:	bf00      	nop
  }
}
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009380:	e005      	b.n	800938e <USBD_GetLen+0x1e>
  {
    len++;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	3301      	adds	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3301      	adds	r3, #1
 800938c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f5      	bne.n	8009382 <USBD_GetLen+0x12>
  }

  return len;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	2100      	movs	r1, #0
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 fd07 	bl	8009dde <USBD_LL_Transmit>

  return USBD_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	2100      	movs	r1, #0
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 fcf6 	bl	8009dde <USBD_LL_Transmit>

  return USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2203      	movs	r2, #3
 800940c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	2100      	movs	r1, #0
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fcfa 	bl	8009e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	2100      	movs	r1, #0
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 fce9 	bl	8009e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2204      	movs	r2, #4
 8009464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009468:	2300      	movs	r3, #0
 800946a:	2200      	movs	r2, #0
 800946c:	2100      	movs	r1, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fcb5 	bl	8009dde <USBD_LL_Transmit>

  return USBD_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2205      	movs	r2, #5
 800948a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948e:	2300      	movs	r3, #0
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fcc3 	bl	8009e20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094a8:	2200      	movs	r2, #0
 80094aa:	4912      	ldr	r1, [pc, #72]	; (80094f4 <MX_USB_DEVICE_Init+0x50>)
 80094ac:	4812      	ldr	r0, [pc, #72]	; (80094f8 <MX_USB_DEVICE_Init+0x54>)
 80094ae:	f7fe fd07 	bl	8007ec0 <USBD_Init>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094b8:	f7f7 ff0c 	bl	80012d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094bc:	490f      	ldr	r1, [pc, #60]	; (80094fc <MX_USB_DEVICE_Init+0x58>)
 80094be:	480e      	ldr	r0, [pc, #56]	; (80094f8 <MX_USB_DEVICE_Init+0x54>)
 80094c0:	f7fe fd2e 	bl	8007f20 <USBD_RegisterClass>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094ca:	f7f7 ff03 	bl	80012d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094ce:	490c      	ldr	r1, [pc, #48]	; (8009500 <MX_USB_DEVICE_Init+0x5c>)
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <MX_USB_DEVICE_Init+0x54>)
 80094d2:	f7fe fc65 	bl	8007da0 <USBD_CDC_RegisterInterface>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094dc:	f7f7 fefa 	bl	80012d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094e0:	4805      	ldr	r0, [pc, #20]	; (80094f8 <MX_USB_DEVICE_Init+0x54>)
 80094e2:	f7fe fd53 	bl	8007f8c <USBD_Start>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094ec:	f7f7 fef2 	bl	80012d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094f0:	bf00      	nop
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	200000d8 	.word	0x200000d8
 80094f8:	200003c4 	.word	0x200003c4
 80094fc:	20000040 	.word	0x20000040
 8009500:	200000c0 	.word	0x200000c0

08009504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	4905      	ldr	r1, [pc, #20]	; (8009520 <CDC_Init_FS+0x1c>)
 800950c:	4805      	ldr	r0, [pc, #20]	; (8009524 <CDC_Init_FS+0x20>)
 800950e:	f7fe fc61 	bl	8007dd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009512:	4905      	ldr	r1, [pc, #20]	; (8009528 <CDC_Init_FS+0x24>)
 8009514:	4803      	ldr	r0, [pc, #12]	; (8009524 <CDC_Init_FS+0x20>)
 8009516:	f7fe fc7f 	bl	8007e18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800951a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800951c:	4618      	mov	r0, r3
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000ea0 	.word	0x20000ea0
 8009524:	200003c4 	.word	0x200003c4
 8009528:	200006a0 	.word	0x200006a0

0800952c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009532:	4618      	mov	r0, r3
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	6039      	str	r1, [r7, #0]
 8009546:	71fb      	strb	r3, [r7, #7]
 8009548:	4613      	mov	r3, r2
 800954a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	2b23      	cmp	r3, #35	; 0x23
 8009550:	d84a      	bhi.n	80095e8 <CDC_Control_FS+0xac>
 8009552:	a201      	add	r2, pc, #4	; (adr r2, 8009558 <CDC_Control_FS+0x1c>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	080095e9 	.word	0x080095e9
 800955c:	080095e9 	.word	0x080095e9
 8009560:	080095e9 	.word	0x080095e9
 8009564:	080095e9 	.word	0x080095e9
 8009568:	080095e9 	.word	0x080095e9
 800956c:	080095e9 	.word	0x080095e9
 8009570:	080095e9 	.word	0x080095e9
 8009574:	080095e9 	.word	0x080095e9
 8009578:	080095e9 	.word	0x080095e9
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080095e9 	.word	0x080095e9
 8009584:	080095e9 	.word	0x080095e9
 8009588:	080095e9 	.word	0x080095e9
 800958c:	080095e9 	.word	0x080095e9
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095e9 	.word	0x080095e9
 8009598:	080095e9 	.word	0x080095e9
 800959c:	080095e9 	.word	0x080095e9
 80095a0:	080095e9 	.word	0x080095e9
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095e9 	.word	0x080095e9
 80095ac:	080095e9 	.word	0x080095e9
 80095b0:	080095e9 	.word	0x080095e9
 80095b4:	080095e9 	.word	0x080095e9
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080095e9 	.word	0x080095e9
 80095c0:	080095e9 	.word	0x080095e9
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	080095e9 	.word	0x080095e9
 80095d0:	080095e9 	.word	0x080095e9
 80095d4:	080095e9 	.word	0x080095e9
 80095d8:	080095e9 	.word	0x080095e9
 80095dc:	080095e9 	.word	0x080095e9
 80095e0:	080095e9 	.word	0x080095e9
 80095e4:	080095e9 	.word	0x080095e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095e8:	bf00      	nop
  }

  return (USBD_OK);
 80095ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  static char charAccumulator[25];
  static uint8_t lastCharPos = 25-1;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	481d      	ldr	r0, [pc, #116]	; (800967c <CDC_Receive_FS+0x84>)
 8009606:	f7fe fc07 	bl	8007e18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800960a:	481c      	ldr	r0, [pc, #112]	; (800967c <CDC_Receive_FS+0x84>)
 800960c:	f7fe fc22 	bl	8007e54 <USBD_CDC_ReceivePacket>

  for (uint8_t c = 0; c < *Len; c++) {
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
 8009614:	e028      	b.n	8009668 <CDC_Receive_FS+0x70>
  	  // increment the lastCharPos, wrapping if necessary
  	  if(Buf[c] == '\n') {
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	4413      	add	r3, r2
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b0a      	cmp	r3, #10
 8009620:	d10a      	bne.n	8009638 <CDC_Receive_FS+0x40>
  		  commandReceived(charAccumulator, lastCharPos+1);
 8009622:	4b17      	ldr	r3, [pc, #92]	; (8009680 <CDC_Receive_FS+0x88>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	4619      	mov	r1, r3
 800962a:	4816      	ldr	r0, [pc, #88]	; (8009684 <CDC_Receive_FS+0x8c>)
 800962c:	f7f8 fab2 	bl	8001b94 <commandReceived>
  		  lastCharPos = 25-1;
 8009630:	4b13      	ldr	r3, [pc, #76]	; (8009680 <CDC_Receive_FS+0x88>)
 8009632:	2218      	movs	r2, #24
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	e014      	b.n	8009662 <CDC_Receive_FS+0x6a>
  	  }
  	  else
  	  {
  		  if (++lastCharPos == 25)
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <CDC_Receive_FS+0x88>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <CDC_Receive_FS+0x88>)
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <CDC_Receive_FS+0x88>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b19      	cmp	r3, #25
 800964a:	d102      	bne.n	8009652 <CDC_Receive_FS+0x5a>
  			  lastCharPos = 0;
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <CDC_Receive_FS+0x88>)
 800964e:	2200      	movs	r2, #0
 8009650:	701a      	strb	r2, [r3, #0]
  		  charAccumulator[lastCharPos] = Buf[c];
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	4413      	add	r3, r2
 8009658:	4a09      	ldr	r2, [pc, #36]	; (8009680 <CDC_Receive_FS+0x88>)
 800965a:	7812      	ldrb	r2, [r2, #0]
 800965c:	7819      	ldrb	r1, [r3, #0]
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <CDC_Receive_FS+0x8c>)
 8009660:	5499      	strb	r1, [r3, r2]
  for (uint8_t c = 0; c < *Len; c++) {
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	3301      	adds	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	7bfa      	ldrb	r2, [r7, #15]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	429a      	cmp	r2, r3
 8009670:	d3d1      	bcc.n	8009616 <CDC_Receive_FS+0x1e>
  	  }
    }

  return (USBD_OK);
 8009672:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	200003c4 	.word	0x200003c4
 8009680:	200000d4 	.word	0x200000d4
 8009684:	200016a0 	.word	0x200016a0

08009688 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800969a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2212      	movs	r2, #18
 80096bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096be:	4b03      	ldr	r3, [pc, #12]	; (80096cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	200000f4 	.word	0x200000f4

080096d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2204      	movs	r2, #4
 80096e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096e2:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000108 	.word	0x20000108

080096f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	6039      	str	r1, [r7, #0]
 80096fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4907      	ldr	r1, [pc, #28]	; (8009728 <USBD_FS_ProductStrDescriptor+0x34>)
 800970a:	4808      	ldr	r0, [pc, #32]	; (800972c <USBD_FS_ProductStrDescriptor+0x38>)
 800970c:	f7ff fdea 	bl	80092e4 <USBD_GetString>
 8009710:	e004      	b.n	800971c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4904      	ldr	r1, [pc, #16]	; (8009728 <USBD_FS_ProductStrDescriptor+0x34>)
 8009716:	4805      	ldr	r0, [pc, #20]	; (800972c <USBD_FS_ProductStrDescriptor+0x38>)
 8009718:	f7ff fde4 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	200016bc 	.word	0x200016bc
 800972c:	0800abc8 	.word	0x0800abc8

08009730 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	4904      	ldr	r1, [pc, #16]	; (8009750 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009740:	4804      	ldr	r0, [pc, #16]	; (8009754 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009742:	f7ff fdcf 	bl	80092e4 <USBD_GetString>
  return USBD_StrDesc;
 8009746:	4b02      	ldr	r3, [pc, #8]	; (8009750 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	200016bc 	.word	0x200016bc
 8009754:	0800abe0 	.word	0x0800abe0

08009758 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	221a      	movs	r2, #26
 8009768:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800976a:	f000 f843 	bl	80097f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800976e:	4b02      	ldr	r3, [pc, #8]	; (8009778 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	2000010c 	.word	0x2000010c

0800977c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d105      	bne.n	800979a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4907      	ldr	r1, [pc, #28]	; (80097b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009792:	4808      	ldr	r0, [pc, #32]	; (80097b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009794:	f7ff fda6 	bl	80092e4 <USBD_GetString>
 8009798:	e004      	b.n	80097a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	4904      	ldr	r1, [pc, #16]	; (80097b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800979e:	4805      	ldr	r0, [pc, #20]	; (80097b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097a0:	f7ff fda0 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	200016bc 	.word	0x200016bc
 80097b4:	0800abf4 	.word	0x0800abf4

080097b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4907      	ldr	r1, [pc, #28]	; (80097ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097ce:	4808      	ldr	r0, [pc, #32]	; (80097f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097d0:	f7ff fd88 	bl	80092e4 <USBD_GetString>
 80097d4:	e004      	b.n	80097e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4904      	ldr	r1, [pc, #16]	; (80097ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097da:	4805      	ldr	r0, [pc, #20]	; (80097f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097dc:	f7ff fd82 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200016bc 	.word	0x200016bc
 80097f0:	0800ac00 	.word	0x0800ac00

080097f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <Get_SerialNum+0x44>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <Get_SerialNum+0x48>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <Get_SerialNum+0x4c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4413      	add	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800981a:	2208      	movs	r2, #8
 800981c:	4909      	ldr	r1, [pc, #36]	; (8009844 <Get_SerialNum+0x50>)
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f814 	bl	800984c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009824:	2204      	movs	r2, #4
 8009826:	4908      	ldr	r1, [pc, #32]	; (8009848 <Get_SerialNum+0x54>)
 8009828:	68b8      	ldr	r0, [r7, #8]
 800982a:	f000 f80f 	bl	800984c <IntToUnicode>
  }
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	1fff7a10 	.word	0x1fff7a10
 800983c:	1fff7a14 	.word	0x1fff7a14
 8009840:	1fff7a18 	.word	0x1fff7a18
 8009844:	2000010e 	.word	0x2000010e
 8009848:	2000011e 	.word	0x2000011e

0800984c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
 8009862:	e027      	b.n	80098b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	0f1b      	lsrs	r3, r3, #28
 8009868:	2b09      	cmp	r3, #9
 800986a:	d80b      	bhi.n	8009884 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	0f1b      	lsrs	r3, r3, #28
 8009870:	b2da      	uxtb	r2, r3
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4619      	mov	r1, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	440b      	add	r3, r1
 800987c:	3230      	adds	r2, #48	; 0x30
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	e00a      	b.n	800989a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0f1b      	lsrs	r3, r3, #28
 8009888:	b2da      	uxtb	r2, r3
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	4619      	mov	r1, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	440b      	add	r3, r1
 8009894:	3237      	adds	r2, #55	; 0x37
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	3301      	adds	r3, #1
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	3301      	adds	r3, #1
 80098b2:	75fb      	strb	r3, [r7, #23]
 80098b4:	7dfa      	ldrb	r2, [r7, #23]
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d3d3      	bcc.n	8009864 <IntToUnicode+0x18>
  }
}
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	; 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098d4:	f107 0314 	add.w	r3, r7, #20
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	609a      	str	r2, [r3, #8]
 80098e0:	60da      	str	r2, [r3, #12]
 80098e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ec:	d147      	bne.n	800997e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ee:	2300      	movs	r3, #0
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	4b25      	ldr	r3, [pc, #148]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	4a24      	ldr	r2, [pc, #144]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 80098f8:	f043 0301 	orr.w	r3, r3, #1
 80098fc:	6313      	str	r3, [r2, #48]	; 0x30
 80098fe:	4b22      	ldr	r3, [pc, #136]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800990a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800990e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009910:	2300      	movs	r3, #0
 8009912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009918:	f107 0314 	add.w	r3, r7, #20
 800991c:	4619      	mov	r1, r3
 800991e:	481b      	ldr	r0, [pc, #108]	; (800998c <HAL_PCD_MspInit+0xc0>)
 8009920:	f7f9 f95e 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009924:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800992a:	2302      	movs	r3, #2
 800992c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992e:	2300      	movs	r3, #0
 8009930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009932:	2303      	movs	r3, #3
 8009934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009936:	230a      	movs	r3, #10
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800993a:	f107 0314 	add.w	r3, r7, #20
 800993e:	4619      	mov	r1, r3
 8009940:	4812      	ldr	r0, [pc, #72]	; (800998c <HAL_PCD_MspInit+0xc0>)
 8009942:	f7f9 f94d 	bl	8002be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	4a0f      	ldr	r2, [pc, #60]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 800994c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009950:	6353      	str	r3, [r2, #52]	; 0x34
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 8009958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995a:	4a0b      	ldr	r2, [pc, #44]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 800995c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009960:	6453      	str	r3, [r2, #68]	; 0x44
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <HAL_PCD_MspInit+0xbc>)
 8009964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	2043      	movs	r0, #67	; 0x43
 8009974:	f7f8 ff8d 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009978:	2043      	movs	r0, #67	; 0x43
 800997a:	f7f8 ffa6 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800997e:	bf00      	nop
 8009980:	3728      	adds	r7, #40	; 0x28
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40023800 	.word	0x40023800
 800998c:	40020000 	.word	0x40020000

08009990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f7fe fb3d 	bl	8008026 <USBD_LL_SetupStage>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	440b      	add	r3, r1
 80099d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	4619      	mov	r1, r3
 80099de:	f7fe fb77 	bl	80080d0 <USBD_LL_DataOutStage>
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	334c      	adds	r3, #76	; 0x4c
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	4619      	mov	r1, r3
 8009a12:	f7fe fc10 	bl	8008236 <USBD_LL_DataInStage>
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fd44 	bl	80084ba <USBD_LL_SOF>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d102      	bne.n	8009a54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
 8009a52:	e008      	b.n	8009a66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d102      	bne.n	8009a62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	e001      	b.n	8009a66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009a62:	f7f7 fc37 	bl	80012d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a6c:	7bfa      	ldrb	r2, [r7, #15]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fce4 	bl	800843e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fc8c 	bl	800839a <USBD_LL_Reset>
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fcdf 	bl	800845e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6812      	ldr	r2, [r2, #0]
 8009aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ab2:	f043 0301 	orr.w	r3, r3, #1
 8009ab6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ac0:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <HAL_PCD_SuspendCallback+0x48>)
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	4a03      	ldr	r2, [pc, #12]	; (8009ad4 <HAL_PCD_SuspendCallback+0x48>)
 8009ac6:	f043 0306 	orr.w	r3, r3, #6
 8009aca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	e000ed00 	.word	0xe000ed00

08009ad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fccf 	bl	800848a <USBD_LL_Resume>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b06:	78fa      	ldrb	r2, [r7, #3]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fd27 	bl	800855e <USBD_LL_IsoOUTIncomplete>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b2a:	78fa      	ldrb	r2, [r7, #3]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fe fce3 	bl	80084fa <USBD_LL_IsoINIncomplete>
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fd39 	bl	80085c2 <USBD_LL_DevConnected>
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fd36 	bl	80085d8 <USBD_LL_DevDisconnected>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d13c      	bne.n	8009bfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b84:	4a20      	ldr	r2, [pc, #128]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1e      	ldr	r2, [pc, #120]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b94:	4b1c      	ldr	r3, [pc, #112]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <USBD_LL_Init+0x94>)
 8009b9e:	2204      	movs	r2, #4
 8009ba0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ba2:	4b19      	ldr	r3, [pc, #100]	; (8009c08 <USBD_LL_Init+0x94>)
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ba8:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <USBD_LL_Init+0x94>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bae:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009bb4:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009bba:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009bc6:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009bd2:	480d      	ldr	r0, [pc, #52]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bd4:	f7f9 f9ea 	bl	8002fac <HAL_PCD_Init>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009bde:	f7f7 fb79 	bl	80012d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009be2:	2180      	movs	r1, #128	; 0x80
 8009be4:	4808      	ldr	r0, [pc, #32]	; (8009c08 <USBD_LL_Init+0x94>)
 8009be6:	f7fa fc42 	bl	800446e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009bea:	2240      	movs	r2, #64	; 0x40
 8009bec:	2100      	movs	r1, #0
 8009bee:	4806      	ldr	r0, [pc, #24]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bf0:	f7fa fbf6 	bl	80043e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bf4:	2280      	movs	r2, #128	; 0x80
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4803      	ldr	r0, [pc, #12]	; (8009c08 <USBD_LL_Init+0x94>)
 8009bfa:	f7fa fbf1 	bl	80043e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	200018bc 	.word	0x200018bc

08009c0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7f9 fadf 	bl	80031e6 <HAL_PCD_Start>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f942 	bl	8009eb8 <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4603      	mov	r3, r0
 8009c52:	70fb      	strb	r3, [r7, #3]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70bb      	strb	r3, [r7, #2]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c6a:	78bb      	ldrb	r3, [r7, #2]
 8009c6c:	883a      	ldrh	r2, [r7, #0]
 8009c6e:	78f9      	ldrb	r1, [r7, #3]
 8009c70:	f7f9 ffb0 	bl	8003bd4 <HAL_PCD_EP_Open>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f91c 	bl	8009eb8 <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	4611      	mov	r1, r2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f9 fff9 	bl	8003ca4 <HAL_PCD_EP_Close>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f8fd 	bl	8009eb8 <USBD_Get_USB_Status>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fa f8d1 	bl	8003e92 <HAL_PCD_EP_SetStall>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f8de 	bl	8009eb8 <USBD_Get_USB_Status>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fa f916 	bl	8003f5a <HAL_PCD_EP_ClrStall>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f8bf 	bl	8009eb8 <USBD_Get_USB_Status>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da0b      	bge.n	8009d7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	333e      	adds	r3, #62	; 0x3e
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	e00b      	b.n	8009d94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	4613      	mov	r3, r2
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dba:	78fa      	ldrb	r2, [r7, #3]
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7f9 fee3 	bl	8003b8a <HAL_PCD_SetAddress>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 f874 	bl	8009eb8 <USBD_Get_USB_Status>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
 8009dea:	460b      	mov	r3, r1
 8009dec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009dfc:	7af9      	ldrb	r1, [r7, #11]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	f7f9 fffc 	bl	8003dfe <HAL_PCD_EP_Transmit>
 8009e06:	4603      	mov	r3, r0
 8009e08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 f853 	bl	8009eb8 <USBD_Get_USB_Status>
 8009e12:	4603      	mov	r3, r0
 8009e14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e16:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e3e:	7af9      	ldrb	r1, [r7, #11]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	f7f9 ff78 	bl	8003d38 <HAL_PCD_EP_Receive>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f832 	bl	8009eb8 <USBD_Get_USB_Status>
 8009e54:	4603      	mov	r3, r0
 8009e56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e58:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7f9 ffa8 	bl	8003dce <HAL_PCD_EP_GetRxCount>
 8009e7e:	4603      	mov	r3, r0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e90:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <USBD_static_malloc+0x18>)
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20001dc8 	.word	0x20001dc8

08009ea4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]

}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	2b03      	cmp	r3, #3
 8009eca:	d817      	bhi.n	8009efc <USBD_Get_USB_Status+0x44>
 8009ecc:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <USBD_Get_USB_Status+0x1c>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009eeb 	.word	0x08009eeb
 8009edc:	08009ef1 	.word	0x08009ef1
 8009ee0:	08009ef7 	.word	0x08009ef7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee8:	e00b      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eea:	2303      	movs	r3, #3
 8009eec:	73fb      	strb	r3, [r7, #15]
    break;
 8009eee:	e008      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef4:	e005      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8009efa:	e002      	b.n	8009f02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009efc:	2303      	movs	r3, #3
 8009efe:	73fb      	strb	r3, [r7, #15]
    break;
 8009f00:	bf00      	nop
  }
  return usb_status;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <siscanf>:
 8009f10:	b40e      	push	{r1, r2, r3}
 8009f12:	b510      	push	{r4, lr}
 8009f14:	b09f      	sub	sp, #124	; 0x7c
 8009f16:	ac21      	add	r4, sp, #132	; 0x84
 8009f18:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009f1c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009f26:	9004      	str	r0, [sp, #16]
 8009f28:	9008      	str	r0, [sp, #32]
 8009f2a:	f7f6 f95b 	bl	80001e4 <strlen>
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <siscanf+0x50>)
 8009f30:	9005      	str	r0, [sp, #20]
 8009f32:	9009      	str	r0, [sp, #36]	; 0x24
 8009f34:	930d      	str	r3, [sp, #52]	; 0x34
 8009f36:	480b      	ldr	r0, [pc, #44]	; (8009f64 <siscanf+0x54>)
 8009f38:	9a01      	ldr	r2, [sp, #4]
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	9403      	str	r4, [sp, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9311      	str	r3, [sp, #68]	; 0x44
 8009f42:	9316      	str	r3, [sp, #88]	; 0x58
 8009f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f4c:	a904      	add	r1, sp, #16
 8009f4e:	4623      	mov	r3, r4
 8009f50:	f000 f992 	bl	800a278 <__ssvfiscanf_r>
 8009f54:	b01f      	add	sp, #124	; 0x7c
 8009f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f5a:	b003      	add	sp, #12
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	08009f69 	.word	0x08009f69
 8009f64:	20000174 	.word	0x20000174

08009f68 <__seofread>:
 8009f68:	2000      	movs	r0, #0
 8009f6a:	4770      	bx	lr

08009f6c <memset>:
 8009f6c:	4402      	add	r2, r0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d100      	bne.n	8009f76 <memset+0xa>
 8009f74:	4770      	bx	lr
 8009f76:	f803 1b01 	strb.w	r1, [r3], #1
 8009f7a:	e7f9      	b.n	8009f70 <memset+0x4>

08009f7c <__errno>:
 8009f7c:	4b01      	ldr	r3, [pc, #4]	; (8009f84 <__errno+0x8>)
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20000174 	.word	0x20000174

08009f88 <__libc_init_array>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	4d0d      	ldr	r5, [pc, #52]	; (8009fc0 <__libc_init_array+0x38>)
 8009f8c:	4c0d      	ldr	r4, [pc, #52]	; (8009fc4 <__libc_init_array+0x3c>)
 8009f8e:	1b64      	subs	r4, r4, r5
 8009f90:	10a4      	asrs	r4, r4, #2
 8009f92:	2600      	movs	r6, #0
 8009f94:	42a6      	cmp	r6, r4
 8009f96:	d109      	bne.n	8009fac <__libc_init_array+0x24>
 8009f98:	4d0b      	ldr	r5, [pc, #44]	; (8009fc8 <__libc_init_array+0x40>)
 8009f9a:	4c0c      	ldr	r4, [pc, #48]	; (8009fcc <__libc_init_array+0x44>)
 8009f9c:	f000 fdf4 	bl	800ab88 <_init>
 8009fa0:	1b64      	subs	r4, r4, r5
 8009fa2:	10a4      	asrs	r4, r4, #2
 8009fa4:	2600      	movs	r6, #0
 8009fa6:	42a6      	cmp	r6, r4
 8009fa8:	d105      	bne.n	8009fb6 <__libc_init_array+0x2e>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb0:	4798      	blx	r3
 8009fb2:	3601      	adds	r6, #1
 8009fb4:	e7ee      	b.n	8009f94 <__libc_init_array+0xc>
 8009fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fba:	4798      	blx	r3
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	e7f2      	b.n	8009fa6 <__libc_init_array+0x1e>
 8009fc0:	0800ad5c 	.word	0x0800ad5c
 8009fc4:	0800ad5c 	.word	0x0800ad5c
 8009fc8:	0800ad5c 	.word	0x0800ad5c
 8009fcc:	0800ad60 	.word	0x0800ad60

08009fd0 <__retarget_lock_acquire_recursive>:
 8009fd0:	4770      	bx	lr

08009fd2 <__retarget_lock_release_recursive>:
 8009fd2:	4770      	bx	lr

08009fd4 <_free_r>:
 8009fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fd6:	2900      	cmp	r1, #0
 8009fd8:	d044      	beq.n	800a064 <_free_r+0x90>
 8009fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fde:	9001      	str	r0, [sp, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f1a1 0404 	sub.w	r4, r1, #4
 8009fe6:	bfb8      	it	lt
 8009fe8:	18e4      	addlt	r4, r4, r3
 8009fea:	f000 f8df 	bl	800a1ac <__malloc_lock>
 8009fee:	4a1e      	ldr	r2, [pc, #120]	; (800a068 <_free_r+0x94>)
 8009ff0:	9801      	ldr	r0, [sp, #4]
 8009ff2:	6813      	ldr	r3, [r2, #0]
 8009ff4:	b933      	cbnz	r3, 800a004 <_free_r+0x30>
 8009ff6:	6063      	str	r3, [r4, #4]
 8009ff8:	6014      	str	r4, [r2, #0]
 8009ffa:	b003      	add	sp, #12
 8009ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a000:	f000 b8da 	b.w	800a1b8 <__malloc_unlock>
 800a004:	42a3      	cmp	r3, r4
 800a006:	d908      	bls.n	800a01a <_free_r+0x46>
 800a008:	6825      	ldr	r5, [r4, #0]
 800a00a:	1961      	adds	r1, r4, r5
 800a00c:	428b      	cmp	r3, r1
 800a00e:	bf01      	itttt	eq
 800a010:	6819      	ldreq	r1, [r3, #0]
 800a012:	685b      	ldreq	r3, [r3, #4]
 800a014:	1949      	addeq	r1, r1, r5
 800a016:	6021      	streq	r1, [r4, #0]
 800a018:	e7ed      	b.n	8009ff6 <_free_r+0x22>
 800a01a:	461a      	mov	r2, r3
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b10b      	cbz	r3, 800a024 <_free_r+0x50>
 800a020:	42a3      	cmp	r3, r4
 800a022:	d9fa      	bls.n	800a01a <_free_r+0x46>
 800a024:	6811      	ldr	r1, [r2, #0]
 800a026:	1855      	adds	r5, r2, r1
 800a028:	42a5      	cmp	r5, r4
 800a02a:	d10b      	bne.n	800a044 <_free_r+0x70>
 800a02c:	6824      	ldr	r4, [r4, #0]
 800a02e:	4421      	add	r1, r4
 800a030:	1854      	adds	r4, r2, r1
 800a032:	42a3      	cmp	r3, r4
 800a034:	6011      	str	r1, [r2, #0]
 800a036:	d1e0      	bne.n	8009ffa <_free_r+0x26>
 800a038:	681c      	ldr	r4, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	6053      	str	r3, [r2, #4]
 800a03e:	440c      	add	r4, r1
 800a040:	6014      	str	r4, [r2, #0]
 800a042:	e7da      	b.n	8009ffa <_free_r+0x26>
 800a044:	d902      	bls.n	800a04c <_free_r+0x78>
 800a046:	230c      	movs	r3, #12
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	e7d6      	b.n	8009ffa <_free_r+0x26>
 800a04c:	6825      	ldr	r5, [r4, #0]
 800a04e:	1961      	adds	r1, r4, r5
 800a050:	428b      	cmp	r3, r1
 800a052:	bf04      	itt	eq
 800a054:	6819      	ldreq	r1, [r3, #0]
 800a056:	685b      	ldreq	r3, [r3, #4]
 800a058:	6063      	str	r3, [r4, #4]
 800a05a:	bf04      	itt	eq
 800a05c:	1949      	addeq	r1, r1, r5
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	6054      	str	r4, [r2, #4]
 800a062:	e7ca      	b.n	8009ffa <_free_r+0x26>
 800a064:	b003      	add	sp, #12
 800a066:	bd30      	pop	{r4, r5, pc}
 800a068:	20002128 	.word	0x20002128

0800a06c <sbrk_aligned>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4e0e      	ldr	r6, [pc, #56]	; (800a0a8 <sbrk_aligned+0x3c>)
 800a070:	460c      	mov	r4, r1
 800a072:	6831      	ldr	r1, [r6, #0]
 800a074:	4605      	mov	r5, r0
 800a076:	b911      	cbnz	r1, 800a07e <sbrk_aligned+0x12>
 800a078:	f000 fc38 	bl	800a8ec <_sbrk_r>
 800a07c:	6030      	str	r0, [r6, #0]
 800a07e:	4621      	mov	r1, r4
 800a080:	4628      	mov	r0, r5
 800a082:	f000 fc33 	bl	800a8ec <_sbrk_r>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d00a      	beq.n	800a0a0 <sbrk_aligned+0x34>
 800a08a:	1cc4      	adds	r4, r0, #3
 800a08c:	f024 0403 	bic.w	r4, r4, #3
 800a090:	42a0      	cmp	r0, r4
 800a092:	d007      	beq.n	800a0a4 <sbrk_aligned+0x38>
 800a094:	1a21      	subs	r1, r4, r0
 800a096:	4628      	mov	r0, r5
 800a098:	f000 fc28 	bl	800a8ec <_sbrk_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	d101      	bne.n	800a0a4 <sbrk_aligned+0x38>
 800a0a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	2000212c 	.word	0x2000212c

0800a0ac <_malloc_r>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	1ccd      	adds	r5, r1, #3
 800a0b2:	f025 0503 	bic.w	r5, r5, #3
 800a0b6:	3508      	adds	r5, #8
 800a0b8:	2d0c      	cmp	r5, #12
 800a0ba:	bf38      	it	cc
 800a0bc:	250c      	movcc	r5, #12
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	db01      	blt.n	800a0c8 <_malloc_r+0x1c>
 800a0c4:	42a9      	cmp	r1, r5
 800a0c6:	d905      	bls.n	800a0d4 <_malloc_r+0x28>
 800a0c8:	230c      	movs	r3, #12
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	2600      	movs	r6, #0
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a1a8 <_malloc_r+0xfc>
 800a0d8:	f000 f868 	bl	800a1ac <__malloc_lock>
 800a0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e0:	461c      	mov	r4, r3
 800a0e2:	bb5c      	cbnz	r4, 800a13c <_malloc_r+0x90>
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f7ff ffc0 	bl	800a06c <sbrk_aligned>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	d155      	bne.n	800a19e <_malloc_r+0xf2>
 800a0f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a0f6:	4626      	mov	r6, r4
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	d145      	bne.n	800a188 <_malloc_r+0xdc>
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d048      	beq.n	800a192 <_malloc_r+0xe6>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	4631      	mov	r1, r6
 800a104:	4638      	mov	r0, r7
 800a106:	eb04 0903 	add.w	r9, r4, r3
 800a10a:	f000 fbef 	bl	800a8ec <_sbrk_r>
 800a10e:	4581      	cmp	r9, r0
 800a110:	d13f      	bne.n	800a192 <_malloc_r+0xe6>
 800a112:	6821      	ldr	r1, [r4, #0]
 800a114:	1a6d      	subs	r5, r5, r1
 800a116:	4629      	mov	r1, r5
 800a118:	4638      	mov	r0, r7
 800a11a:	f7ff ffa7 	bl	800a06c <sbrk_aligned>
 800a11e:	3001      	adds	r0, #1
 800a120:	d037      	beq.n	800a192 <_malloc_r+0xe6>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	442b      	add	r3, r5
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	f8d8 3000 	ldr.w	r3, [r8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d038      	beq.n	800a1a2 <_malloc_r+0xf6>
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	42a2      	cmp	r2, r4
 800a134:	d12b      	bne.n	800a18e <_malloc_r+0xe2>
 800a136:	2200      	movs	r2, #0
 800a138:	605a      	str	r2, [r3, #4]
 800a13a:	e00f      	b.n	800a15c <_malloc_r+0xb0>
 800a13c:	6822      	ldr	r2, [r4, #0]
 800a13e:	1b52      	subs	r2, r2, r5
 800a140:	d41f      	bmi.n	800a182 <_malloc_r+0xd6>
 800a142:	2a0b      	cmp	r2, #11
 800a144:	d917      	bls.n	800a176 <_malloc_r+0xca>
 800a146:	1961      	adds	r1, r4, r5
 800a148:	42a3      	cmp	r3, r4
 800a14a:	6025      	str	r5, [r4, #0]
 800a14c:	bf18      	it	ne
 800a14e:	6059      	strne	r1, [r3, #4]
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	bf08      	it	eq
 800a154:	f8c8 1000 	streq.w	r1, [r8]
 800a158:	5162      	str	r2, [r4, r5]
 800a15a:	604b      	str	r3, [r1, #4]
 800a15c:	4638      	mov	r0, r7
 800a15e:	f104 060b 	add.w	r6, r4, #11
 800a162:	f000 f829 	bl	800a1b8 <__malloc_unlock>
 800a166:	f026 0607 	bic.w	r6, r6, #7
 800a16a:	1d23      	adds	r3, r4, #4
 800a16c:	1af2      	subs	r2, r6, r3
 800a16e:	d0ae      	beq.n	800a0ce <_malloc_r+0x22>
 800a170:	1b9b      	subs	r3, r3, r6
 800a172:	50a3      	str	r3, [r4, r2]
 800a174:	e7ab      	b.n	800a0ce <_malloc_r+0x22>
 800a176:	42a3      	cmp	r3, r4
 800a178:	6862      	ldr	r2, [r4, #4]
 800a17a:	d1dd      	bne.n	800a138 <_malloc_r+0x8c>
 800a17c:	f8c8 2000 	str.w	r2, [r8]
 800a180:	e7ec      	b.n	800a15c <_malloc_r+0xb0>
 800a182:	4623      	mov	r3, r4
 800a184:	6864      	ldr	r4, [r4, #4]
 800a186:	e7ac      	b.n	800a0e2 <_malloc_r+0x36>
 800a188:	4634      	mov	r4, r6
 800a18a:	6876      	ldr	r6, [r6, #4]
 800a18c:	e7b4      	b.n	800a0f8 <_malloc_r+0x4c>
 800a18e:	4613      	mov	r3, r2
 800a190:	e7cc      	b.n	800a12c <_malloc_r+0x80>
 800a192:	230c      	movs	r3, #12
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	4638      	mov	r0, r7
 800a198:	f000 f80e 	bl	800a1b8 <__malloc_unlock>
 800a19c:	e797      	b.n	800a0ce <_malloc_r+0x22>
 800a19e:	6025      	str	r5, [r4, #0]
 800a1a0:	e7dc      	b.n	800a15c <_malloc_r+0xb0>
 800a1a2:	605b      	str	r3, [r3, #4]
 800a1a4:	deff      	udf	#255	; 0xff
 800a1a6:	bf00      	nop
 800a1a8:	20002128 	.word	0x20002128

0800a1ac <__malloc_lock>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	; (800a1b4 <__malloc_lock+0x8>)
 800a1ae:	f7ff bf0f 	b.w	8009fd0 <__retarget_lock_acquire_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	20002124 	.word	0x20002124

0800a1b8 <__malloc_unlock>:
 800a1b8:	4801      	ldr	r0, [pc, #4]	; (800a1c0 <__malloc_unlock+0x8>)
 800a1ba:	f7ff bf0a 	b.w	8009fd2 <__retarget_lock_release_recursive>
 800a1be:	bf00      	nop
 800a1c0:	20002124 	.word	0x20002124

0800a1c4 <_sungetc_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	1c4b      	adds	r3, r1, #1
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	d103      	bne.n	800a1d4 <_sungetc_r+0x10>
 800a1cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	8993      	ldrh	r3, [r2, #12]
 800a1d6:	f023 0320 	bic.w	r3, r3, #32
 800a1da:	8193      	strh	r3, [r2, #12]
 800a1dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1de:	6852      	ldr	r2, [r2, #4]
 800a1e0:	b2cd      	uxtb	r5, r1
 800a1e2:	b18b      	cbz	r3, 800a208 <_sungetc_r+0x44>
 800a1e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	dd08      	ble.n	800a1fc <_sungetc_r+0x38>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	1e5a      	subs	r2, r3, #1
 800a1ee:	6022      	str	r2, [r4, #0]
 800a1f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a1f4:	6863      	ldr	r3, [r4, #4]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	6063      	str	r3, [r4, #4]
 800a1fa:	e7e9      	b.n	800a1d0 <_sungetc_r+0xc>
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	f000 fb3a 	bl	800a876 <__submore>
 800a202:	2800      	cmp	r0, #0
 800a204:	d0f1      	beq.n	800a1ea <_sungetc_r+0x26>
 800a206:	e7e1      	b.n	800a1cc <_sungetc_r+0x8>
 800a208:	6921      	ldr	r1, [r4, #16]
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	b151      	cbz	r1, 800a224 <_sungetc_r+0x60>
 800a20e:	4299      	cmp	r1, r3
 800a210:	d208      	bcs.n	800a224 <_sungetc_r+0x60>
 800a212:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a216:	42a9      	cmp	r1, r5
 800a218:	d104      	bne.n	800a224 <_sungetc_r+0x60>
 800a21a:	3b01      	subs	r3, #1
 800a21c:	3201      	adds	r2, #1
 800a21e:	6023      	str	r3, [r4, #0]
 800a220:	6062      	str	r2, [r4, #4]
 800a222:	e7d5      	b.n	800a1d0 <_sungetc_r+0xc>
 800a224:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a22c:	6363      	str	r3, [r4, #52]	; 0x34
 800a22e:	2303      	movs	r3, #3
 800a230:	63a3      	str	r3, [r4, #56]	; 0x38
 800a232:	4623      	mov	r3, r4
 800a234:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	2301      	movs	r3, #1
 800a23c:	e7dc      	b.n	800a1f8 <_sungetc_r+0x34>

0800a23e <__ssrefill_r>:
 800a23e:	b510      	push	{r4, lr}
 800a240:	460c      	mov	r4, r1
 800a242:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a244:	b169      	cbz	r1, 800a262 <__ssrefill_r+0x24>
 800a246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a24a:	4299      	cmp	r1, r3
 800a24c:	d001      	beq.n	800a252 <__ssrefill_r+0x14>
 800a24e:	f7ff fec1 	bl	8009fd4 <_free_r>
 800a252:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	2000      	movs	r0, #0
 800a258:	6360      	str	r0, [r4, #52]	; 0x34
 800a25a:	b113      	cbz	r3, 800a262 <__ssrefill_r+0x24>
 800a25c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	bd10      	pop	{r4, pc}
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	2300      	movs	r3, #0
 800a268:	6063      	str	r3, [r4, #4]
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f043 0320 	orr.w	r3, r3, #32
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	f04f 30ff 	mov.w	r0, #4294967295
 800a276:	e7f3      	b.n	800a260 <__ssrefill_r+0x22>

0800a278 <__ssvfiscanf_r>:
 800a278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	460c      	mov	r4, r1
 800a27e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a282:	2100      	movs	r1, #0
 800a284:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a288:	49a6      	ldr	r1, [pc, #664]	; (800a524 <__ssvfiscanf_r+0x2ac>)
 800a28a:	91a0      	str	r1, [sp, #640]	; 0x280
 800a28c:	f10d 0804 	add.w	r8, sp, #4
 800a290:	49a5      	ldr	r1, [pc, #660]	; (800a528 <__ssvfiscanf_r+0x2b0>)
 800a292:	4fa6      	ldr	r7, [pc, #664]	; (800a52c <__ssvfiscanf_r+0x2b4>)
 800a294:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a530 <__ssvfiscanf_r+0x2b8>
 800a298:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a29c:	4606      	mov	r6, r0
 800a29e:	91a1      	str	r1, [sp, #644]	; 0x284
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	7813      	ldrb	r3, [r2, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 815a 	beq.w	800a55e <__ssvfiscanf_r+0x2e6>
 800a2aa:	5cf9      	ldrb	r1, [r7, r3]
 800a2ac:	f011 0108 	ands.w	r1, r1, #8
 800a2b0:	f102 0501 	add.w	r5, r2, #1
 800a2b4:	d019      	beq.n	800a2ea <__ssvfiscanf_r+0x72>
 800a2b6:	6863      	ldr	r3, [r4, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dd0f      	ble.n	800a2dc <__ssvfiscanf_r+0x64>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	781a      	ldrb	r2, [r3, #0]
 800a2c0:	5cba      	ldrb	r2, [r7, r2]
 800a2c2:	0712      	lsls	r2, r2, #28
 800a2c4:	d401      	bmi.n	800a2ca <__ssvfiscanf_r+0x52>
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	e7eb      	b.n	800a2a2 <__ssvfiscanf_r+0x2a>
 800a2ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2cc:	3201      	adds	r2, #1
 800a2ce:	9245      	str	r2, [sp, #276]	; 0x114
 800a2d0:	6862      	ldr	r2, [r4, #4]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	3a01      	subs	r2, #1
 800a2d6:	6062      	str	r2, [r4, #4]
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	e7ec      	b.n	800a2b6 <__ssvfiscanf_r+0x3e>
 800a2dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4798      	blx	r3
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d0e9      	beq.n	800a2bc <__ssvfiscanf_r+0x44>
 800a2e8:	e7ed      	b.n	800a2c6 <__ssvfiscanf_r+0x4e>
 800a2ea:	2b25      	cmp	r3, #37	; 0x25
 800a2ec:	d012      	beq.n	800a314 <__ssvfiscanf_r+0x9c>
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	6863      	ldr	r3, [r4, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f340 8091 	ble.w	800a41a <__ssvfiscanf_r+0x1a2>
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	7813      	ldrb	r3, [r2, #0]
 800a2fc:	4553      	cmp	r3, sl
 800a2fe:	f040 812e 	bne.w	800a55e <__ssvfiscanf_r+0x2e6>
 800a302:	6863      	ldr	r3, [r4, #4]
 800a304:	3b01      	subs	r3, #1
 800a306:	6063      	str	r3, [r4, #4]
 800a308:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a30a:	3201      	adds	r2, #1
 800a30c:	3301      	adds	r3, #1
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	9345      	str	r3, [sp, #276]	; 0x114
 800a312:	e7d8      	b.n	800a2c6 <__ssvfiscanf_r+0x4e>
 800a314:	9141      	str	r1, [sp, #260]	; 0x104
 800a316:	9143      	str	r1, [sp, #268]	; 0x10c
 800a318:	7853      	ldrb	r3, [r2, #1]
 800a31a:	2b2a      	cmp	r3, #42	; 0x2a
 800a31c:	bf02      	ittt	eq
 800a31e:	2310      	moveq	r3, #16
 800a320:	1c95      	addeq	r5, r2, #2
 800a322:	9341      	streq	r3, [sp, #260]	; 0x104
 800a324:	220a      	movs	r2, #10
 800a326:	46aa      	mov	sl, r5
 800a328:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a32c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a330:	2b09      	cmp	r3, #9
 800a332:	d91c      	bls.n	800a36e <__ssvfiscanf_r+0xf6>
 800a334:	487e      	ldr	r0, [pc, #504]	; (800a530 <__ssvfiscanf_r+0x2b8>)
 800a336:	2203      	movs	r2, #3
 800a338:	f7f5 ff62 	bl	8000200 <memchr>
 800a33c:	b138      	cbz	r0, 800a34e <__ssvfiscanf_r+0xd6>
 800a33e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a340:	eba0 0009 	sub.w	r0, r0, r9
 800a344:	2301      	movs	r3, #1
 800a346:	4083      	lsls	r3, r0
 800a348:	4313      	orrs	r3, r2
 800a34a:	9341      	str	r3, [sp, #260]	; 0x104
 800a34c:	4655      	mov	r5, sl
 800a34e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a352:	2b78      	cmp	r3, #120	; 0x78
 800a354:	d806      	bhi.n	800a364 <__ssvfiscanf_r+0xec>
 800a356:	2b57      	cmp	r3, #87	; 0x57
 800a358:	d810      	bhi.n	800a37c <__ssvfiscanf_r+0x104>
 800a35a:	2b25      	cmp	r3, #37	; 0x25
 800a35c:	d0c7      	beq.n	800a2ee <__ssvfiscanf_r+0x76>
 800a35e:	d857      	bhi.n	800a410 <__ssvfiscanf_r+0x198>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d065      	beq.n	800a430 <__ssvfiscanf_r+0x1b8>
 800a364:	2303      	movs	r3, #3
 800a366:	9347      	str	r3, [sp, #284]	; 0x11c
 800a368:	230a      	movs	r3, #10
 800a36a:	9342      	str	r3, [sp, #264]	; 0x108
 800a36c:	e076      	b.n	800a45c <__ssvfiscanf_r+0x1e4>
 800a36e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a370:	fb02 1103 	mla	r1, r2, r3, r1
 800a374:	3930      	subs	r1, #48	; 0x30
 800a376:	9143      	str	r1, [sp, #268]	; 0x10c
 800a378:	4655      	mov	r5, sl
 800a37a:	e7d4      	b.n	800a326 <__ssvfiscanf_r+0xae>
 800a37c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a380:	2a20      	cmp	r2, #32
 800a382:	d8ef      	bhi.n	800a364 <__ssvfiscanf_r+0xec>
 800a384:	a101      	add	r1, pc, #4	; (adr r1, 800a38c <__ssvfiscanf_r+0x114>)
 800a386:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a43f 	.word	0x0800a43f
 800a390:	0800a365 	.word	0x0800a365
 800a394:	0800a365 	.word	0x0800a365
 800a398:	0800a49d 	.word	0x0800a49d
 800a39c:	0800a365 	.word	0x0800a365
 800a3a0:	0800a365 	.word	0x0800a365
 800a3a4:	0800a365 	.word	0x0800a365
 800a3a8:	0800a365 	.word	0x0800a365
 800a3ac:	0800a365 	.word	0x0800a365
 800a3b0:	0800a365 	.word	0x0800a365
 800a3b4:	0800a365 	.word	0x0800a365
 800a3b8:	0800a4b3 	.word	0x0800a4b3
 800a3bc:	0800a499 	.word	0x0800a499
 800a3c0:	0800a417 	.word	0x0800a417
 800a3c4:	0800a417 	.word	0x0800a417
 800a3c8:	0800a417 	.word	0x0800a417
 800a3cc:	0800a365 	.word	0x0800a365
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a365 	.word	0x0800a365
 800a3d8:	0800a365 	.word	0x0800a365
 800a3dc:	0800a365 	.word	0x0800a365
 800a3e0:	0800a365 	.word	0x0800a365
 800a3e4:	0800a4c3 	.word	0x0800a4c3
 800a3e8:	0800a491 	.word	0x0800a491
 800a3ec:	0800a437 	.word	0x0800a437
 800a3f0:	0800a365 	.word	0x0800a365
 800a3f4:	0800a365 	.word	0x0800a365
 800a3f8:	0800a4bf 	.word	0x0800a4bf
 800a3fc:	0800a365 	.word	0x0800a365
 800a400:	0800a499 	.word	0x0800a499
 800a404:	0800a365 	.word	0x0800a365
 800a408:	0800a365 	.word	0x0800a365
 800a40c:	0800a43f 	.word	0x0800a43f
 800a410:	3b45      	subs	r3, #69	; 0x45
 800a412:	2b02      	cmp	r3, #2
 800a414:	d8a6      	bhi.n	800a364 <__ssvfiscanf_r+0xec>
 800a416:	2305      	movs	r3, #5
 800a418:	e01f      	b.n	800a45a <__ssvfiscanf_r+0x1e2>
 800a41a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a41c:	4621      	mov	r1, r4
 800a41e:	4630      	mov	r0, r6
 800a420:	4798      	blx	r3
 800a422:	2800      	cmp	r0, #0
 800a424:	f43f af68 	beq.w	800a2f8 <__ssvfiscanf_r+0x80>
 800a428:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a42a:	2800      	cmp	r0, #0
 800a42c:	f040 808d 	bne.w	800a54a <__ssvfiscanf_r+0x2d2>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295
 800a434:	e08f      	b.n	800a556 <__ssvfiscanf_r+0x2de>
 800a436:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a438:	f042 0220 	orr.w	r2, r2, #32
 800a43c:	9241      	str	r2, [sp, #260]	; 0x104
 800a43e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a444:	9241      	str	r2, [sp, #260]	; 0x104
 800a446:	2210      	movs	r2, #16
 800a448:	2b6f      	cmp	r3, #111	; 0x6f
 800a44a:	9242      	str	r2, [sp, #264]	; 0x108
 800a44c:	bf34      	ite	cc
 800a44e:	2303      	movcc	r3, #3
 800a450:	2304      	movcs	r3, #4
 800a452:	e002      	b.n	800a45a <__ssvfiscanf_r+0x1e2>
 800a454:	2300      	movs	r3, #0
 800a456:	9342      	str	r3, [sp, #264]	; 0x108
 800a458:	2303      	movs	r3, #3
 800a45a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a45c:	6863      	ldr	r3, [r4, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	dd3d      	ble.n	800a4de <__ssvfiscanf_r+0x266>
 800a462:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a464:	0659      	lsls	r1, r3, #25
 800a466:	d404      	bmi.n	800a472 <__ssvfiscanf_r+0x1fa>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	5cba      	ldrb	r2, [r7, r2]
 800a46e:	0712      	lsls	r2, r2, #28
 800a470:	d43c      	bmi.n	800a4ec <__ssvfiscanf_r+0x274>
 800a472:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a474:	2b02      	cmp	r3, #2
 800a476:	dc4b      	bgt.n	800a510 <__ssvfiscanf_r+0x298>
 800a478:	466b      	mov	r3, sp
 800a47a:	4622      	mov	r2, r4
 800a47c:	a941      	add	r1, sp, #260	; 0x104
 800a47e:	4630      	mov	r0, r6
 800a480:	f000 f872 	bl	800a568 <_scanf_chars>
 800a484:	2801      	cmp	r0, #1
 800a486:	d06a      	beq.n	800a55e <__ssvfiscanf_r+0x2e6>
 800a488:	2802      	cmp	r0, #2
 800a48a:	f47f af1c 	bne.w	800a2c6 <__ssvfiscanf_r+0x4e>
 800a48e:	e7cb      	b.n	800a428 <__ssvfiscanf_r+0x1b0>
 800a490:	2308      	movs	r3, #8
 800a492:	9342      	str	r3, [sp, #264]	; 0x108
 800a494:	2304      	movs	r3, #4
 800a496:	e7e0      	b.n	800a45a <__ssvfiscanf_r+0x1e2>
 800a498:	220a      	movs	r2, #10
 800a49a:	e7d5      	b.n	800a448 <__ssvfiscanf_r+0x1d0>
 800a49c:	4629      	mov	r1, r5
 800a49e:	4640      	mov	r0, r8
 800a4a0:	f000 f9b0 	bl	800a804 <__sccl>
 800a4a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4aa:	9341      	str	r3, [sp, #260]	; 0x104
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e7d3      	b.n	800a45a <__ssvfiscanf_r+0x1e2>
 800a4b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b8:	9341      	str	r3, [sp, #260]	; 0x104
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e7cd      	b.n	800a45a <__ssvfiscanf_r+0x1e2>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e7cb      	b.n	800a45a <__ssvfiscanf_r+0x1e2>
 800a4c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a4c4:	06c3      	lsls	r3, r0, #27
 800a4c6:	f53f aefe 	bmi.w	800a2c6 <__ssvfiscanf_r+0x4e>
 800a4ca:	9b00      	ldr	r3, [sp, #0]
 800a4cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4ce:	1d19      	adds	r1, r3, #4
 800a4d0:	9100      	str	r1, [sp, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	07c0      	lsls	r0, r0, #31
 800a4d6:	bf4c      	ite	mi
 800a4d8:	801a      	strhmi	r2, [r3, #0]
 800a4da:	601a      	strpl	r2, [r3, #0]
 800a4dc:	e6f3      	b.n	800a2c6 <__ssvfiscanf_r+0x4e>
 800a4de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4798      	blx	r3
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d0bb      	beq.n	800a462 <__ssvfiscanf_r+0x1ea>
 800a4ea:	e79d      	b.n	800a428 <__ssvfiscanf_r+0x1b0>
 800a4ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a4ee:	3201      	adds	r2, #1
 800a4f0:	9245      	str	r2, [sp, #276]	; 0x114
 800a4f2:	6862      	ldr	r2, [r4, #4]
 800a4f4:	3a01      	subs	r2, #1
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	6062      	str	r2, [r4, #4]
 800a4fa:	dd02      	ble.n	800a502 <__ssvfiscanf_r+0x28a>
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	e7b2      	b.n	800a468 <__ssvfiscanf_r+0x1f0>
 800a502:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a504:	4621      	mov	r1, r4
 800a506:	4630      	mov	r0, r6
 800a508:	4798      	blx	r3
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d0ac      	beq.n	800a468 <__ssvfiscanf_r+0x1f0>
 800a50e:	e78b      	b.n	800a428 <__ssvfiscanf_r+0x1b0>
 800a510:	2b04      	cmp	r3, #4
 800a512:	dc0f      	bgt.n	800a534 <__ssvfiscanf_r+0x2bc>
 800a514:	466b      	mov	r3, sp
 800a516:	4622      	mov	r2, r4
 800a518:	a941      	add	r1, sp, #260	; 0x104
 800a51a:	4630      	mov	r0, r6
 800a51c:	f000 f87e 	bl	800a61c <_scanf_i>
 800a520:	e7b0      	b.n	800a484 <__ssvfiscanf_r+0x20c>
 800a522:	bf00      	nop
 800a524:	0800a1c5 	.word	0x0800a1c5
 800a528:	0800a23f 	.word	0x0800a23f
 800a52c:	0800ac54 	.word	0x0800ac54
 800a530:	0800ac34 	.word	0x0800ac34
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <__ssvfiscanf_r+0x2ec>)
 800a536:	2b00      	cmp	r3, #0
 800a538:	f43f aec5 	beq.w	800a2c6 <__ssvfiscanf_r+0x4e>
 800a53c:	466b      	mov	r3, sp
 800a53e:	4622      	mov	r2, r4
 800a540:	a941      	add	r1, sp, #260	; 0x104
 800a542:	4630      	mov	r0, r6
 800a544:	f3af 8000 	nop.w
 800a548:	e79c      	b.n	800a484 <__ssvfiscanf_r+0x20c>
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a550:	bf18      	it	ne
 800a552:	f04f 30ff 	movne.w	r0, #4294967295
 800a556:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a560:	e7f9      	b.n	800a556 <__ssvfiscanf_r+0x2de>
 800a562:	bf00      	nop
 800a564:	00000000 	.word	0x00000000

0800a568 <_scanf_chars>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	4615      	mov	r5, r2
 800a56e:	688a      	ldr	r2, [r1, #8]
 800a570:	4680      	mov	r8, r0
 800a572:	460c      	mov	r4, r1
 800a574:	b932      	cbnz	r2, 800a584 <_scanf_chars+0x1c>
 800a576:	698a      	ldr	r2, [r1, #24]
 800a578:	2a00      	cmp	r2, #0
 800a57a:	bf0c      	ite	eq
 800a57c:	2201      	moveq	r2, #1
 800a57e:	f04f 32ff 	movne.w	r2, #4294967295
 800a582:	608a      	str	r2, [r1, #8]
 800a584:	6822      	ldr	r2, [r4, #0]
 800a586:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a618 <_scanf_chars+0xb0>
 800a58a:	06d1      	lsls	r1, r2, #27
 800a58c:	bf5f      	itttt	pl
 800a58e:	681a      	ldrpl	r2, [r3, #0]
 800a590:	1d11      	addpl	r1, r2, #4
 800a592:	6019      	strpl	r1, [r3, #0]
 800a594:	6816      	ldrpl	r6, [r2, #0]
 800a596:	2700      	movs	r7, #0
 800a598:	69a0      	ldr	r0, [r4, #24]
 800a59a:	b188      	cbz	r0, 800a5c0 <_scanf_chars+0x58>
 800a59c:	2801      	cmp	r0, #1
 800a59e:	d107      	bne.n	800a5b0 <_scanf_chars+0x48>
 800a5a0:	682a      	ldr	r2, [r5, #0]
 800a5a2:	7811      	ldrb	r1, [r2, #0]
 800a5a4:	6962      	ldr	r2, [r4, #20]
 800a5a6:	5c52      	ldrb	r2, [r2, r1]
 800a5a8:	b952      	cbnz	r2, 800a5c0 <_scanf_chars+0x58>
 800a5aa:	2f00      	cmp	r7, #0
 800a5ac:	d031      	beq.n	800a612 <_scanf_chars+0xaa>
 800a5ae:	e022      	b.n	800a5f6 <_scanf_chars+0x8e>
 800a5b0:	2802      	cmp	r0, #2
 800a5b2:	d120      	bne.n	800a5f6 <_scanf_chars+0x8e>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a5bc:	071b      	lsls	r3, r3, #28
 800a5be:	d41a      	bmi.n	800a5f6 <_scanf_chars+0x8e>
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	06da      	lsls	r2, r3, #27
 800a5c4:	bf5e      	ittt	pl
 800a5c6:	682b      	ldrpl	r3, [r5, #0]
 800a5c8:	781b      	ldrbpl	r3, [r3, #0]
 800a5ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a5ce:	682a      	ldr	r2, [r5, #0]
 800a5d0:	686b      	ldr	r3, [r5, #4]
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	68a2      	ldr	r2, [r4, #8]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	3a01      	subs	r2, #1
 800a5dc:	606b      	str	r3, [r5, #4]
 800a5de:	3701      	adds	r7, #1
 800a5e0:	60a2      	str	r2, [r4, #8]
 800a5e2:	b142      	cbz	r2, 800a5f6 <_scanf_chars+0x8e>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dcd7      	bgt.n	800a598 <_scanf_chars+0x30>
 800a5e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	4798      	blx	r3
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d0d0      	beq.n	800a598 <_scanf_chars+0x30>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	f013 0310 	ands.w	r3, r3, #16
 800a5fc:	d105      	bne.n	800a60a <_scanf_chars+0xa2>
 800a5fe:	68e2      	ldr	r2, [r4, #12]
 800a600:	3201      	adds	r2, #1
 800a602:	60e2      	str	r2, [r4, #12]
 800a604:	69a2      	ldr	r2, [r4, #24]
 800a606:	b102      	cbz	r2, 800a60a <_scanf_chars+0xa2>
 800a608:	7033      	strb	r3, [r6, #0]
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	443b      	add	r3, r7
 800a60e:	6123      	str	r3, [r4, #16]
 800a610:	2000      	movs	r0, #0
 800a612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a616:	bf00      	nop
 800a618:	0800ac54 	.word	0x0800ac54

0800a61c <_scanf_i>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	4698      	mov	r8, r3
 800a622:	4b74      	ldr	r3, [pc, #464]	; (800a7f4 <_scanf_i+0x1d8>)
 800a624:	460c      	mov	r4, r1
 800a626:	4682      	mov	sl, r0
 800a628:	4616      	mov	r6, r2
 800a62a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a62e:	b087      	sub	sp, #28
 800a630:	ab03      	add	r3, sp, #12
 800a632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a636:	4b70      	ldr	r3, [pc, #448]	; (800a7f8 <_scanf_i+0x1dc>)
 800a638:	69a1      	ldr	r1, [r4, #24]
 800a63a:	4a70      	ldr	r2, [pc, #448]	; (800a7fc <_scanf_i+0x1e0>)
 800a63c:	2903      	cmp	r1, #3
 800a63e:	bf18      	it	ne
 800a640:	461a      	movne	r2, r3
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	9201      	str	r2, [sp, #4]
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a64c:	bf88      	it	hi
 800a64e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a652:	4627      	mov	r7, r4
 800a654:	bf82      	ittt	hi
 800a656:	eb03 0905 	addhi.w	r9, r3, r5
 800a65a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a65e:	60a3      	strhi	r3, [r4, #8]
 800a660:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a664:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a668:	bf98      	it	ls
 800a66a:	f04f 0900 	movls.w	r9, #0
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	463d      	mov	r5, r7
 800a672:	f04f 0b00 	mov.w	fp, #0
 800a676:	6831      	ldr	r1, [r6, #0]
 800a678:	ab03      	add	r3, sp, #12
 800a67a:	7809      	ldrb	r1, [r1, #0]
 800a67c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a680:	2202      	movs	r2, #2
 800a682:	f7f5 fdbd 	bl	8000200 <memchr>
 800a686:	b328      	cbz	r0, 800a6d4 <_scanf_i+0xb8>
 800a688:	f1bb 0f01 	cmp.w	fp, #1
 800a68c:	d159      	bne.n	800a742 <_scanf_i+0x126>
 800a68e:	6862      	ldr	r2, [r4, #4]
 800a690:	b92a      	cbnz	r2, 800a69e <_scanf_i+0x82>
 800a692:	6822      	ldr	r2, [r4, #0]
 800a694:	2308      	movs	r3, #8
 800a696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a69a:	6063      	str	r3, [r4, #4]
 800a69c:	6022      	str	r2, [r4, #0]
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a6a4:	6022      	str	r2, [r4, #0]
 800a6a6:	68a2      	ldr	r2, [r4, #8]
 800a6a8:	1e51      	subs	r1, r2, #1
 800a6aa:	60a1      	str	r1, [r4, #8]
 800a6ac:	b192      	cbz	r2, 800a6d4 <_scanf_i+0xb8>
 800a6ae:	6832      	ldr	r2, [r6, #0]
 800a6b0:	1c51      	adds	r1, r2, #1
 800a6b2:	6031      	str	r1, [r6, #0]
 800a6b4:	7812      	ldrb	r2, [r2, #0]
 800a6b6:	f805 2b01 	strb.w	r2, [r5], #1
 800a6ba:	6872      	ldr	r2, [r6, #4]
 800a6bc:	3a01      	subs	r2, #1
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	6072      	str	r2, [r6, #4]
 800a6c2:	dc07      	bgt.n	800a6d4 <_scanf_i+0xb8>
 800a6c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	4790      	blx	r2
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8085 	bne.w	800a7de <_scanf_i+0x1c2>
 800a6d4:	f10b 0b01 	add.w	fp, fp, #1
 800a6d8:	f1bb 0f03 	cmp.w	fp, #3
 800a6dc:	d1cb      	bne.n	800a676 <_scanf_i+0x5a>
 800a6de:	6863      	ldr	r3, [r4, #4]
 800a6e0:	b90b      	cbnz	r3, 800a6e6 <_scanf_i+0xca>
 800a6e2:	230a      	movs	r3, #10
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	6863      	ldr	r3, [r4, #4]
 800a6e8:	4945      	ldr	r1, [pc, #276]	; (800a800 <_scanf_i+0x1e4>)
 800a6ea:	6960      	ldr	r0, [r4, #20]
 800a6ec:	1ac9      	subs	r1, r1, r3
 800a6ee:	f000 f889 	bl	800a804 <__sccl>
 800a6f2:	f04f 0b00 	mov.w	fp, #0
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d03d      	beq.n	800a77a <_scanf_i+0x15e>
 800a6fe:	6831      	ldr	r1, [r6, #0]
 800a700:	6960      	ldr	r0, [r4, #20]
 800a702:	f891 c000 	ldrb.w	ip, [r1]
 800a706:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d035      	beq.n	800a77a <_scanf_i+0x15e>
 800a70e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a712:	d124      	bne.n	800a75e <_scanf_i+0x142>
 800a714:	0510      	lsls	r0, r2, #20
 800a716:	d522      	bpl.n	800a75e <_scanf_i+0x142>
 800a718:	f10b 0b01 	add.w	fp, fp, #1
 800a71c:	f1b9 0f00 	cmp.w	r9, #0
 800a720:	d003      	beq.n	800a72a <_scanf_i+0x10e>
 800a722:	3301      	adds	r3, #1
 800a724:	f109 39ff 	add.w	r9, r9, #4294967295
 800a728:	60a3      	str	r3, [r4, #8]
 800a72a:	6873      	ldr	r3, [r6, #4]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	6073      	str	r3, [r6, #4]
 800a732:	dd1b      	ble.n	800a76c <_scanf_i+0x150>
 800a734:	6833      	ldr	r3, [r6, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	60a3      	str	r3, [r4, #8]
 800a740:	e7d9      	b.n	800a6f6 <_scanf_i+0xda>
 800a742:	f1bb 0f02 	cmp.w	fp, #2
 800a746:	d1ae      	bne.n	800a6a6 <_scanf_i+0x8a>
 800a748:	6822      	ldr	r2, [r4, #0]
 800a74a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a74e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a752:	d1bf      	bne.n	800a6d4 <_scanf_i+0xb8>
 800a754:	2310      	movs	r3, #16
 800a756:	6063      	str	r3, [r4, #4]
 800a758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a75c:	e7a2      	b.n	800a6a4 <_scanf_i+0x88>
 800a75e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	780b      	ldrb	r3, [r1, #0]
 800a766:	f805 3b01 	strb.w	r3, [r5], #1
 800a76a:	e7de      	b.n	800a72a <_scanf_i+0x10e>
 800a76c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a770:	4631      	mov	r1, r6
 800a772:	4650      	mov	r0, sl
 800a774:	4798      	blx	r3
 800a776:	2800      	cmp	r0, #0
 800a778:	d0df      	beq.n	800a73a <_scanf_i+0x11e>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	05d9      	lsls	r1, r3, #23
 800a77e:	d50d      	bpl.n	800a79c <_scanf_i+0x180>
 800a780:	42bd      	cmp	r5, r7
 800a782:	d909      	bls.n	800a798 <_scanf_i+0x17c>
 800a784:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a78c:	4632      	mov	r2, r6
 800a78e:	4650      	mov	r0, sl
 800a790:	4798      	blx	r3
 800a792:	f105 39ff 	add.w	r9, r5, #4294967295
 800a796:	464d      	mov	r5, r9
 800a798:	42bd      	cmp	r5, r7
 800a79a:	d028      	beq.n	800a7ee <_scanf_i+0x1d2>
 800a79c:	6822      	ldr	r2, [r4, #0]
 800a79e:	f012 0210 	ands.w	r2, r2, #16
 800a7a2:	d113      	bne.n	800a7cc <_scanf_i+0x1b0>
 800a7a4:	702a      	strb	r2, [r5, #0]
 800a7a6:	6863      	ldr	r3, [r4, #4]
 800a7a8:	9e01      	ldr	r6, [sp, #4]
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	4650      	mov	r0, sl
 800a7ae:	47b0      	blx	r6
 800a7b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b4:	6821      	ldr	r1, [r4, #0]
 800a7b6:	1d1a      	adds	r2, r3, #4
 800a7b8:	f8c8 2000 	str.w	r2, [r8]
 800a7bc:	f011 0f20 	tst.w	r1, #32
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	d00f      	beq.n	800a7e4 <_scanf_i+0x1c8>
 800a7c4:	6018      	str	r0, [r3, #0]
 800a7c6:	68e3      	ldr	r3, [r4, #12]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	60e3      	str	r3, [r4, #12]
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	1bed      	subs	r5, r5, r7
 800a7d0:	445d      	add	r5, fp
 800a7d2:	442b      	add	r3, r5
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	b007      	add	sp, #28
 800a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	f04f 0b00 	mov.w	fp, #0
 800a7e2:	e7ca      	b.n	800a77a <_scanf_i+0x15e>
 800a7e4:	07ca      	lsls	r2, r1, #31
 800a7e6:	bf4c      	ite	mi
 800a7e8:	8018      	strhmi	r0, [r3, #0]
 800a7ea:	6018      	strpl	r0, [r3, #0]
 800a7ec:	e7eb      	b.n	800a7c6 <_scanf_i+0x1aa>
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	e7f2      	b.n	800a7d8 <_scanf_i+0x1bc>
 800a7f2:	bf00      	nop
 800a7f4:	0800ac10 	.word	0x0800ac10
 800a7f8:	0800ab75 	.word	0x0800ab75
 800a7fc:	0800aa8d 	.word	0x0800aa8d
 800a800:	0800ac48 	.word	0x0800ac48

0800a804 <__sccl>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	780b      	ldrb	r3, [r1, #0]
 800a808:	4604      	mov	r4, r0
 800a80a:	2b5e      	cmp	r3, #94	; 0x5e
 800a80c:	bf0b      	itete	eq
 800a80e:	784b      	ldrbeq	r3, [r1, #1]
 800a810:	1c4a      	addne	r2, r1, #1
 800a812:	1c8a      	addeq	r2, r1, #2
 800a814:	2100      	movne	r1, #0
 800a816:	bf08      	it	eq
 800a818:	2101      	moveq	r1, #1
 800a81a:	3801      	subs	r0, #1
 800a81c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a820:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a824:	42a8      	cmp	r0, r5
 800a826:	d1fb      	bne.n	800a820 <__sccl+0x1c>
 800a828:	b90b      	cbnz	r3, 800a82e <__sccl+0x2a>
 800a82a:	1e50      	subs	r0, r2, #1
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	f081 0101 	eor.w	r1, r1, #1
 800a832:	54e1      	strb	r1, [r4, r3]
 800a834:	4610      	mov	r0, r2
 800a836:	4602      	mov	r2, r0
 800a838:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a83c:	2d2d      	cmp	r5, #45	; 0x2d
 800a83e:	d005      	beq.n	800a84c <__sccl+0x48>
 800a840:	2d5d      	cmp	r5, #93	; 0x5d
 800a842:	d016      	beq.n	800a872 <__sccl+0x6e>
 800a844:	2d00      	cmp	r5, #0
 800a846:	d0f1      	beq.n	800a82c <__sccl+0x28>
 800a848:	462b      	mov	r3, r5
 800a84a:	e7f2      	b.n	800a832 <__sccl+0x2e>
 800a84c:	7846      	ldrb	r6, [r0, #1]
 800a84e:	2e5d      	cmp	r6, #93	; 0x5d
 800a850:	d0fa      	beq.n	800a848 <__sccl+0x44>
 800a852:	42b3      	cmp	r3, r6
 800a854:	dcf8      	bgt.n	800a848 <__sccl+0x44>
 800a856:	3002      	adds	r0, #2
 800a858:	461a      	mov	r2, r3
 800a85a:	3201      	adds	r2, #1
 800a85c:	4296      	cmp	r6, r2
 800a85e:	54a1      	strb	r1, [r4, r2]
 800a860:	dcfb      	bgt.n	800a85a <__sccl+0x56>
 800a862:	1af2      	subs	r2, r6, r3
 800a864:	3a01      	subs	r2, #1
 800a866:	1c5d      	adds	r5, r3, #1
 800a868:	42b3      	cmp	r3, r6
 800a86a:	bfa8      	it	ge
 800a86c:	2200      	movge	r2, #0
 800a86e:	18ab      	adds	r3, r5, r2
 800a870:	e7e1      	b.n	800a836 <__sccl+0x32>
 800a872:	4610      	mov	r0, r2
 800a874:	e7da      	b.n	800a82c <__sccl+0x28>

0800a876 <__submore>:
 800a876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a87e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a882:	4299      	cmp	r1, r3
 800a884:	d11d      	bne.n	800a8c2 <__submore+0x4c>
 800a886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a88a:	f7ff fc0f 	bl	800a0ac <_malloc_r>
 800a88e:	b918      	cbnz	r0, 800a898 <__submore+0x22>
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a89c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a89e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a8a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a8a4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a8a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a8ac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a8b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a8b4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a8b8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a8bc:	6020      	str	r0, [r4, #0]
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e7e8      	b.n	800a894 <__submore+0x1e>
 800a8c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a8c4:	0077      	lsls	r7, r6, #1
 800a8c6:	463a      	mov	r2, r7
 800a8c8:	f000 f82e 	bl	800a928 <_realloc_r>
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0de      	beq.n	800a890 <__submore+0x1a>
 800a8d2:	eb00 0806 	add.w	r8, r0, r6
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	4632      	mov	r2, r6
 800a8da:	4640      	mov	r0, r8
 800a8dc:	f000 f816 	bl	800a90c <memcpy>
 800a8e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a8e4:	f8c4 8000 	str.w	r8, [r4]
 800a8e8:	e7e9      	b.n	800a8be <__submore+0x48>
	...

0800a8ec <_sbrk_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4d06      	ldr	r5, [pc, #24]	; (800a908 <_sbrk_r+0x1c>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7f6 feba 	bl	8001670 <_sbrk>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d102      	bne.n	800a906 <_sbrk_r+0x1a>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	b103      	cbz	r3, 800a906 <_sbrk_r+0x1a>
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	20002120 	.word	0x20002120

0800a90c <memcpy>:
 800a90c:	440a      	add	r2, r1
 800a90e:	4291      	cmp	r1, r2
 800a910:	f100 33ff 	add.w	r3, r0, #4294967295
 800a914:	d100      	bne.n	800a918 <memcpy+0xc>
 800a916:	4770      	bx	lr
 800a918:	b510      	push	{r4, lr}
 800a91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a922:	4291      	cmp	r1, r2
 800a924:	d1f9      	bne.n	800a91a <memcpy+0xe>
 800a926:	bd10      	pop	{r4, pc}

0800a928 <_realloc_r>:
 800a928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92c:	4680      	mov	r8, r0
 800a92e:	4614      	mov	r4, r2
 800a930:	460e      	mov	r6, r1
 800a932:	b921      	cbnz	r1, 800a93e <_realloc_r+0x16>
 800a934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a938:	4611      	mov	r1, r2
 800a93a:	f7ff bbb7 	b.w	800a0ac <_malloc_r>
 800a93e:	b92a      	cbnz	r2, 800a94c <_realloc_r+0x24>
 800a940:	f7ff fb48 	bl	8009fd4 <_free_r>
 800a944:	4625      	mov	r5, r4
 800a946:	4628      	mov	r0, r5
 800a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94c:	f000 f914 	bl	800ab78 <_malloc_usable_size_r>
 800a950:	4284      	cmp	r4, r0
 800a952:	4607      	mov	r7, r0
 800a954:	d802      	bhi.n	800a95c <_realloc_r+0x34>
 800a956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a95a:	d812      	bhi.n	800a982 <_realloc_r+0x5a>
 800a95c:	4621      	mov	r1, r4
 800a95e:	4640      	mov	r0, r8
 800a960:	f7ff fba4 	bl	800a0ac <_malloc_r>
 800a964:	4605      	mov	r5, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d0ed      	beq.n	800a946 <_realloc_r+0x1e>
 800a96a:	42bc      	cmp	r4, r7
 800a96c:	4622      	mov	r2, r4
 800a96e:	4631      	mov	r1, r6
 800a970:	bf28      	it	cs
 800a972:	463a      	movcs	r2, r7
 800a974:	f7ff ffca 	bl	800a90c <memcpy>
 800a978:	4631      	mov	r1, r6
 800a97a:	4640      	mov	r0, r8
 800a97c:	f7ff fb2a 	bl	8009fd4 <_free_r>
 800a980:	e7e1      	b.n	800a946 <_realloc_r+0x1e>
 800a982:	4635      	mov	r5, r6
 800a984:	e7df      	b.n	800a946 <_realloc_r+0x1e>
	...

0800a988 <_strtol_l.constprop.0>:
 800a988:	2b01      	cmp	r3, #1
 800a98a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98e:	d001      	beq.n	800a994 <_strtol_l.constprop.0+0xc>
 800a990:	2b24      	cmp	r3, #36	; 0x24
 800a992:	d906      	bls.n	800a9a2 <_strtol_l.constprop.0+0x1a>
 800a994:	f7ff faf2 	bl	8009f7c <__errno>
 800a998:	2316      	movs	r3, #22
 800a99a:	6003      	str	r3, [r0, #0]
 800a99c:	2000      	movs	r0, #0
 800a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aa88 <_strtol_l.constprop.0+0x100>
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	462e      	mov	r6, r5
 800a9aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a9b2:	f017 0708 	ands.w	r7, r7, #8
 800a9b6:	d1f7      	bne.n	800a9a8 <_strtol_l.constprop.0+0x20>
 800a9b8:	2c2d      	cmp	r4, #45	; 0x2d
 800a9ba:	d132      	bne.n	800aa22 <_strtol_l.constprop.0+0x9a>
 800a9bc:	782c      	ldrb	r4, [r5, #0]
 800a9be:	2701      	movs	r7, #1
 800a9c0:	1cb5      	adds	r5, r6, #2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d05b      	beq.n	800aa7e <_strtol_l.constprop.0+0xf6>
 800a9c6:	2b10      	cmp	r3, #16
 800a9c8:	d109      	bne.n	800a9de <_strtol_l.constprop.0+0x56>
 800a9ca:	2c30      	cmp	r4, #48	; 0x30
 800a9cc:	d107      	bne.n	800a9de <_strtol_l.constprop.0+0x56>
 800a9ce:	782c      	ldrb	r4, [r5, #0]
 800a9d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a9d4:	2c58      	cmp	r4, #88	; 0x58
 800a9d6:	d14d      	bne.n	800aa74 <_strtol_l.constprop.0+0xec>
 800a9d8:	786c      	ldrb	r4, [r5, #1]
 800a9da:	2310      	movs	r3, #16
 800a9dc:	3502      	adds	r5, #2
 800a9de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a9e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9e6:	f04f 0e00 	mov.w	lr, #0
 800a9ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800a9ee:	4676      	mov	r6, lr
 800a9f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a9f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9f8:	f1bc 0f09 	cmp.w	ip, #9
 800a9fc:	d816      	bhi.n	800aa2c <_strtol_l.constprop.0+0xa4>
 800a9fe:	4664      	mov	r4, ip
 800aa00:	42a3      	cmp	r3, r4
 800aa02:	dd24      	ble.n	800aa4e <_strtol_l.constprop.0+0xc6>
 800aa04:	f1be 3fff 	cmp.w	lr, #4294967295
 800aa08:	d008      	beq.n	800aa1c <_strtol_l.constprop.0+0x94>
 800aa0a:	45b1      	cmp	r9, r6
 800aa0c:	d31c      	bcc.n	800aa48 <_strtol_l.constprop.0+0xc0>
 800aa0e:	d101      	bne.n	800aa14 <_strtol_l.constprop.0+0x8c>
 800aa10:	45a2      	cmp	sl, r4
 800aa12:	db19      	blt.n	800aa48 <_strtol_l.constprop.0+0xc0>
 800aa14:	fb06 4603 	mla	r6, r6, r3, r4
 800aa18:	f04f 0e01 	mov.w	lr, #1
 800aa1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa20:	e7e8      	b.n	800a9f4 <_strtol_l.constprop.0+0x6c>
 800aa22:	2c2b      	cmp	r4, #43	; 0x2b
 800aa24:	bf04      	itt	eq
 800aa26:	782c      	ldrbeq	r4, [r5, #0]
 800aa28:	1cb5      	addeq	r5, r6, #2
 800aa2a:	e7ca      	b.n	800a9c2 <_strtol_l.constprop.0+0x3a>
 800aa2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa30:	f1bc 0f19 	cmp.w	ip, #25
 800aa34:	d801      	bhi.n	800aa3a <_strtol_l.constprop.0+0xb2>
 800aa36:	3c37      	subs	r4, #55	; 0x37
 800aa38:	e7e2      	b.n	800aa00 <_strtol_l.constprop.0+0x78>
 800aa3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa3e:	f1bc 0f19 	cmp.w	ip, #25
 800aa42:	d804      	bhi.n	800aa4e <_strtol_l.constprop.0+0xc6>
 800aa44:	3c57      	subs	r4, #87	; 0x57
 800aa46:	e7db      	b.n	800aa00 <_strtol_l.constprop.0+0x78>
 800aa48:	f04f 3eff 	mov.w	lr, #4294967295
 800aa4c:	e7e6      	b.n	800aa1c <_strtol_l.constprop.0+0x94>
 800aa4e:	f1be 3fff 	cmp.w	lr, #4294967295
 800aa52:	d105      	bne.n	800aa60 <_strtol_l.constprop.0+0xd8>
 800aa54:	2322      	movs	r3, #34	; 0x22
 800aa56:	6003      	str	r3, [r0, #0]
 800aa58:	4646      	mov	r6, r8
 800aa5a:	b942      	cbnz	r2, 800aa6e <_strtol_l.constprop.0+0xe6>
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	e79e      	b.n	800a99e <_strtol_l.constprop.0+0x16>
 800aa60:	b107      	cbz	r7, 800aa64 <_strtol_l.constprop.0+0xdc>
 800aa62:	4276      	negs	r6, r6
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	d0f9      	beq.n	800aa5c <_strtol_l.constprop.0+0xd4>
 800aa68:	f1be 0f00 	cmp.w	lr, #0
 800aa6c:	d000      	beq.n	800aa70 <_strtol_l.constprop.0+0xe8>
 800aa6e:	1e69      	subs	r1, r5, #1
 800aa70:	6011      	str	r1, [r2, #0]
 800aa72:	e7f3      	b.n	800aa5c <_strtol_l.constprop.0+0xd4>
 800aa74:	2430      	movs	r4, #48	; 0x30
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1b1      	bne.n	800a9de <_strtol_l.constprop.0+0x56>
 800aa7a:	2308      	movs	r3, #8
 800aa7c:	e7af      	b.n	800a9de <_strtol_l.constprop.0+0x56>
 800aa7e:	2c30      	cmp	r4, #48	; 0x30
 800aa80:	d0a5      	beq.n	800a9ce <_strtol_l.constprop.0+0x46>
 800aa82:	230a      	movs	r3, #10
 800aa84:	e7ab      	b.n	800a9de <_strtol_l.constprop.0+0x56>
 800aa86:	bf00      	nop
 800aa88:	0800ac54 	.word	0x0800ac54

0800aa8c <_strtol_r>:
 800aa8c:	f7ff bf7c 	b.w	800a988 <_strtol_l.constprop.0>

0800aa90 <_strtoul_l.constprop.0>:
 800aa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4f36      	ldr	r7, [pc, #216]	; (800ab70 <_strtoul_l.constprop.0+0xe0>)
 800aa96:	4686      	mov	lr, r0
 800aa98:	460d      	mov	r5, r1
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaa0:	5d3e      	ldrb	r6, [r7, r4]
 800aaa2:	f016 0608 	ands.w	r6, r6, #8
 800aaa6:	d1f8      	bne.n	800aa9a <_strtoul_l.constprop.0+0xa>
 800aaa8:	2c2d      	cmp	r4, #45	; 0x2d
 800aaaa:	d130      	bne.n	800ab0e <_strtoul_l.constprop.0+0x7e>
 800aaac:	782c      	ldrb	r4, [r5, #0]
 800aaae:	2601      	movs	r6, #1
 800aab0:	1c85      	adds	r5, r0, #2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d057      	beq.n	800ab66 <_strtoul_l.constprop.0+0xd6>
 800aab6:	2b10      	cmp	r3, #16
 800aab8:	d109      	bne.n	800aace <_strtoul_l.constprop.0+0x3e>
 800aaba:	2c30      	cmp	r4, #48	; 0x30
 800aabc:	d107      	bne.n	800aace <_strtoul_l.constprop.0+0x3e>
 800aabe:	7828      	ldrb	r0, [r5, #0]
 800aac0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aac4:	2858      	cmp	r0, #88	; 0x58
 800aac6:	d149      	bne.n	800ab5c <_strtoul_l.constprop.0+0xcc>
 800aac8:	786c      	ldrb	r4, [r5, #1]
 800aaca:	2310      	movs	r3, #16
 800aacc:	3502      	adds	r5, #2
 800aace:	f04f 38ff 	mov.w	r8, #4294967295
 800aad2:	2700      	movs	r7, #0
 800aad4:	fbb8 f8f3 	udiv	r8, r8, r3
 800aad8:	fb03 f908 	mul.w	r9, r3, r8
 800aadc:	ea6f 0909 	mvn.w	r9, r9
 800aae0:	4638      	mov	r0, r7
 800aae2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aae6:	f1bc 0f09 	cmp.w	ip, #9
 800aaea:	d815      	bhi.n	800ab18 <_strtoul_l.constprop.0+0x88>
 800aaec:	4664      	mov	r4, ip
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	dd23      	ble.n	800ab3a <_strtoul_l.constprop.0+0xaa>
 800aaf2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800aaf6:	d007      	beq.n	800ab08 <_strtoul_l.constprop.0+0x78>
 800aaf8:	4580      	cmp	r8, r0
 800aafa:	d31b      	bcc.n	800ab34 <_strtoul_l.constprop.0+0xa4>
 800aafc:	d101      	bne.n	800ab02 <_strtoul_l.constprop.0+0x72>
 800aafe:	45a1      	cmp	r9, r4
 800ab00:	db18      	blt.n	800ab34 <_strtoul_l.constprop.0+0xa4>
 800ab02:	fb00 4003 	mla	r0, r0, r3, r4
 800ab06:	2701      	movs	r7, #1
 800ab08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab0c:	e7e9      	b.n	800aae2 <_strtoul_l.constprop.0+0x52>
 800ab0e:	2c2b      	cmp	r4, #43	; 0x2b
 800ab10:	bf04      	itt	eq
 800ab12:	782c      	ldrbeq	r4, [r5, #0]
 800ab14:	1c85      	addeq	r5, r0, #2
 800ab16:	e7cc      	b.n	800aab2 <_strtoul_l.constprop.0+0x22>
 800ab18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ab1c:	f1bc 0f19 	cmp.w	ip, #25
 800ab20:	d801      	bhi.n	800ab26 <_strtoul_l.constprop.0+0x96>
 800ab22:	3c37      	subs	r4, #55	; 0x37
 800ab24:	e7e3      	b.n	800aaee <_strtoul_l.constprop.0+0x5e>
 800ab26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ab2a:	f1bc 0f19 	cmp.w	ip, #25
 800ab2e:	d804      	bhi.n	800ab3a <_strtoul_l.constprop.0+0xaa>
 800ab30:	3c57      	subs	r4, #87	; 0x57
 800ab32:	e7dc      	b.n	800aaee <_strtoul_l.constprop.0+0x5e>
 800ab34:	f04f 37ff 	mov.w	r7, #4294967295
 800ab38:	e7e6      	b.n	800ab08 <_strtoul_l.constprop.0+0x78>
 800ab3a:	1c7b      	adds	r3, r7, #1
 800ab3c:	d106      	bne.n	800ab4c <_strtoul_l.constprop.0+0xbc>
 800ab3e:	2322      	movs	r3, #34	; 0x22
 800ab40:	f8ce 3000 	str.w	r3, [lr]
 800ab44:	4638      	mov	r0, r7
 800ab46:	b932      	cbnz	r2, 800ab56 <_strtoul_l.constprop.0+0xc6>
 800ab48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab4c:	b106      	cbz	r6, 800ab50 <_strtoul_l.constprop.0+0xc0>
 800ab4e:	4240      	negs	r0, r0
 800ab50:	2a00      	cmp	r2, #0
 800ab52:	d0f9      	beq.n	800ab48 <_strtoul_l.constprop.0+0xb8>
 800ab54:	b107      	cbz	r7, 800ab58 <_strtoul_l.constprop.0+0xc8>
 800ab56:	1e69      	subs	r1, r5, #1
 800ab58:	6011      	str	r1, [r2, #0]
 800ab5a:	e7f5      	b.n	800ab48 <_strtoul_l.constprop.0+0xb8>
 800ab5c:	2430      	movs	r4, #48	; 0x30
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1b5      	bne.n	800aace <_strtoul_l.constprop.0+0x3e>
 800ab62:	2308      	movs	r3, #8
 800ab64:	e7b3      	b.n	800aace <_strtoul_l.constprop.0+0x3e>
 800ab66:	2c30      	cmp	r4, #48	; 0x30
 800ab68:	d0a9      	beq.n	800aabe <_strtoul_l.constprop.0+0x2e>
 800ab6a:	230a      	movs	r3, #10
 800ab6c:	e7af      	b.n	800aace <_strtoul_l.constprop.0+0x3e>
 800ab6e:	bf00      	nop
 800ab70:	0800ac54 	.word	0x0800ac54

0800ab74 <_strtoul_r>:
 800ab74:	f7ff bf8c 	b.w	800aa90 <_strtoul_l.constprop.0>

0800ab78 <_malloc_usable_size_r>:
 800ab78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7c:	1f18      	subs	r0, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfbc      	itt	lt
 800ab82:	580b      	ldrlt	r3, [r1, r0]
 800ab84:	18c0      	addlt	r0, r0, r3
 800ab86:	4770      	bx	lr

0800ab88 <_init>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	bf00      	nop
 800ab8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8e:	bc08      	pop	{r3}
 800ab90:	469e      	mov	lr, r3
 800ab92:	4770      	bx	lr

0800ab94 <_fini>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	bf00      	nop
 800ab98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9a:	bc08      	pop	{r3}
 800ab9c:	469e      	mov	lr, r3
 800ab9e:	4770      	bx	lr
